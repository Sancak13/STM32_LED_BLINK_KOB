
LED_BLINK_KOB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c298  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800c448  0800c448  0001c448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c51c  0800c51c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c51c  0800c51c  0001c51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c524  0800c524  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c524  0800c524  0001c524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c528  0800c528  0001c528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c52c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00008d80  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008e14  20008e14  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b182  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a6d  00000000  00000000  0004b246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a0  00000000  00000000  00050cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002070  00000000  00000000  00052f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b484  00000000  00000000  00054fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a8a7  00000000  00000000  0008044c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4fbf  00000000  00000000  000aacf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019fcb2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009564  00000000  00000000  0019fd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c430 	.word	0x0800c430

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800c430 	.word	0x0800c430

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	200000b0 	.word	0x200000b0
 8000558:	20000108 	.word	0x20000108

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b096      	sub	sp, #88	; 0x58
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f001 f88d 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f859 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 fac7 	bl	8000afc <MX_GPIO_Init>
  MX_CRC_Init();
 800056e:	f000 f8bf 	bl	80006f0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000572:	f000 f8d1 	bl	8000718 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000576:	f000 fa71 	bl	8000a5c <MX_FMC_Init>
  MX_I2C3_Init();
 800057a:	f000 f8ff 	bl	800077c <MX_I2C3_Init>
  MX_LTDC_Init();
 800057e:	f000 f93d 	bl	80007fc <MX_LTDC_Init>
  MX_SPI5_Init();
 8000582:	f000 f9bb 	bl	80008fc <MX_SPI5_Init>
  MX_TIM1_Init();
 8000586:	f000 f9ef 	bl	8000968 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800058a:	f000 fa3d 	bl	8000a08 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <main+0xa8>)
 8000590:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000594:	461d      	mov	r5, r3
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f009 f87c 	bl	80096a6 <osThreadCreate>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a15      	ldr	r2, [pc, #84]	; (8000608 <main+0xac>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <main+0xb0>)
 80005b6:	f107 0420 	add.w	r4, r7, #32
 80005ba:	461d      	mov	r5, r3
 80005bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f009 f869 	bl	80096a6 <osThreadCreate>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <main+0xb4>)
 80005d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <main+0xb8>)
 80005dc:	1d3c      	adds	r4, r7, #4
 80005de:	461d      	mov	r5, r3
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f009 f858 	bl	80096a6 <osThreadCreate>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <main+0xbc>)
 80005fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005fc:	f009 f84c 	bl	8009698 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0xa4>
 8000602:	bf00      	nop
 8000604:	0800c46c 	.word	0x0800c46c
 8000608:	20000564 	.word	0x20000564
 800060c:	0800c488 	.word	0x0800c488
 8000610:	20000568 	.word	0x20000568
 8000614:	0800c4a4 	.word	0x0800c4a4
 8000618:	2000056c 	.word	0x2000056c

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f00b fdfa 	bl	800c224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a20      	ldr	r2, [pc, #128]	; (80006ec <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000694:	2348      	movs	r3, #72	; 0x48
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800069c:	2303      	movs	r3, #3
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 fe4d 	bl	8004344 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b0:	f000 fb78 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f004 f8af 	bl	8004834 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006dc:	f000 fb62 	bl	8000da4 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	; 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_CRC_Init+0x20>)
 80006f6:	4a07      	ldr	r2, [pc, #28]	; (8000714 <MX_CRC_Init+0x24>)
 80006f8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_CRC_Init+0x20>)
 80006fc:	f001 f908 	bl	8001910 <HAL_CRC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000706:	f000 fb4d 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000308 	.word	0x20000308
 8000714:	40023000 	.word	0x40023000

08000718 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_DMA2D_Init+0x5c>)
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <MX_DMA2D_Init+0x60>)
 8000720:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_DMA2D_Init+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_DMA2D_Init+0x5c>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_DMA2D_Init+0x5c>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_DMA2D_Init+0x5c>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_DMA2D_Init+0x5c>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_DMA2D_Init+0x5c>)
 8000742:	2200      	movs	r2, #0
 8000744:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_DMA2D_Init+0x5c>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800074c:	4809      	ldr	r0, [pc, #36]	; (8000774 <MX_DMA2D_Init+0x5c>)
 800074e:	f001 f8fb 	bl	8001948 <HAL_DMA2D_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000758:	f000 fb24 	bl	8000da4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800075c:	2101      	movs	r1, #1
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_DMA2D_Init+0x5c>)
 8000760:	f001 fa4c 	bl	8001bfc <HAL_DMA2D_ConfigLayer>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800076a:	f000 fb1b 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000310 	.word	0x20000310
 8000778:	4002b000 	.word	0x4002b000

0800077c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_I2C3_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_I2C3_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_I2C3_Init+0x74>)
 8000788:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <MX_I2C3_Init+0x7c>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_I2C3_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_I2C3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_I2C3_Init+0x74>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007ba:	f003 f89b 	bl	80038f4 <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 faee 	bl	8000da4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007cc:	f003 f9d6 	bl	8003b7c <HAL_I2CEx_ConfigAnalogFilter>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007d6:	f000 fae5 	bl	8000da4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007de:	f003 fa09 	bl	8003bf4 <HAL_I2CEx_ConfigDigitalFilter>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007e8:	f000 fadc 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000350 	.word	0x20000350
 80007f4:	40005c00 	.word	0x40005c00
 80007f8:	000186a0 	.word	0x000186a0

080007fc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	; 0x38
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2234      	movs	r2, #52	; 0x34
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00b fd0b 	bl	800c224 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800080e:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <MX_LTDC_Init+0xf8>)
 8000810:	4a39      	ldr	r2, [pc, #228]	; (80008f8 <MX_LTDC_Init+0xfc>)
 8000812:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000814:	4b37      	ldr	r3, [pc, #220]	; (80008f4 <MX_LTDC_Init+0xf8>)
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800081a:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <MX_LTDC_Init+0xf8>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000820:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <MX_LTDC_Init+0xf8>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000826:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <MX_LTDC_Init+0xf8>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800082c:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_LTDC_Init+0xf8>)
 800082e:	2209      	movs	r2, #9
 8000830:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000832:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <MX_LTDC_Init+0xf8>)
 8000834:	2201      	movs	r2, #1
 8000836:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <MX_LTDC_Init+0xf8>)
 800083a:	221d      	movs	r2, #29
 800083c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_LTDC_Init+0xf8>)
 8000840:	2203      	movs	r2, #3
 8000842:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <MX_LTDC_Init+0xf8>)
 8000846:	f240 120d 	movw	r2, #269	; 0x10d
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800084c:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <MX_LTDC_Init+0xf8>)
 800084e:	f240 1243 	movw	r2, #323	; 0x143
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <MX_LTDC_Init+0xf8>)
 8000856:	f240 1217 	movw	r2, #279	; 0x117
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <MX_LTDC_Init+0xf8>)
 800085e:	f240 1247 	movw	r2, #327	; 0x147
 8000862:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MX_LTDC_Init+0xf8>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_LTDC_Init+0xf8>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_LTDC_Init+0xf8>)
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800087c:	481d      	ldr	r0, [pc, #116]	; (80008f4 <MX_LTDC_Init+0xf8>)
 800087e:	f003 f9f9 	bl	8003c74 <HAL_LTDC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000888:	f000 fa8c 	bl	8000da4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000890:	23f0      	movs	r3, #240	; 0xf0
 8000892:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000898:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800089c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800089e:	2302      	movs	r3, #2
 80008a0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008a2:	23ff      	movs	r3, #255	; 0xff
 80008a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008ae:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008b0:	2307      	movs	r3, #7
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80008b4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80008ba:	23f0      	movs	r3, #240	; 0xf0
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80008be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_LTDC_Init+0xf8>)
 80008de:	f003 fb5b 	bl	8003f98 <HAL_LTDC_ConfigLayer>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008e8:	f000 fa5c 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3738      	adds	r7, #56	; 0x38
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200003a4 	.word	0x200003a4
 80008f8:	40016800 	.word	0x40016800

080008fc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_SPI5_Init+0x64>)
 8000902:	4a18      	ldr	r2, [pc, #96]	; (8000964 <MX_SPI5_Init+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_SPI5_Init+0x64>)
 8000908:	f44f 7282 	mov.w	r2, #260	; 0x104
 800090c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_SPI5_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_SPI5_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_SPI5_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_SPI5_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_SPI5_Init+0x64>)
 8000928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_SPI5_Init+0x64>)
 8000930:	2218      	movs	r2, #24
 8000932:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <MX_SPI5_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_SPI5_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_SPI5_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_SPI5_Init+0x64>)
 8000948:	220a      	movs	r2, #10
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_SPI5_Init+0x64>)
 800094e:	f004 fbb7 	bl	80050c0 <HAL_SPI_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000958:	f000 fa24 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000044c 	.word	0x2000044c
 8000964:	40015000 	.word	0x40015000

08000968 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_TIM1_Init+0x98>)
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <MX_TIM1_Init+0x9c>)
 8000988:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <MX_TIM1_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_TIM1_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_TIM1_Init+0x98>)
 8000998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_TIM1_Init+0x98>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_TIM1_Init+0x98>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_TIM1_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b0:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_TIM1_Init+0x98>)
 80009b2:	f004 fc0e 	bl	80051d2 <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009bc:	f000 f9f2 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	4619      	mov	r1, r3
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_TIM1_Init+0x98>)
 80009ce:	f004 fdc7 	bl	8005560 <HAL_TIM_ConfigClockSource>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009d8:	f000 f9e4 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_TIM1_Init+0x98>)
 80009ea:	f004 ffe3 	bl	80059b4 <HAL_TIMEx_MasterConfigSynchronization>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009f4:	f000 f9d6 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200004a4 	.word	0x200004a4
 8000a04:	40010000 	.word	0x40010000

08000a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f005 f848 	bl	8005ad4 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 f9ab 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200004ec 	.word	0x200004ec
 8000a58:	40011000 	.word	0x40011000

08000a5c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_FMC_Init+0x98>)
 8000a76:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <MX_FMC_Init+0x9c>)
 8000a78:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <MX_FMC_Init+0x98>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_FMC_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_FMC_Init+0x98>)
 8000a88:	2204      	movs	r2, #4
 8000a8a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_FMC_Init+0x98>)
 8000a8e:	2210      	movs	r2, #16
 8000a90:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_FMC_Init+0x98>)
 8000a94:	2240      	movs	r2, #64	; 0x40
 8000a96:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_FMC_Init+0x98>)
 8000a9a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a9e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_FMC_Init+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_FMC_Init+0x98>)
 8000aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_FMC_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_FMC_Init+0x98>)
 8000ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000acc:	2303      	movs	r3, #3
 8000ace:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_FMC_Init+0x98>)
 8000ade:	f004 fabb 	bl	8005058 <HAL_SDRAM_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000ae8:	f000 f95c 	bl	8000da4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000aec:	bf00      	nop
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000530 	.word	0x20000530
 8000af8:	a0000140 	.word	0xa0000140

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	; 0x38
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
 8000b16:	4b7b      	ldr	r3, [pc, #492]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a7a      	ldr	r2, [pc, #488]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b78      	ldr	r3, [pc, #480]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	4b74      	ldr	r3, [pc, #464]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a73      	ldr	r2, [pc, #460]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b38:	f043 0320 	orr.w	r3, r3, #32
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b71      	ldr	r3, [pc, #452]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0320 	and.w	r3, r3, #32
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	4b6d      	ldr	r3, [pc, #436]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a6c      	ldr	r2, [pc, #432]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b6a      	ldr	r3, [pc, #424]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	4b66      	ldr	r3, [pc, #408]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a65      	ldr	r2, [pc, #404]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b63      	ldr	r3, [pc, #396]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b5f      	ldr	r3, [pc, #380]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a5e      	ldr	r2, [pc, #376]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b5c      	ldr	r3, [pc, #368]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b58      	ldr	r3, [pc, #352]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a57      	ldr	r2, [pc, #348]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b55      	ldr	r3, [pc, #340]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b51      	ldr	r3, [pc, #324]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a50      	ldr	r2, [pc, #320]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b4e      	ldr	r3, [pc, #312]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b4a      	ldr	r3, [pc, #296]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a49      	ldr	r2, [pc, #292]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b47      	ldr	r3, [pc, #284]	; (8000d04 <MX_GPIO_Init+0x208>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2116      	movs	r1, #22
 8000bf6:	4844      	ldr	r0, [pc, #272]	; (8000d08 <MX_GPIO_Init+0x20c>)
 8000bf8:	f001 fa3e 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	4842      	ldr	r0, [pc, #264]	; (8000d0c <MX_GPIO_Init+0x210>)
 8000c02:	f001 fa39 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c0c:	4840      	ldr	r0, [pc, #256]	; (8000d10 <MX_GPIO_Init+0x214>)
 8000c0e:	f001 fa33 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c18:	483e      	ldr	r0, [pc, #248]	; (8000d14 <MX_GPIO_Init+0x218>)
 8000c1a:	f001 fa2d 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c1e:	2316      	movs	r3, #22
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4834      	ldr	r0, [pc, #208]	; (8000d08 <MX_GPIO_Init+0x20c>)
 8000c36:	f001 f873 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c3a:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c40:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	482e      	ldr	r0, [pc, #184]	; (8000d0c <MX_GPIO_Init+0x210>)
 8000c52:	f001 f865 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4827      	ldr	r0, [pc, #156]	; (8000d0c <MX_GPIO_Init+0x210>)
 8000c6e:	f001 f857 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c72:	2320      	movs	r3, #32
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c76:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4820      	ldr	r0, [pc, #128]	; (8000d08 <MX_GPIO_Init+0x20c>)
 8000c88:	f001 f84a 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481e      	ldr	r0, [pc, #120]	; (8000d18 <MX_GPIO_Init+0x21c>)
 8000ca0:	f001 f83e 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4815      	ldr	r0, [pc, #84]	; (8000d10 <MX_GPIO_Init+0x214>)
 8000cba:	f001 f831 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000cbe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <MX_GPIO_Init+0x214>)
 8000cd8:	f001 f822 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000cdc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4807      	ldr	r0, [pc, #28]	; (8000d14 <MX_GPIO_Init+0x218>)
 8000cf6:	f001 f813 	bl	8001d20 <HAL_GPIO_Init>

}
 8000cfa:	bf00      	nop
 8000cfc:	3738      	adds	r7, #56	; 0x38
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020c00 	.word	0x40020c00
 8000d14:	40021800 	.word	0x40021800
 8000d18:	40020400 	.word	0x40020400

08000d1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d24:	f00a ff2e 	bl	800bb84 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f008 fd08 	bl	800973e <osDelay>
 8000d2e:	e7fb      	b.n	8000d28 <StartDefaultTask+0xc>

08000d30 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_13);
 8000d38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <StartTask02+0x24>)
 8000d3e:	f001 f9b4 	bl	80020aa <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000d42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d46:	f000 fcdd 	bl	8001704 <HAL_Delay>
    osDelay(1);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f008 fcf7 	bl	800973e <osDelay>
	  HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_13);
 8000d50:	e7f2      	b.n	8000d38 <StartTask02+0x8>
 8000d52:	bf00      	nop
 8000d54:	40021800 	.word	0x40021800

08000d58 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);
 8000d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <StartTask03+0x24>)
 8000d66:	f001 f9a0 	bl	80020aa <HAL_GPIO_TogglePin>
	 	  HAL_Delay(500);
 8000d6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d6e:	f000 fcc9 	bl	8001704 <HAL_Delay>
    osDelay(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f008 fce3 	bl	800973e <osDelay>
	  HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_14);
 8000d78:	e7f2      	b.n	8000d60 <StartTask03+0x8>
 8000d7a:	bf00      	nop
 8000d7c:	40021800 	.word	0x40021800

08000d80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d92:	f000 fc97 	bl	80016c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40001000 	.word	0x40001000

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x8>
	...

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_MspInit+0x54>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <HAL_MspInit+0x54>)
 8000dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x54>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_MspInit+0x54>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_MspInit+0x54>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_MspInit+0x54>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	210f      	movs	r1, #15
 8000df2:	f06f 0001 	mvn.w	r0, #1
 8000df6:	f000 fd61 	bl	80018bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <HAL_CRC_MspInit+0x3c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d10d      	bne.n	8000e36 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_CRC_MspInit+0x40>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <HAL_CRC_MspInit+0x40>)
 8000e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <HAL_CRC_MspInit+0x40>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40023000 	.word	0x40023000
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_DMA2D_MspInit+0x48>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d115      	bne.n	8000e8a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_DMA2D_MspInit+0x4c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <HAL_DMA2D_MspInit+0x4c>)
 8000e68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_DMA2D_MspInit+0x4c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2105      	movs	r1, #5
 8000e7e:	205a      	movs	r0, #90	; 0x5a
 8000e80:	f000 fd1c 	bl	80018bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e84:	205a      	movs	r0, #90	; 0x5a
 8000e86:	f000 fd35 	bl	80018f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	4002b000 	.word	0x4002b000
 8000e98:	40023800 	.word	0x40023800

08000e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a29      	ldr	r2, [pc, #164]	; (8000f60 <HAL_I2C_MspInit+0xc4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d14b      	bne.n	8000f56 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efc:	2312      	movs	r3, #18
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4815      	ldr	r0, [pc, #84]	; (8000f68 <HAL_I2C_MspInit+0xcc>)
 8000f14:	f000 ff04 	bl	8001d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1e:	2312      	movs	r3, #18
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <HAL_I2C_MspInit+0xd0>)
 8000f36:	f000 fef3 	bl	8001d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_I2C_MspInit+0xc8>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	; 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40005c00 	.word	0x40005c00
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b09a      	sub	sp, #104	; 0x68
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	2230      	movs	r2, #48	; 0x30
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b f947 	bl	800c224 <memset>
  if(hltdc->Instance==LTDC)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a85      	ldr	r2, [pc, #532]	; (80011b0 <HAL_LTDC_MspInit+0x240>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	f040 8102 	bne.w	80011a6 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fa6:	2332      	movs	r3, #50	; 0x32
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fe8e 	bl	8004cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000fc2:	f7ff feef 	bl	8000da4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
 8000fca:	4b7a      	ldr	r3, [pc, #488]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a79      	ldr	r2, [pc, #484]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8000fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b77      	ldr	r3, [pc, #476]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fde:	623b      	str	r3, [r7, #32]
 8000fe0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	4b73      	ldr	r3, [pc, #460]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a72      	ldr	r2, [pc, #456]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b70      	ldr	r3, [pc, #448]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0320 	and.w	r3, r3, #32
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	4b6c      	ldr	r3, [pc, #432]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a6b      	ldr	r2, [pc, #428]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b69      	ldr	r3, [pc, #420]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	4b65      	ldr	r3, [pc, #404]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a64      	ldr	r2, [pc, #400]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b62      	ldr	r3, [pc, #392]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a5d      	ldr	r2, [pc, #372]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b5b      	ldr	r3, [pc, #364]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a56      	ldr	r2, [pc, #344]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <HAL_LTDC_MspInit+0x244>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800108a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800109c:	230e      	movs	r3, #14
 800109e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010a4:	4619      	mov	r1, r3
 80010a6:	4844      	ldr	r0, [pc, #272]	; (80011b8 <HAL_LTDC_MspInit+0x248>)
 80010a8:	f000 fe3a 	bl	8001d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010ac:	f641 0358 	movw	r3, #6232	; 0x1858
 80010b0:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010be:	230e      	movs	r3, #14
 80010c0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010c6:	4619      	mov	r1, r3
 80010c8:	483c      	ldr	r0, [pc, #240]	; (80011bc <HAL_LTDC_MspInit+0x24c>)
 80010ca:	f000 fe29 	bl	8001d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010ce:	2303      	movs	r3, #3
 80010d0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010de:	2309      	movs	r3, #9
 80010e0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010e6:	4619      	mov	r1, r3
 80010e8:	4835      	ldr	r0, [pc, #212]	; (80011c0 <HAL_LTDC_MspInit+0x250>)
 80010ea:	f000 fe19 	bl	8001d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010ee:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001100:	230e      	movs	r3, #14
 8001102:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001108:	4619      	mov	r1, r3
 800110a:	482d      	ldr	r0, [pc, #180]	; (80011c0 <HAL_LTDC_MspInit+0x250>)
 800110c:	f000 fe08 	bl	8001d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001110:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001114:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001122:	230e      	movs	r3, #14
 8001124:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001126:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800112a:	4619      	mov	r1, r3
 800112c:	4825      	ldr	r0, [pc, #148]	; (80011c4 <HAL_LTDC_MspInit+0x254>)
 800112e:	f000 fdf7 	bl	8001d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001132:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001136:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001144:	230e      	movs	r3, #14
 8001146:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001148:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800114c:	4619      	mov	r1, r3
 800114e:	481e      	ldr	r0, [pc, #120]	; (80011c8 <HAL_LTDC_MspInit+0x258>)
 8001150:	f000 fde6 	bl	8001d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001154:	2348      	movs	r3, #72	; 0x48
 8001156:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001164:	230e      	movs	r3, #14
 8001166:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001168:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800116c:	4619      	mov	r1, r3
 800116e:	4817      	ldr	r0, [pc, #92]	; (80011cc <HAL_LTDC_MspInit+0x25c>)
 8001170:	f000 fdd6 	bl	8001d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001174:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001178:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001186:	2309      	movs	r3, #9
 8001188:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800118a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800118e:	4619      	mov	r1, r3
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <HAL_LTDC_MspInit+0x254>)
 8001192:	f000 fdc5 	bl	8001d20 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2105      	movs	r1, #5
 800119a:	2058      	movs	r0, #88	; 0x58
 800119c:	f000 fb8e 	bl	80018bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011a0:	2058      	movs	r0, #88	; 0x58
 80011a2:	f000 fba7 	bl	80018f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3768      	adds	r7, #104	; 0x68
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40016800 	.word	0x40016800
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40021400 	.word	0x40021400
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020c00 	.word	0x40020c00

080011d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a19      	ldr	r2, [pc, #100]	; (8001254 <HAL_SPI_MspInit+0x84>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12c      	bne.n	800124c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_SPI_MspInit+0x88>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <HAL_SPI_MspInit+0x88>)
 80011fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_SPI_MspInit+0x88>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_SPI_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_SPI_MspInit+0x88>)
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_SPI_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800122a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800123c:	2305      	movs	r3, #5
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <HAL_SPI_MspInit+0x8c>)
 8001248:	f000 fd6a 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40015000 	.word	0x40015000
 8001258:	40023800 	.word	0x40023800
 800125c:	40021400 	.word	0x40021400

08001260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <HAL_TIM_Base_MspInit+0x3c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10d      	bne.n	800128e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_TIM_Base_MspInit+0x40>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <HAL_TIM_Base_MspInit+0x40>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <HAL_TIM_Base_MspInit+0x40>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40010000 	.word	0x40010000
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a19      	ldr	r2, [pc, #100]	; (8001328 <HAL_UART_MspInit+0x84>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d12c      	bne.n	8001320 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_UART_MspInit+0x88>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a17      	ldr	r2, [pc, #92]	; (800132c <HAL_UART_MspInit+0x88>)
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_UART_MspInit+0x88>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_UART_MspInit+0x88>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <HAL_UART_MspInit+0x88>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_UART_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001310:	2307      	movs	r3, #7
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_UART_MspInit+0x8c>)
 800131c:	f000 fd00 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40011000 	.word	0x40011000
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000

08001334 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001348:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <HAL_FMC_MspInit+0x104>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d16f      	bne.n	8001430 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <HAL_FMC_MspInit+0x104>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
 800135a:	4b38      	ldr	r3, [pc, #224]	; (800143c <HAL_FMC_MspInit+0x108>)
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	4a37      	ldr	r2, [pc, #220]	; (800143c <HAL_FMC_MspInit+0x108>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6393      	str	r3, [r2, #56]	; 0x38
 8001366:	4b35      	ldr	r3, [pc, #212]	; (800143c <HAL_FMC_MspInit+0x108>)
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001372:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001376:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001384:	230c      	movs	r3, #12
 8001386:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	482c      	ldr	r0, [pc, #176]	; (8001440 <HAL_FMC_MspInit+0x10c>)
 800138e:	f000 fcc7 	bl	8001d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001392:	2301      	movs	r3, #1
 8001394:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013a2:	230c      	movs	r3, #12
 80013a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4826      	ldr	r0, [pc, #152]	; (8001444 <HAL_FMC_MspInit+0x110>)
 80013ac:	f000 fcb8 	bl	8001d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80013b0:	f248 1333 	movw	r3, #33075	; 0x8133
 80013b4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013c2:	230c      	movs	r3, #12
 80013c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	481f      	ldr	r0, [pc, #124]	; (8001448 <HAL_FMC_MspInit+0x114>)
 80013cc:	f000 fca8 	bl	8001d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80013d0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80013d4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e2:	230c      	movs	r3, #12
 80013e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4619      	mov	r1, r3
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <HAL_FMC_MspInit+0x118>)
 80013ec:	f000 fc98 	bl	8001d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80013f0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013f4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001402:	230c      	movs	r3, #12
 8001404:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4811      	ldr	r0, [pc, #68]	; (8001450 <HAL_FMC_MspInit+0x11c>)
 800140c:	f000 fc88 	bl	8001d20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001410:	2360      	movs	r3, #96	; 0x60
 8001412:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001420:	230c      	movs	r3, #12
 8001422:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	4619      	mov	r1, r3
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <HAL_FMC_MspInit+0x120>)
 800142a:	f000 fc79 	bl	8001d20 <HAL_GPIO_Init>
 800142e:	e000      	b.n	8001432 <HAL_FMC_MspInit+0xfe>
    return;
 8001430:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000570 	.word	0x20000570
 800143c:	40023800 	.word	0x40023800
 8001440:	40021400 	.word	0x40021400
 8001444:	40020800 	.word	0x40020800
 8001448:	40021800 	.word	0x40021800
 800144c:	40021000 	.word	0x40021000
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40020400 	.word	0x40020400

08001458 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001460:	f7ff ff68 	bl	8001334 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	2036      	movs	r0, #54	; 0x36
 8001482:	f000 fa1b 	bl	80018bc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001486:	2036      	movs	r0, #54	; 0x36
 8001488:	f000 fa34 	bl	80018f4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <HAL_InitTick+0xa4>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <HAL_InitTick+0xa4>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_InitTick+0xa4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a8:	f107 0210 	add.w	r2, r7, #16
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fbde 	bl	8004c74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80014b8:	f003 fbb4 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80014bc:	4603      	mov	r3, r0
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	4a13      	ldr	r2, [pc, #76]	; (8001514 <HAL_InitTick+0xa8>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0c9b      	lsrs	r3, r3, #18
 80014cc:	3b01      	subs	r3, #1
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_InitTick+0xac>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <HAL_InitTick+0xb0>)
 80014d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_InitTick+0xac>)
 80014d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_InitTick+0xac>)
 80014e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_InitTick+0xac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_InitTick+0xac>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <HAL_InitTick+0xac>)
 80014f2:	f003 fe6e 	bl	80051d2 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d104      	bne.n	8001506 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80014fc:	4806      	ldr	r0, [pc, #24]	; (8001518 <HAL_InitTick+0xac>)
 80014fe:	f003 feb7 	bl	8005270 <HAL_TIM_Base_Start_IT>
 8001502:	4603      	mov	r3, r0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3730      	adds	r7, #48	; 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	431bde83 	.word	0x431bde83
 8001518:	20000574 	.word	0x20000574
 800151c:	40001000 	.word	0x40001000

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <NMI_Handler+0x4>

08001526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler+0x4>

08001532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <UsageFault_Handler+0x4>

0800153e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <TIM6_DAC_IRQHandler+0x10>)
 8001552:	f003 fefd 	bl	8005350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000574 	.word	0x20000574

08001560 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <OTG_HS_IRQHandler+0x10>)
 8001566:	f001 f825 	bl	80025b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20008b00 	.word	0x20008b00

08001574 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <LTDC_IRQHandler+0x10>)
 800157a:	f002 fc4b 	bl	8003e14 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200003a4 	.word	0x200003a4

08001588 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <DMA2D_IRQHandler+0x10>)
 800158e:	f000 fa24 	bl	80019da <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000310 	.word	0x20000310

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f00a fde2 	bl	800c194 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20030000 	.word	0x20030000
 80015fc:	00000400 	.word	0x00000400
 8001600:	200005bc 	.word	0x200005bc
 8001604:	20008e18 	.word	0x20008e18

08001608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001656:	f7ff ffd7 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f00a fda1 	bl	800c1a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7fe ff7d 	bl	800055c <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001664:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001670:	0800c52c 	.word	0x0800c52c
  ldr r2, =_sbss
 8001674:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001678:	20008e14 	.word	0x20008e14

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>
	...

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <HAL_Init+0x40>)
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_Init+0x40>)
 8001696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_Init+0x40>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f8fc 	bl	80018a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff fedc 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fb7c 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	200005c0 	.word	0x200005c0

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200005c0 	.word	0x200005c0

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008

0800174c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4907      	ldr	r1, [pc, #28]	; (80017e8 <__NVIC_EnableIRQ+0x38>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ff4c 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ce:	f7ff ff61 	bl	8001794 <__NVIC_GetPriorityGrouping>
 80018d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	68b9      	ldr	r1, [r7, #8]
 80018d8:	6978      	ldr	r0, [r7, #20]
 80018da:	f7ff ffb1 	bl	8001840 <NVIC_EncodePriority>
 80018de:	4602      	mov	r2, r0
 80018e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e4:	4611      	mov	r1, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff80 	bl	80017ec <__NVIC_SetPriority>
}
 80018ec:	bf00      	nop
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff54 	bl	80017b0 <__NVIC_EnableIRQ>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e00e      	b.n	8001940 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	795b      	ldrb	r3, [r3, #5]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fa68 	bl	8000e08 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e03b      	b.n	80019d2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fa6c 	bl	8000e4c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001998:	f023 0107 	bic.w	r1, r3, #7
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68d1      	ldr	r1, [r2, #12]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	430b      	orrs	r3, r1
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d026      	beq.n	8001a4a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d021      	beq.n	8001a4a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a14:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2201      	movs	r2, #1
 8001a28:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d026      	beq.n	8001aa2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d021      	beq.n	8001aa2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2220      	movs	r2, #32
 8001a74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7a:	f043 0202 	orr.w	r2, r3, #2
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2204      	movs	r2, #4
 8001a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d026      	beq.n	8001afa <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d021      	beq.n	8001afa <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2208      	movs	r2, #8
 8001acc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad2:	f043 0204 	orr.w	r2, r3, #4
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2204      	movs	r2, #4
 8001ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00e      	beq.n	8001b2c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2204      	movs	r2, #4
 8001b24:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f853 	bl	8001bd2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d024      	beq.n	8001b80 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01f      	beq.n	8001b80 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2202      	movs	r2, #2
 8001b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01f      	beq.n	8001bca <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01a      	beq.n	8001bca <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2210      	movs	r2, #16
 8001baa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f80e 	bl	8001be6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_DMA2D_ConfigLayer+0x20>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	e079      	b.n	8001d10 <HAL_DMA2D_ConfigLayer+0x114>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	3318      	adds	r3, #24
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	4313      	orrs	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c46:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_DMA2D_ConfigLayer+0x120>)
 8001c48:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b0a      	cmp	r3, #10
 8001c50:	d003      	beq.n	8001c5a <HAL_DMA2D_ConfigLayer+0x5e>
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b09      	cmp	r3, #9
 8001c58:	d107      	bne.n	8001c6a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e005      	b.n	8001c76 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	061b      	lsls	r3, r3, #24
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d120      	bne.n	8001cbe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	ea02 0103 	and.w	r1, r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b0a      	cmp	r3, #10
 8001ca4:	d003      	beq.n	8001cae <HAL_DMA2D_ConfigLayer+0xb2>
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b09      	cmp	r3, #9
 8001cac:	d127      	bne.n	8001cfe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
 8001cbc:	e01f      	b.n	8001cfe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69da      	ldr	r2, [r3, #28]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	ea02 0103 	and.w	r1, r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b0a      	cmp	r3, #10
 8001ce6:	d003      	beq.n	8001cf0 <HAL_DMA2D_ConfigLayer+0xf4>
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b09      	cmp	r3, #9
 8001cee:	d106      	bne.n	8001cfe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001cfc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	ff03000f 	.word	0xff03000f

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e177      	b.n	800202c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8166 	bne.w	8002026 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d005      	beq.n	8001d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d130      	bne.n	8001dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da8:	2201      	movs	r2, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0201 	and.w	r2, r3, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d017      	beq.n	8001e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d123      	bne.n	8001e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	08da      	lsrs	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3208      	adds	r2, #8
 8001e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	69b9      	ldr	r1, [r7, #24]
 8001e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80c0 	beq.w	8002026 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b66      	ldr	r3, [pc, #408]	; (8002044 <HAL_GPIO_Init+0x324>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a65      	ldr	r2, [pc, #404]	; (8002044 <HAL_GPIO_Init+0x324>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b63      	ldr	r3, [pc, #396]	; (8002044 <HAL_GPIO_Init+0x324>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec2:	4a61      	ldr	r2, [pc, #388]	; (8002048 <HAL_GPIO_Init+0x328>)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_GPIO_Init+0x32c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d037      	beq.n	8001f5e <HAL_GPIO_Init+0x23e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a57      	ldr	r2, [pc, #348]	; (8002050 <HAL_GPIO_Init+0x330>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d031      	beq.n	8001f5a <HAL_GPIO_Init+0x23a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a56      	ldr	r2, [pc, #344]	; (8002054 <HAL_GPIO_Init+0x334>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d02b      	beq.n	8001f56 <HAL_GPIO_Init+0x236>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a55      	ldr	r2, [pc, #340]	; (8002058 <HAL_GPIO_Init+0x338>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d025      	beq.n	8001f52 <HAL_GPIO_Init+0x232>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a54      	ldr	r2, [pc, #336]	; (800205c <HAL_GPIO_Init+0x33c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <HAL_GPIO_Init+0x22e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a53      	ldr	r2, [pc, #332]	; (8002060 <HAL_GPIO_Init+0x340>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0x22a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a52      	ldr	r2, [pc, #328]	; (8002064 <HAL_GPIO_Init+0x344>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x226>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a51      	ldr	r2, [pc, #324]	; (8002068 <HAL_GPIO_Init+0x348>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x222>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a50      	ldr	r2, [pc, #320]	; (800206c <HAL_GPIO_Init+0x34c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x21e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4f      	ldr	r2, [pc, #316]	; (8002070 <HAL_GPIO_Init+0x350>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x21a>
 8001f36:	2309      	movs	r3, #9
 8001f38:	e012      	b.n	8001f60 <HAL_GPIO_Init+0x240>
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	e010      	b.n	8001f60 <HAL_GPIO_Init+0x240>
 8001f3e:	2308      	movs	r3, #8
 8001f40:	e00e      	b.n	8001f60 <HAL_GPIO_Init+0x240>
 8001f42:	2307      	movs	r3, #7
 8001f44:	e00c      	b.n	8001f60 <HAL_GPIO_Init+0x240>
 8001f46:	2306      	movs	r3, #6
 8001f48:	e00a      	b.n	8001f60 <HAL_GPIO_Init+0x240>
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	e008      	b.n	8001f60 <HAL_GPIO_Init+0x240>
 8001f4e:	2304      	movs	r3, #4
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x240>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e004      	b.n	8001f60 <HAL_GPIO_Init+0x240>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_Init+0x240>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_GPIO_Init+0x240>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	f002 0203 	and.w	r2, r2, #3
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	4093      	lsls	r3, r2
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f70:	4935      	ldr	r1, [pc, #212]	; (8002048 <HAL_GPIO_Init+0x328>)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_GPIO_Init+0x354>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa2:	4a34      	ldr	r2, [pc, #208]	; (8002074 <HAL_GPIO_Init+0x354>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa8:	4b32      	ldr	r3, [pc, #200]	; (8002074 <HAL_GPIO_Init+0x354>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fcc:	4a29      	ldr	r2, [pc, #164]	; (8002074 <HAL_GPIO_Init+0x354>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fd2:	4b28      	ldr	r3, [pc, #160]	; (8002074 <HAL_GPIO_Init+0x354>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_GPIO_Init+0x354>)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_GPIO_Init+0x354>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <HAL_GPIO_Init+0x354>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3301      	adds	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b0f      	cmp	r3, #15
 8002030:	f67f ae84 	bls.w	8001d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40013800 	.word	0x40013800
 800204c:	40020000 	.word	0x40020000
 8002050:	40020400 	.word	0x40020400
 8002054:	40020800 	.word	0x40020800
 8002058:	40020c00 	.word	0x40020c00
 800205c:	40021000 	.word	0x40021000
 8002060:	40021400 	.word	0x40021400
 8002064:	40021800 	.word	0x40021800
 8002068:	40021c00 	.word	0x40021c00
 800206c:	40022000 	.word	0x40022000
 8002070:	40022400 	.word	0x40022400
 8002074:	40013c00 	.word	0x40013c00

08002078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
 8002084:	4613      	mov	r3, r2
 8002086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002088:	787b      	ldrb	r3, [r7, #1]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002094:	e003      	b.n	800209e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002096:	887b      	ldrh	r3, [r7, #2]
 8002098:	041a      	lsls	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	619a      	str	r2, [r3, #24]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020bc:	887a      	ldrh	r2, [r7, #2]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	041a      	lsls	r2, r3, #16
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	400b      	ands	r3, r1
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e0:	b08f      	sub	sp, #60	; 0x3c
 80020e2:	af0a      	add	r7, sp, #40	; 0x28
 80020e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e054      	b.n	800219a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f009 fd8e 	bl	800bc2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2203      	movs	r2, #3
 8002114:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 f8ca 	bl	80062c8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	687e      	ldr	r6, [r7, #4]
 800213c:	466d      	mov	r5, sp
 800213e:	f106 0410 	add.w	r4, r6, #16
 8002142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800214e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002152:	1d33      	adds	r3, r6, #4
 8002154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002156:	6838      	ldr	r0, [r7, #0]
 8002158:	f004 f844 	bl	80061e4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f004 f8c1 	bl	80062ea <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	687e      	ldr	r6, [r7, #4]
 8002170:	466d      	mov	r5, sp
 8002172:	f106 0410 	add.w	r4, r6, #16
 8002176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800217a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800217c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800217e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002182:	e885 0003 	stmia.w	r5, {r0, r1}
 8002186:	1d33      	adds	r3, r6, #4
 8002188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800218a:	6838      	ldr	r0, [r7, #0]
 800218c:	f004 fa4a 	bl	8006624 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021a2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80021a2:	b590      	push	{r4, r7, lr}
 80021a4:	b089      	sub	sp, #36	; 0x24
 80021a6:	af04      	add	r7, sp, #16
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	4608      	mov	r0, r1
 80021ac:	4611      	mov	r1, r2
 80021ae:	461a      	mov	r2, r3
 80021b0:	4603      	mov	r3, r0
 80021b2:	70fb      	strb	r3, [r7, #3]
 80021b4:	460b      	mov	r3, r1
 80021b6:	70bb      	strb	r3, [r7, #2]
 80021b8:	4613      	mov	r3, r2
 80021ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_HCD_HC_Init+0x28>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e076      	b.n	80022b8 <HAL_HCD_HC_Init+0x116>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	333d      	adds	r3, #61	; 0x3d
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3338      	adds	r3, #56	; 0x38
 80021f2:	787a      	ldrb	r2, [r7, #1]
 80021f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3340      	adds	r3, #64	; 0x40
 8002204:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002206:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3339      	adds	r3, #57	; 0x39
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	333f      	adds	r3, #63	; 0x3f
 8002228:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800222c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	78ba      	ldrb	r2, [r7, #2]
 8002232:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002236:	b2d0      	uxtb	r0, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	333a      	adds	r3, #58	; 0x3a
 8002244:	4602      	mov	r2, r0
 8002246:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002248:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800224c:	2b00      	cmp	r3, #0
 800224e:	da09      	bge.n	8002264 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	333b      	adds	r3, #59	; 0x3b
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e008      	b.n	8002276 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	333b      	adds	r3, #59	; 0x3b
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	333c      	adds	r3, #60	; 0x3c
 8002284:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002288:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	787c      	ldrb	r4, [r7, #1]
 8002290:	78ba      	ldrb	r2, [r7, #2]
 8002292:	78f9      	ldrb	r1, [r7, #3]
 8002294:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002296:	9302      	str	r3, [sp, #8]
 8002298:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	4623      	mov	r3, r4
 80022a6:	f004 fb43 	bl	8006930 <USB_HC_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_HCD_HC_Halt+0x1e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e00f      	b.n	80022fe <HAL_HCD_HC_Halt+0x3e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fd93 	bl	8006e1a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4603      	mov	r3, r0
 8002318:	70fb      	strb	r3, [r7, #3]
 800231a:	460b      	mov	r3, r1
 800231c:	70bb      	strb	r3, [r7, #2]
 800231e:	4613      	mov	r3, r2
 8002320:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	333b      	adds	r3, #59	; 0x3b
 8002330:	78ba      	ldrb	r2, [r7, #2]
 8002332:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	333f      	adds	r3, #63	; 0x3f
 8002342:	787a      	ldrb	r2, [r7, #1]
 8002344:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002346:	7c3b      	ldrb	r3, [r7, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d112      	bne.n	8002372 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3342      	adds	r3, #66	; 0x42
 800235a:	2203      	movs	r2, #3
 800235c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	333d      	adds	r3, #61	; 0x3d
 800236c:	7f3a      	ldrb	r2, [r7, #28]
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e008      	b.n	8002384 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	3342      	adds	r3, #66	; 0x42
 8002380:	2202      	movs	r2, #2
 8002382:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b03      	cmp	r3, #3
 8002388:	f200 80c6 	bhi.w	8002518 <HAL_HCD_HC_SubmitRequest+0x210>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023a5 	.word	0x080023a5
 8002398:	08002505 	.word	0x08002505
 800239c:	08002409 	.word	0x08002409
 80023a0:	08002487 	.word	0x08002487
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80023a4:	7c3b      	ldrb	r3, [r7, #16]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	f040 80b8 	bne.w	800251c <HAL_HCD_HC_SubmitRequest+0x214>
 80023ac:	78bb      	ldrb	r3, [r7, #2]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 80b4 	bne.w	800251c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80023b4:	8b3b      	ldrh	r3, [r7, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3355      	adds	r3, #85	; 0x55
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3355      	adds	r3, #85	; 0x55
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	212c      	movs	r1, #44	; 0x2c
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	3342      	adds	r3, #66	; 0x42
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023f2:	e093      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3342      	adds	r3, #66	; 0x42
 8002402:	2202      	movs	r2, #2
 8002404:	701a      	strb	r2, [r3, #0]
      break;
 8002406:	e089      	b.n	800251c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002408:	78bb      	ldrb	r3, [r7, #2]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d11d      	bne.n	800244a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3355      	adds	r3, #85	; 0x55
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	3342      	adds	r3, #66	; 0x42
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002434:	e073      	b.n	800251e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3342      	adds	r3, #66	; 0x42
 8002444:	2202      	movs	r2, #2
 8002446:	701a      	strb	r2, [r3, #0]
      break;
 8002448:	e069      	b.n	800251e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	3354      	adds	r3, #84	; 0x54
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	3342      	adds	r3, #66	; 0x42
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
      break;
 8002470:	e055      	b.n	800251e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3342      	adds	r3, #66	; 0x42
 8002480:	2202      	movs	r2, #2
 8002482:	701a      	strb	r2, [r3, #0]
      break;
 8002484:	e04b      	b.n	800251e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002486:	78bb      	ldrb	r3, [r7, #2]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d11d      	bne.n	80024c8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3355      	adds	r3, #85	; 0x55
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	3342      	adds	r3, #66	; 0x42
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024b2:	e034      	b.n	800251e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3342      	adds	r3, #66	; 0x42
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]
      break;
 80024c6:	e02a      	b.n	800251e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3354      	adds	r3, #84	; 0x54
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d109      	bne.n	80024f0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3342      	adds	r3, #66	; 0x42
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
      break;
 80024ee:	e016      	b.n	800251e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3342      	adds	r3, #66	; 0x42
 80024fe:	2202      	movs	r2, #2
 8002500:	701a      	strb	r2, [r3, #0]
      break;
 8002502:	e00c      	b.n	800251e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3342      	adds	r3, #66	; 0x42
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
      break;
 8002516:	e002      	b.n	800251e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002518:	bf00      	nop
 800251a:	e000      	b.n	800251e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800251c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	3344      	adds	r3, #68	; 0x44
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	8b3a      	ldrh	r2, [r7, #24]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	202c      	movs	r0, #44	; 0x2c
 8002538:	fb00 f303 	mul.w	r3, r0, r3
 800253c:	440b      	add	r3, r1
 800253e:	334c      	adds	r3, #76	; 0x4c
 8002540:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	212c      	movs	r1, #44	; 0x2c
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	3360      	adds	r3, #96	; 0x60
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3350      	adds	r3, #80	; 0x50
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	3339      	adds	r3, #57	; 0x39
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3361      	adds	r3, #97	; 0x61
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	222c      	movs	r2, #44	; 0x2c
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	3338      	adds	r3, #56	; 0x38
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	18d1      	adds	r1, r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	f004 fae6 	bl	8006b74 <USB_HC_StartXfer>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop

080025b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 ffe7 	bl	800659e <USB_GetMode>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	f040 80f6 	bne.w	80027c4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 ffcb 	bl	8006578 <USB_ReadInterrupts>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80ec 	beq.w	80027c2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f003 ffc2 	bl	8006578 <USB_ReadInterrupts>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025fe:	d104      	bne.n	800260a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002608:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f003 ffb2 	bl	8006578 <USB_ReadInterrupts>
 8002614:	4603      	mov	r3, r0
 8002616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800261a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800261e:	d104      	bne.n	800262a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002628:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 ffa2 	bl	8006578 <USB_ReadInterrupts>
 8002634:	4603      	mov	r3, r0
 8002636:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800263a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800263e:	d104      	bne.n	800264a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002648:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f003 ff92 	bl	8006578 <USB_ReadInterrupts>
 8002654:	4603      	mov	r3, r0
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d103      	bne.n	8002666 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2202      	movs	r2, #2
 8002664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f003 ff84 	bl	8006578 <USB_ReadInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267a:	d11c      	bne.n	80026b6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002684:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002696:	2110      	movs	r1, #16
 8002698:	6938      	ldr	r0, [r7, #16]
 800269a:	f003 fe73 	bl	8006384 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800269e:	6938      	ldr	r0, [r7, #16]
 80026a0:	f003 fea4 	bl	80063ec <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2101      	movs	r1, #1
 80026aa:	4618      	mov	r0, r3
 80026ac:	f004 f87a 	bl	80067a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f009 fb35 	bl	800bd20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 ff5c 	bl	8006578 <USB_ReadInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ca:	d102      	bne.n	80026d2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f001 f89e 	bl	800380e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 ff4e 	bl	8006578 <USB_ReadInterrupts>
 80026dc:	4603      	mov	r3, r0
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d106      	bne.n	80026f4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f009 fafe 	bl	800bce8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2208      	movs	r2, #8
 80026f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 ff3d 	bl	8006578 <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b10      	cmp	r3, #16
 8002706:	d101      	bne.n	800270c <HAL_HCD_IRQHandler+0x158>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_HCD_IRQHandler+0x15a>
 800270c:	2300      	movs	r3, #0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d012      	beq.n	8002738 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0210 	bic.w	r2, r2, #16
 8002720:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 ffa1 	bl	800366a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0210 	orr.w	r2, r2, #16
 8002736:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f003 ff1b 	bl	8006578 <USB_ReadInterrupts>
 8002742:	4603      	mov	r3, r0
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800274c:	d13a      	bne.n	80027c4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f004 fb50 	bl	8006df8 <USB_HC_ReadInterrupt>
 8002758:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	e025      	b.n	80027ac <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d018      	beq.n	80027a6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800278a:	d106      	bne.n	800279a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	4619      	mov	r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f8ab 	bl	80028ee <HCD_HC_IN_IRQHandler>
 8002798:	e005      	b.n	80027a6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	4619      	mov	r1, r3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fbf9 	bl	8002f98 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d3d4      	bcc.n	8002760 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027be:	615a      	str	r2, [r3, #20]
 80027c0:	e000      	b.n	80027c4 <HAL_HCD_IRQHandler+0x210>
      return;
 80027c2:	bf00      	nop
    }
  }
}
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_HCD_Start+0x16>
 80027dc:	2302      	movs	r3, #2
 80027de:	e013      	b.n	8002808 <HAL_HCD_Start+0x3e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f004 f83c 	bl	800686c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 fd54 	bl	80062a6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_HCD_Stop+0x16>
 8002822:	2302      	movs	r3, #2
 8002824:	e00d      	b.n	8002842 <HAL_HCD_Stop+0x32>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f004 fc2a 	bl	800708c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f003 ffde 	bl	8006818 <USB_ResetPort>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3360      	adds	r3, #96	; 0x60
 8002880:	781b      	ldrb	r3, [r3, #0]
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3350      	adds	r3, #80	; 0x50
 80028a8:	681b      	ldr	r3, [r3, #0]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 f822 	bl	800690c <USB_GetCurrentFrame>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fffd 	bl	80068de <USB_GetHostSpeed>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d11a      	bne.n	8002954 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4413      	add	r3, r2
 8002926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292a:	461a      	mov	r2, r3
 800292c:	2304      	movs	r3, #4
 800292e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3361      	adds	r3, #97	; 0x61
 800293e:	2206      	movs	r2, #6
 8002940:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f004 fa64 	bl	8006e1a <USB_HC_Halt>
 8002952:	e0af      	b.n	8002ab4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	d11b      	bne.n	80029a4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	461a      	mov	r2, r3
 800297a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800297e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3361      	adds	r3, #97	; 0x61
 800298e:	2207      	movs	r2, #7
 8002990:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f004 fa3c 	bl	8006e1a <USB_HC_Halt>
 80029a2:	e087      	b.n	8002ab4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d109      	bne.n	80029ce <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	461a      	mov	r2, r3
 80029c8:	2320      	movs	r3, #32
 80029ca:	6093      	str	r3, [r2, #8]
 80029cc:	e072      	b.n	8002ab4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d11a      	bne.n	8002a1a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	461a      	mov	r2, r3
 80029f2:	2308      	movs	r3, #8
 80029f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	3361      	adds	r3, #97	; 0x61
 8002a04:	2205      	movs	r2, #5
 8002a06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f004 fa01 	bl	8006e1a <USB_HC_Halt>
 8002a18:	e04c      	b.n	8002ab4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a30:	d11b      	bne.n	8002a6a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3361      	adds	r3, #97	; 0x61
 8002a54:	2208      	movs	r2, #8
 8002a56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 f9d9 	bl	8006e1a <USB_HC_Halt>
 8002a68:	e024      	b.n	8002ab4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b80      	cmp	r3, #128	; 0x80
 8002a7e:	d119      	bne.n	8002ab4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3361      	adds	r3, #97	; 0x61
 8002aa0:	2206      	movs	r2, #6
 8002aa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 f9b3 	bl	8006e1a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aca:	d112      	bne.n	8002af2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 f99f 	bl	8006e1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aee:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002af0:	e24e      	b.n	8002f90 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	f040 80df 	bne.w	8002cc8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d019      	beq.n	8002b46 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3348      	adds	r3, #72	; 0x48
 8002b20:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	0159      	lsls	r1, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	440b      	add	r3, r1
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002b34:	1ad2      	subs	r2, r2, r3
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	202c      	movs	r0, #44	; 0x2c
 8002b3c:	fb00 f303 	mul.w	r3, r0, r3
 8002b40:	440b      	add	r3, r1
 8002b42:	3350      	adds	r3, #80	; 0x50
 8002b44:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3361      	adds	r3, #97	; 0x61
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	335c      	adds	r3, #92	; 0x5c
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	015a      	lsls	r2, r3, #5
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b76:	461a      	mov	r2, r3
 8002b78:	2301      	movs	r3, #1
 8002b7a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	333f      	adds	r3, #63	; 0x3f
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d009      	beq.n	8002ba4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	333f      	adds	r3, #63	; 0x3f
 8002b9e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d111      	bne.n	8002bc8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f004 f933 	bl	8006e1a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2310      	movs	r3, #16
 8002bc4:	6093      	str	r3, [r2, #8]
 8002bc6:	e03a      	b.n	8002c3e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	333f      	adds	r3, #63	; 0x3f
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d009      	beq.n	8002bf0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	333f      	adds	r3, #63	; 0x3f
 8002bea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d126      	bne.n	8002c3e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	0151      	lsls	r1, r2, #5
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	440a      	add	r2, r1
 8002c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c0e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3360      	adds	r3, #96	; 0x60
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	b2d9      	uxtb	r1, r3
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	202c      	movs	r0, #44	; 0x2c
 8002c2c:	fb00 f303 	mul.w	r3, r0, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3360      	adds	r3, #96	; 0x60
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f009 f87f 	bl	800bd3c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d12b      	bne.n	8002c9e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3348      	adds	r3, #72	; 0x48
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	202c      	movs	r0, #44	; 0x2c
 8002c5c:	fb00 f202 	mul.w	r2, r0, r2
 8002c60:	440a      	add	r2, r1
 8002c62:	3240      	adds	r2, #64	; 0x40
 8002c64:	8812      	ldrh	r2, [r2, #0]
 8002c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 818e 	beq.w	8002f90 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3354      	adds	r3, #84	; 0x54
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	f083 0301 	eor.w	r3, r3, #1
 8002c88:	b2d8      	uxtb	r0, r3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3354      	adds	r3, #84	; 0x54
 8002c98:	4602      	mov	r2, r0
 8002c9a:	701a      	strb	r2, [r3, #0]
}
 8002c9c:	e178      	b.n	8002f90 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	3354      	adds	r3, #84	; 0x54
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	f083 0301 	eor.w	r3, r3, #1
 8002cb2:	b2d8      	uxtb	r0, r3
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3354      	adds	r3, #84	; 0x54
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	701a      	strb	r2, [r3, #0]
}
 8002cc6:	e163      	b.n	8002f90 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	f040 80f6 	bne.w	8002ecc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3361      	adds	r3, #97	; 0x61
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d109      	bne.n	8002d08 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3360      	adds	r3, #96	; 0x60
 8002d02:	2201      	movs	r2, #1
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e0c9      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3361      	adds	r3, #97	; 0x61
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d109      	bne.n	8002d30 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3360      	adds	r3, #96	; 0x60
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	e0b5      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3361      	adds	r3, #97	; 0x61
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b06      	cmp	r3, #6
 8002d42:	d009      	beq.n	8002d58 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3361      	adds	r3, #97	; 0x61
 8002d52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d150      	bne.n	8002dfa <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	335c      	adds	r3, #92	; 0x5c
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	202c      	movs	r0, #44	; 0x2c
 8002d70:	fb00 f303 	mul.w	r3, r0, r3
 8002d74:	440b      	add	r3, r1
 8002d76:	335c      	adds	r3, #92	; 0x5c
 8002d78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	335c      	adds	r3, #92	; 0x5c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d912      	bls.n	8002db4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	335c      	adds	r3, #92	; 0x5c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3360      	adds	r3, #96	; 0x60
 8002dae:	2204      	movs	r2, #4
 8002db0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002db2:	e073      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3360      	adds	r3, #96	; 0x60
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ddc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002de4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002df8:	e050      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	3361      	adds	r3, #97	; 0x61
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d122      	bne.n	8002e54 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3360      	adds	r3, #96	; 0x60
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e36:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e3e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e023      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3361      	adds	r3, #97	; 0x61
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b07      	cmp	r3, #7
 8002e66:	d119      	bne.n	8002e9c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	335c      	adds	r3, #92	; 0x5c
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	202c      	movs	r0, #44	; 0x2c
 8002e80:	fb00 f303 	mul.w	r3, r0, r3
 8002e84:	440b      	add	r3, r1
 8002e86:	335c      	adds	r3, #92	; 0x5c
 8002e88:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3360      	adds	r3, #96	; 0x60
 8002e98:	2204      	movs	r2, #4
 8002e9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2302      	movs	r3, #2
 8002eac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	b2d9      	uxtb	r1, r3
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	202c      	movs	r0, #44	; 0x2c
 8002eb8:	fb00 f303 	mul.w	r3, r0, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3360      	adds	r3, #96	; 0x60
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f008 ff39 	bl	800bd3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002eca:	e061      	b.n	8002f90 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d156      	bne.n	8002f90 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	333f      	adds	r3, #63	; 0x3f
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d111      	bne.n	8002f1a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	335c      	adds	r3, #92	; 0x5c
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 ff81 	bl	8006e1a <USB_HC_Halt>
 8002f18:	e031      	b.n	8002f7e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	333f      	adds	r3, #63	; 0x3f
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	333f      	adds	r3, #63	; 0x3f
 8002f3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d11d      	bne.n	8002f7e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	335c      	adds	r3, #92	; 0x5c
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d110      	bne.n	8002f7e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3361      	adds	r3, #97	; 0x61
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 ff4e 	bl	8006e1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	6093      	str	r3, [r2, #8]
}
 8002f90:	bf00      	nop
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d11a      	bne.n	8002ffe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3361      	adds	r3, #97	; 0x61
 8002fe8:	2206      	movs	r2, #6
 8002fea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 ff0f 	bl	8006e1a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002ffc:	e331      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b20      	cmp	r3, #32
 8003012:	d12e      	bne.n	8003072 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	2320      	movs	r3, #32
 8003024:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	333d      	adds	r3, #61	; 0x3d
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	f040 8313 	bne.w	8003662 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	333d      	adds	r3, #61	; 0x3d
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3360      	adds	r3, #96	; 0x60
 800305c:	2202      	movs	r2, #2
 800305e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f003 fed5 	bl	8006e1a <USB_HC_Halt>
}
 8003070:	e2f7      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003088:	d112      	bne.n	80030b0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	461a      	mov	r2, r3
 8003098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800309c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 feb6 	bl	8006e1a <USB_HC_Halt>
}
 80030ae:	e2d8      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d140      	bne.n	8003148 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	335c      	adds	r3, #92	; 0x5c
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d111      	bne.n	8003112 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	333d      	adds	r3, #61	; 0x3d
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	461a      	mov	r2, r3
 800310e:	2340      	movs	r3, #64	; 0x40
 8003110:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311e:	461a      	mov	r2, r3
 8003120:	2301      	movs	r3, #1
 8003122:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	212c      	movs	r1, #44	; 0x2c
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3361      	adds	r3, #97	; 0x61
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f003 fe6a 	bl	8006e1a <USB_HC_Halt>
}
 8003146:	e28c      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d12c      	bne.n	80031b8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3361      	adds	r3, #97	; 0x61
 800316c:	2204      	movs	r2, #4
 800316e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	333d      	adds	r3, #61	; 0x3d
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	335c      	adds	r3, #92	; 0x5c
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f003 fe3b 	bl	8006e1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	461a      	mov	r2, r3
 80031b2:	2340      	movs	r3, #64	; 0x40
 80031b4:	6093      	str	r3, [r2, #8]
}
 80031b6:	e254      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d11a      	bne.n	8003204 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	461a      	mov	r2, r3
 80031dc:	2308      	movs	r3, #8
 80031de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3361      	adds	r3, #97	; 0x61
 80031ee:	2205      	movs	r2, #5
 80031f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 fe0c 	bl	8006e1a <USB_HC_Halt>
}
 8003202:	e22e      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b10      	cmp	r3, #16
 8003218:	d140      	bne.n	800329c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	335c      	adds	r3, #92	; 0x5c
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3361      	adds	r3, #97	; 0x61
 800323a:	2203      	movs	r2, #3
 800323c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	333d      	adds	r3, #61	; 0x3d
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d112      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	212c      	movs	r1, #44	; 0x2c
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	333c      	adds	r3, #60	; 0x3c
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d108      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	333d      	adds	r3, #61	; 0x3d
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f003 fdc9 	bl	8006e1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	461a      	mov	r2, r3
 8003296:	2310      	movs	r3, #16
 8003298:	6093      	str	r3, [r2, #8]
}
 800329a:	e1e2      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b80      	cmp	r3, #128	; 0x80
 80032b0:	d164      	bne.n	800337c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d111      	bne.n	80032de <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	3361      	adds	r3, #97	; 0x61
 80032c8:	2206      	movs	r2, #6
 80032ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 fd9f 	bl	8006e1a <USB_HC_Halt>
 80032dc:	e044      	b.n	8003368 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	335c      	adds	r3, #92	; 0x5c
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	202c      	movs	r0, #44	; 0x2c
 80032f6:	fb00 f303 	mul.w	r3, r0, r3
 80032fa:	440b      	add	r3, r1
 80032fc:	335c      	adds	r3, #92	; 0x5c
 80032fe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	335c      	adds	r3, #92	; 0x5c
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d920      	bls.n	8003356 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	335c      	adds	r3, #92	; 0x5c
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	3360      	adds	r3, #96	; 0x60
 8003334:	2204      	movs	r2, #4
 8003336:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	b2d9      	uxtb	r1, r3
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	202c      	movs	r0, #44	; 0x2c
 8003342:	fb00 f303 	mul.w	r3, r0, r3
 8003346:	4413      	add	r3, r2
 8003348:	3360      	adds	r3, #96	; 0x60
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f008 fcf4 	bl	800bd3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003354:	e008      	b.n	8003368 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	3360      	adds	r3, #96	; 0x60
 8003364:	2202      	movs	r2, #2
 8003366:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003374:	461a      	mov	r2, r3
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	6093      	str	r3, [r2, #8]
}
 800337a:	e172      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003392:	d11b      	bne.n	80033cc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3361      	adds	r3, #97	; 0x61
 80033a2:	2208      	movs	r2, #8
 80033a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f003 fd32 	bl	8006e1a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c2:	461a      	mov	r2, r3
 80033c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033c8:	6093      	str	r3, [r2, #8]
}
 80033ca:	e14a      	b.n	8003662 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	f040 813f 	bne.w	8003662 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	3361      	adds	r3, #97	; 0x61
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d17d      	bne.n	80034f4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3360      	adds	r3, #96	; 0x60
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	4413      	add	r3, r2
 8003416:	333f      	adds	r3, #63	; 0x3f
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d00a      	beq.n	8003434 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	212c      	movs	r1, #44	; 0x2c
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	333f      	adds	r3, #63	; 0x3f
 800342c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800342e:	2b03      	cmp	r3, #3
 8003430:	f040 8100 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d113      	bne.n	8003464 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3355      	adds	r3, #85	; 0x55
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	f083 0301 	eor.w	r3, r3, #1
 8003450:	b2d8      	uxtb	r0, r3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	212c      	movs	r1, #44	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	4413      	add	r3, r2
 800345e:	3355      	adds	r3, #85	; 0x55
 8003460:	4602      	mov	r2, r0
 8003462:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b01      	cmp	r3, #1
 800346a:	f040 80e3 	bne.w	8003634 <HCD_HC_OUT_IRQHandler+0x69c>
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	334c      	adds	r3, #76	; 0x4c
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80d8 	beq.w	8003634 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	334c      	adds	r3, #76	; 0x4c
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	202c      	movs	r0, #44	; 0x2c
 800349a:	fb00 f202 	mul.w	r2, r0, r2
 800349e:	440a      	add	r2, r1
 80034a0:	3240      	adds	r2, #64	; 0x40
 80034a2:	8812      	ldrh	r2, [r2, #0]
 80034a4:	4413      	add	r3, r2
 80034a6:	3b01      	subs	r3, #1
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	202c      	movs	r0, #44	; 0x2c
 80034ae:	fb00 f202 	mul.w	r2, r0, r2
 80034b2:	440a      	add	r2, r1
 80034b4:	3240      	adds	r2, #64	; 0x40
 80034b6:	8812      	ldrh	r2, [r2, #0]
 80034b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80b5 	beq.w	8003634 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3355      	adds	r3, #85	; 0x55
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	f083 0301 	eor.w	r3, r3, #1
 80034de:	b2d8      	uxtb	r0, r3
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3355      	adds	r3, #85	; 0x55
 80034ee:	4602      	mov	r2, r0
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e09f      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	212c      	movs	r1, #44	; 0x2c
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	4413      	add	r3, r2
 8003500:	3361      	adds	r3, #97	; 0x61
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d109      	bne.n	800351c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3360      	adds	r3, #96	; 0x60
 8003516:	2202      	movs	r2, #2
 8003518:	701a      	strb	r2, [r3, #0]
 800351a:	e08b      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3361      	adds	r3, #97	; 0x61
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b04      	cmp	r3, #4
 800352e:	d109      	bne.n	8003544 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	3360      	adds	r3, #96	; 0x60
 800353e:	2202      	movs	r2, #2
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e077      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	3361      	adds	r3, #97	; 0x61
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b05      	cmp	r3, #5
 8003556:	d109      	bne.n	800356c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3360      	adds	r3, #96	; 0x60
 8003566:	2205      	movs	r2, #5
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e063      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	212c      	movs	r1, #44	; 0x2c
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	3361      	adds	r3, #97	; 0x61
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b06      	cmp	r3, #6
 800357e:	d009      	beq.n	8003594 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	3361      	adds	r3, #97	; 0x61
 800358e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003590:	2b08      	cmp	r3, #8
 8003592:	d14f      	bne.n	8003634 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	212c      	movs	r1, #44	; 0x2c
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	4413      	add	r3, r2
 80035a0:	335c      	adds	r3, #92	; 0x5c
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	202c      	movs	r0, #44	; 0x2c
 80035ac:	fb00 f303 	mul.w	r3, r0, r3
 80035b0:	440b      	add	r3, r1
 80035b2:	335c      	adds	r3, #92	; 0x5c
 80035b4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	212c      	movs	r1, #44	; 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	335c      	adds	r3, #92	; 0x5c
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d912      	bls.n	80035f0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	335c      	adds	r3, #92	; 0x5c
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3360      	adds	r3, #96	; 0x60
 80035ea:	2204      	movs	r2, #4
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e021      	b.n	8003634 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3360      	adds	r3, #96	; 0x60
 80035fe:	2202      	movs	r2, #2
 8003600:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	4413      	add	r3, r2
 800360a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003618:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003620:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4413      	add	r3, r2
 800362a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362e:	461a      	mov	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003640:	461a      	mov	r2, r3
 8003642:	2302      	movs	r3, #2
 8003644:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	b2d9      	uxtb	r1, r3
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	202c      	movs	r0, #44	; 0x2c
 8003650:	fb00 f303 	mul.w	r3, r0, r3
 8003654:	4413      	add	r3, r2
 8003656:	3360      	adds	r3, #96	; 0x60
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f008 fb6d 	bl	800bd3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003662:	bf00      	nop
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b08a      	sub	sp, #40	; 0x28
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	0c5b      	lsrs	r3, r3, #17
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800369e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d004      	beq.n	80036b0 <HCD_RXQLVL_IRQHandler+0x46>
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	f000 80a9 	beq.w	8003800 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036ae:	e0aa      	b.n	8003806 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80a6 	beq.w	8003804 <HCD_RXQLVL_IRQHandler+0x19a>
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	212c      	movs	r1, #44	; 0x2c
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	3344      	adds	r3, #68	; 0x44
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 809b 	beq.w	8003804 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	3350      	adds	r3, #80	; 0x50
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	441a      	add	r2, r3
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	202c      	movs	r0, #44	; 0x2c
 80036e8:	fb00 f303 	mul.w	r3, r0, r3
 80036ec:	440b      	add	r3, r1
 80036ee:	334c      	adds	r3, #76	; 0x4c
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d87a      	bhi.n	80037ec <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3344      	adds	r3, #68	; 0x44
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	b292      	uxth	r2, r2
 800370e:	4619      	mov	r1, r3
 8003710:	f002 feda 	bl	80064c8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3344      	adds	r3, #68	; 0x44
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	441a      	add	r2, r3
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	202c      	movs	r0, #44	; 0x2c
 800372e:	fb00 f303 	mul.w	r3, r0, r3
 8003732:	440b      	add	r3, r1
 8003734:	3344      	adds	r3, #68	; 0x44
 8003736:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	212c      	movs	r1, #44	; 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3350      	adds	r3, #80	; 0x50
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	441a      	add	r2, r3
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	202c      	movs	r0, #44	; 0x2c
 8003752:	fb00 f303 	mul.w	r3, r0, r3
 8003756:	440b      	add	r3, r1
 8003758:	3350      	adds	r3, #80	; 0x50
 800375a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	0cdb      	lsrs	r3, r3, #19
 800376c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003770:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	212c      	movs	r1, #44	; 0x2c
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	4413      	add	r3, r2
 800377e:	3340      	adds	r3, #64	; 0x40
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4293      	cmp	r3, r2
 8003788:	d13c      	bne.n	8003804 <HCD_RXQLVL_IRQHandler+0x19a>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d039      	beq.n	8003804 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037a6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037ae:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	212c      	movs	r1, #44	; 0x2c
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	3354      	adds	r3, #84	; 0x54
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	f083 0301 	eor.w	r3, r3, #1
 80037d6:	b2d8      	uxtb	r0, r3
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3354      	adds	r3, #84	; 0x54
 80037e6:	4602      	mov	r2, r0
 80037e8:	701a      	strb	r2, [r3, #0]
      break;
 80037ea:	e00b      	b.n	8003804 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	212c      	movs	r1, #44	; 0x2c
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	3360      	adds	r3, #96	; 0x60
 80037fa:	2204      	movs	r2, #4
 80037fc:	701a      	strb	r2, [r3, #0]
      break;
 80037fe:	e001      	b.n	8003804 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003800:	bf00      	nop
 8003802:	e000      	b.n	8003806 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003804:	bf00      	nop
  }
}
 8003806:	bf00      	nop
 8003808:	3728      	adds	r7, #40	; 0x28
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800383a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d10b      	bne.n	800385e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d102      	bne.n	8003856 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f008 fa57 	bl	800bd04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f043 0302 	orr.w	r3, r3, #2
 800385c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b08      	cmp	r3, #8
 8003866:	d132      	bne.n	80038ce <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f043 0308 	orr.w	r3, r3, #8
 800386e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d126      	bne.n	80038c8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d113      	bne.n	80038aa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800388c:	d106      	bne.n	800389c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2102      	movs	r1, #2
 8003894:	4618      	mov	r0, r3
 8003896:	f002 ff85 	bl	80067a4 <USB_InitFSLSPClkSel>
 800389a:	e011      	b.n	80038c0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2101      	movs	r1, #1
 80038a2:	4618      	mov	r0, r3
 80038a4:	f002 ff7e 	bl	80067a4 <USB_InitFSLSPClkSel>
 80038a8:	e00a      	b.n	80038c0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d106      	bne.n	80038c0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038b8:	461a      	mov	r2, r3
 80038ba:	f64e 2360 	movw	r3, #60000	; 0xea60
 80038be:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f008 fa4d 	bl	800bd60 <HAL_HCD_PortEnabled_Callback>
 80038c6:	e002      	b.n	80038ce <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f008 fa57 	bl	800bd7c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d103      	bne.n	80038e0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f043 0320 	orr.w	r3, r3, #32
 80038de:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038e6:	461a      	mov	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	6013      	str	r3, [r2, #0]
}
 80038ec:	bf00      	nop
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e12b      	b.n	8003b5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd fabe 	bl	8000e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	; 0x24
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003946:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003956:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003958:	f001 f964 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 800395c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4a81      	ldr	r2, [pc, #516]	; (8003b68 <HAL_I2C_Init+0x274>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d807      	bhi.n	8003978 <HAL_I2C_Init+0x84>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a80      	ldr	r2, [pc, #512]	; (8003b6c <HAL_I2C_Init+0x278>)
 800396c:	4293      	cmp	r3, r2
 800396e:	bf94      	ite	ls
 8003970:	2301      	movls	r3, #1
 8003972:	2300      	movhi	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e006      	b.n	8003986 <HAL_I2C_Init+0x92>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4a7d      	ldr	r2, [pc, #500]	; (8003b70 <HAL_I2C_Init+0x27c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	bf94      	ite	ls
 8003980:	2301      	movls	r3, #1
 8003982:	2300      	movhi	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0e7      	b.n	8003b5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a78      	ldr	r2, [pc, #480]	; (8003b74 <HAL_I2C_Init+0x280>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	0c9b      	lsrs	r3, r3, #18
 8003998:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a6a      	ldr	r2, [pc, #424]	; (8003b68 <HAL_I2C_Init+0x274>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d802      	bhi.n	80039c8 <HAL_I2C_Init+0xd4>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3301      	adds	r3, #1
 80039c6:	e009      	b.n	80039dc <HAL_I2C_Init+0xe8>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	4a69      	ldr	r2, [pc, #420]	; (8003b78 <HAL_I2C_Init+0x284>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	099b      	lsrs	r3, r3, #6
 80039da:	3301      	adds	r3, #1
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6812      	ldr	r2, [r2, #0]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	495c      	ldr	r1, [pc, #368]	; (8003b68 <HAL_I2C_Init+0x274>)
 80039f8:	428b      	cmp	r3, r1
 80039fa:	d819      	bhi.n	8003a30 <HAL_I2C_Init+0x13c>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1e59      	subs	r1, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a0a:	1c59      	adds	r1, r3, #1
 8003a0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a10:	400b      	ands	r3, r1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <HAL_I2C_Init+0x138>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1e59      	subs	r1, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a24:	3301      	adds	r3, #1
 8003a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2a:	e051      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	e04f      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d111      	bne.n	8003a5c <HAL_I2C_Init+0x168>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e58      	subs	r0, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	440b      	add	r3, r1
 8003a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e012      	b.n	8003a82 <HAL_I2C_Init+0x18e>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1e58      	subs	r0, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	0099      	lsls	r1, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Init+0x196>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e022      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10e      	bne.n	8003ab0 <HAL_I2C_Init+0x1bc>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1e58      	subs	r0, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	440b      	add	r3, r1
 8003aa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aae:	e00f      	b.n	8003ad0 <HAL_I2C_Init+0x1dc>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1e58      	subs	r0, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	0099      	lsls	r1, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	6809      	ldr	r1, [r1, #0]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003afe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6911      	ldr	r1, [r2, #16]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68d2      	ldr	r2, [r2, #12]
 8003b0a:	4311      	orrs	r1, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	000186a0 	.word	0x000186a0
 8003b6c:	001e847f 	.word	0x001e847f
 8003b70:	003d08ff 	.word	0x003d08ff
 8003b74:	431bde83 	.word	0x431bde83
 8003b78:	10624dd3 	.word	0x10624dd3

08003b7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d129      	bne.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2224      	movs	r2, #36	; 0x24
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0210 	bic.w	r2, r2, #16
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e000      	b.n	8003be8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
  }
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d12a      	bne.n	8003c64 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2224      	movs	r2, #36	; 0x24
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	f023 030f 	bic.w	r3, r3, #15
 8003c34:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	89fb      	ldrh	r3, [r7, #14]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	89fa      	ldrh	r2, [r7, #14]
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e000      	b.n	8003c66 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
  }
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0bf      	b.n	8003e06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd f968 	bl	8000f70 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003cb6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6999      	ldr	r1, [r3, #24]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ccc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6899      	ldr	r1, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	; (8003e10 <HAL_LTDC_Init+0x19c>)
 8003ce8:	400b      	ands	r3, r1
 8003cea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	041b      	lsls	r3, r3, #16
 8003cf2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6899      	ldr	r1, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68d9      	ldr	r1, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b3e      	ldr	r3, [pc, #248]	; (8003e10 <HAL_LTDC_Init+0x19c>)
 8003d16:	400b      	ands	r3, r1
 8003d18:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68d9      	ldr	r1, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1a      	ldr	r2, [r3, #32]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6919      	ldr	r1, [r3, #16]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b33      	ldr	r3, [pc, #204]	; (8003e10 <HAL_LTDC_Init+0x19c>)
 8003d44:	400b      	ands	r3, r1
 8003d46:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6919      	ldr	r1, [r3, #16]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6959      	ldr	r1, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <HAL_LTDC_Init+0x19c>)
 8003d72:	400b      	ands	r3, r1
 8003d74:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6959      	ldr	r1, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0206 	orr.w	r2, r2, #6
 8003de2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	f000f800 	.word	0xf000f800

08003e14 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d023      	beq.n	8003e7e <HAL_LTDC_IRQHandler+0x6a>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01e      	beq.n	8003e7e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0204 	bic.w	r2, r2, #4
 8003e4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2204      	movs	r2, #4
 8003e56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e5e:	f043 0201 	orr.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f86f 	bl	8003f5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d023      	beq.n	8003ed0 <HAL_LTDC_IRQHandler+0xbc>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01e      	beq.n	8003ed0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0202 	bic.w	r2, r2, #2
 8003ea0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003eb0:	f043 0202 	orr.w	r2, r3, #2
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f846 	bl	8003f5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d01b      	beq.n	8003f12 <HAL_LTDC_IRQHandler+0xfe>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d016      	beq.n	8003f12 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f82f 	bl	8003f70 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <HAL_LTDC_IRQHandler+0x140>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d016      	beq.n	8003f54 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0208 	bic.w	r2, r2, #8
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f818 	bl	8003f84 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f98:	b5b0      	push	{r4, r5, r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_LTDC_ConfigLayer+0x1a>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e02c      	b.n	800400c <HAL_LTDC_ConfigLayer+0x74>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2134      	movs	r1, #52	; 0x34
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	4413      	add	r3, r2
 8003fce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4614      	mov	r4, r2
 8003fd6:	461d      	mov	r5, r3
 8003fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f811 	bl	8004014 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bdb0      	pop	{r4, r5, r7, pc}

08004014 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	0c1b      	lsrs	r3, r3, #16
 800402c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004030:	4413      	add	r3, r2
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	01db      	lsls	r3, r3, #7
 8004040:	4413      	add	r3, r2
 8004042:	3384      	adds	r3, #132	; 0x84
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	4611      	mov	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	01d2      	lsls	r2, r2, #7
 8004050:	440a      	add	r2, r1
 8004052:	3284      	adds	r2, #132	; 0x84
 8004054:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004058:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	0c1b      	lsrs	r3, r3, #16
 8004066:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800406a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800406c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4619      	mov	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	01db      	lsls	r3, r3, #7
 8004078:	440b      	add	r3, r1
 800407a:	3384      	adds	r3, #132	; 0x84
 800407c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004082:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004092:	4413      	add	r3, r2
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	01db      	lsls	r3, r3, #7
 80040a2:	4413      	add	r3, r2
 80040a4:	3384      	adds	r3, #132	; 0x84
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	4611      	mov	r1, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	01d2      	lsls	r2, r2, #7
 80040b2:	440a      	add	r2, r1
 80040b4:	3284      	adds	r2, #132	; 0x84
 80040b6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80040ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ca:	4413      	add	r3, r2
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4619      	mov	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	01db      	lsls	r3, r3, #7
 80040d8:	440b      	add	r3, r1
 80040da:	3384      	adds	r3, #132	; 0x84
 80040dc:	4619      	mov	r1, r3
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	01db      	lsls	r3, r3, #7
 80040ee:	4413      	add	r3, r2
 80040f0:	3384      	adds	r3, #132	; 0x84
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	4611      	mov	r1, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	01d2      	lsls	r2, r2, #7
 80040fe:	440a      	add	r2, r1
 8004100:	3284      	adds	r2, #132	; 0x84
 8004102:	f023 0307 	bic.w	r3, r3, #7
 8004106:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	01db      	lsls	r3, r3, #7
 8004112:	4413      	add	r3, r2
 8004114:	3384      	adds	r3, #132	; 0x84
 8004116:	461a      	mov	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800412e:	041b      	lsls	r3, r3, #16
 8004130:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	01db      	lsls	r3, r3, #7
 8004144:	4413      	add	r3, r2
 8004146:	3384      	adds	r3, #132	; 0x84
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	01db      	lsls	r3, r3, #7
 8004154:	4413      	add	r3, r2
 8004156:	3384      	adds	r3, #132	; 0x84
 8004158:	461a      	mov	r2, r3
 800415a:	2300      	movs	r3, #0
 800415c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004164:	461a      	mov	r2, r3
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	431a      	orrs	r2, r3
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4619      	mov	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	01db      	lsls	r3, r3, #7
 8004178:	440b      	add	r3, r1
 800417a:	3384      	adds	r3, #132	; 0x84
 800417c:	4619      	mov	r1, r3
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	01db      	lsls	r3, r3, #7
 800418e:	4413      	add	r3, r2
 8004190:	3384      	adds	r3, #132	; 0x84
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	4611      	mov	r1, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	01d2      	lsls	r2, r2, #7
 800419e:	440a      	add	r2, r1
 80041a0:	3284      	adds	r2, #132	; 0x84
 80041a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	01db      	lsls	r3, r3, #7
 80041b2:	4413      	add	r3, r2
 80041b4:	3384      	adds	r3, #132	; 0x84
 80041b6:	461a      	mov	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	01db      	lsls	r3, r3, #7
 80041c8:	4413      	add	r3, r2
 80041ca:	3384      	adds	r3, #132	; 0x84
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	4611      	mov	r1, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	01d2      	lsls	r2, r2, #7
 80041d8:	440a      	add	r2, r1
 80041da:	3284      	adds	r2, #132	; 0x84
 80041dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041e0:	f023 0307 	bic.w	r3, r3, #7
 80041e4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	68f9      	ldr	r1, [r7, #12]
 80041f0:	6809      	ldr	r1, [r1, #0]
 80041f2:	4608      	mov	r0, r1
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	01c9      	lsls	r1, r1, #7
 80041f8:	4401      	add	r1, r0
 80041fa:	3184      	adds	r1, #132	; 0x84
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	01db      	lsls	r3, r3, #7
 800420a:	4413      	add	r3, r2
 800420c:	3384      	adds	r3, #132	; 0x84
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	01db      	lsls	r3, r3, #7
 800421a:	4413      	add	r3, r2
 800421c:	3384      	adds	r3, #132	; 0x84
 800421e:	461a      	mov	r2, r3
 8004220:	2300      	movs	r3, #0
 8004222:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	01db      	lsls	r3, r3, #7
 800422e:	4413      	add	r3, r2
 8004230:	3384      	adds	r3, #132	; 0x84
 8004232:	461a      	mov	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004242:	2304      	movs	r3, #4
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	e01b      	b.n	8004280 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d102      	bne.n	8004256 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004250:	2303      	movs	r3, #3
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	e014      	b.n	8004280 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b04      	cmp	r3, #4
 800425c:	d00b      	beq.n	8004276 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004262:	2b02      	cmp	r3, #2
 8004264:	d007      	beq.n	8004276 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800426a:	2b03      	cmp	r3, #3
 800426c:	d003      	beq.n	8004276 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004272:	2b07      	cmp	r3, #7
 8004274:	d102      	bne.n	800427c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004276:	2302      	movs	r3, #2
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	e001      	b.n	8004280 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800427c:	2301      	movs	r3, #1
 800427e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	01db      	lsls	r3, r3, #7
 800428a:	4413      	add	r3, r2
 800428c:	3384      	adds	r3, #132	; 0x84
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	4611      	mov	r1, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	01d2      	lsls	r2, r2, #7
 800429a:	440a      	add	r2, r1
 800429c:	3284      	adds	r2, #132	; 0x84
 800429e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80042a2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	1acb      	subs	r3, r1, r3
 80042ba:	69f9      	ldr	r1, [r7, #28]
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	6809      	ldr	r1, [r1, #0]
 80042c6:	4608      	mov	r0, r1
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	01c9      	lsls	r1, r1, #7
 80042cc:	4401      	add	r1, r0
 80042ce:	3184      	adds	r1, #132	; 0x84
 80042d0:	4313      	orrs	r3, r2
 80042d2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	01db      	lsls	r3, r3, #7
 80042de:	4413      	add	r3, r2
 80042e0:	3384      	adds	r3, #132	; 0x84
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	4611      	mov	r1, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	01d2      	lsls	r2, r2, #7
 80042ee:	440a      	add	r2, r1
 80042f0:	3284      	adds	r2, #132	; 0x84
 80042f2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042f6:	f023 0307 	bic.w	r3, r3, #7
 80042fa:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	01db      	lsls	r3, r3, #7
 8004306:	4413      	add	r3, r2
 8004308:	3384      	adds	r3, #132	; 0x84
 800430a:	461a      	mov	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	01db      	lsls	r3, r3, #7
 800431c:	4413      	add	r3, r2
 800431e:	3384      	adds	r3, #132	; 0x84
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	4611      	mov	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	01d2      	lsls	r2, r2, #7
 800432c:	440a      	add	r2, r1
 800432e:	3284      	adds	r2, #132	; 0x84
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6013      	str	r3, [r2, #0]
}
 8004336:	bf00      	nop
 8004338:	3724      	adds	r7, #36	; 0x24
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e267      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d075      	beq.n	800444e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004362:	4b88      	ldr	r3, [pc, #544]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b04      	cmp	r3, #4
 800436c:	d00c      	beq.n	8004388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436e:	4b85      	ldr	r3, [pc, #532]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004376:	2b08      	cmp	r3, #8
 8004378:	d112      	bne.n	80043a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437a:	4b82      	ldr	r3, [pc, #520]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004386:	d10b      	bne.n	80043a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	4b7e      	ldr	r3, [pc, #504]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05b      	beq.n	800444c <HAL_RCC_OscConfig+0x108>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d157      	bne.n	800444c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e242      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a8:	d106      	bne.n	80043b8 <HAL_RCC_OscConfig+0x74>
 80043aa:	4b76      	ldr	r3, [pc, #472]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a75      	ldr	r2, [pc, #468]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e01d      	b.n	80043f4 <HAL_RCC_OscConfig+0xb0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x98>
 80043c2:	4b70      	ldr	r3, [pc, #448]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a6f      	ldr	r2, [pc, #444]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80043c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	4b6d      	ldr	r3, [pc, #436]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a6c      	ldr	r2, [pc, #432]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0xb0>
 80043dc:	4b69      	ldr	r3, [pc, #420]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a68      	ldr	r2, [pc, #416]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80043e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	4b66      	ldr	r3, [pc, #408]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a65      	ldr	r2, [pc, #404]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80043ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d013      	beq.n	8004424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fd f976 	bl	80016ec <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004404:	f7fd f972 	bl	80016ec <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	; 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e207      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	4b5b      	ldr	r3, [pc, #364]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0xc0>
 8004422:	e014      	b.n	800444e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fd f962 	bl	80016ec <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800442c:	f7fd f95e 	bl	80016ec <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e1f3      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443e:	4b51      	ldr	r3, [pc, #324]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0xe8>
 800444a:	e000      	b.n	800444e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d063      	beq.n	8004522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800445a:	4b4a      	ldr	r3, [pc, #296]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00b      	beq.n	800447e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004466:	4b47      	ldr	r3, [pc, #284]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800446e:	2b08      	cmp	r3, #8
 8004470:	d11c      	bne.n	80044ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004472:	4b44      	ldr	r3, [pc, #272]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d116      	bne.n	80044ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447e:	4b41      	ldr	r3, [pc, #260]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_RCC_OscConfig+0x152>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d001      	beq.n	8004496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e1c7      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004496:	4b3b      	ldr	r3, [pc, #236]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4937      	ldr	r1, [pc, #220]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	e03a      	b.n	8004522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d020      	beq.n	80044f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b4:	4b34      	ldr	r3, [pc, #208]	; (8004588 <HAL_RCC_OscConfig+0x244>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fd f917 	bl	80016ec <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c2:	f7fd f913 	bl	80016ec <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e1a8      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d4:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e0:	4b28      	ldr	r3, [pc, #160]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4925      	ldr	r1, [pc, #148]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	600b      	str	r3, [r1, #0]
 80044f4:	e015      	b.n	8004522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <HAL_RCC_OscConfig+0x244>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd f8f6 	bl	80016ec <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004504:	f7fd f8f2 	bl	80016ec <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e187      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004516:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d036      	beq.n	800459c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d016      	beq.n	8004564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004536:	4b15      	ldr	r3, [pc, #84]	; (800458c <HAL_RCC_OscConfig+0x248>)
 8004538:	2201      	movs	r2, #1
 800453a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453c:	f7fd f8d6 	bl	80016ec <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004544:	f7fd f8d2 	bl	80016ec <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e167      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_RCC_OscConfig+0x240>)
 8004558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x200>
 8004562:	e01b      	b.n	800459c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_OscConfig+0x248>)
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456a:	f7fd f8bf 	bl	80016ec <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004570:	e00e      	b.n	8004590 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004572:	f7fd f8bb 	bl	80016ec <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d907      	bls.n	8004590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e150      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
 8004584:	40023800 	.word	0x40023800
 8004588:	42470000 	.word	0x42470000
 800458c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004590:	4b88      	ldr	r3, [pc, #544]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1ea      	bne.n	8004572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8097 	beq.w	80046d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045aa:	2300      	movs	r3, #0
 80045ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ae:	4b81      	ldr	r3, [pc, #516]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10f      	bne.n	80045da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	4b7d      	ldr	r3, [pc, #500]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a7c      	ldr	r2, [pc, #496]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 80045c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ca:	4b7a      	ldr	r3, [pc, #488]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045da:	4b77      	ldr	r3, [pc, #476]	; (80047b8 <HAL_RCC_OscConfig+0x474>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d118      	bne.n	8004618 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045e6:	4b74      	ldr	r3, [pc, #464]	; (80047b8 <HAL_RCC_OscConfig+0x474>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a73      	ldr	r2, [pc, #460]	; (80047b8 <HAL_RCC_OscConfig+0x474>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f2:	f7fd f87b 	bl	80016ec <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fa:	f7fd f877 	bl	80016ec <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e10c      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	4b6a      	ldr	r3, [pc, #424]	; (80047b8 <HAL_RCC_OscConfig+0x474>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d106      	bne.n	800462e <HAL_RCC_OscConfig+0x2ea>
 8004620:	4b64      	ldr	r3, [pc, #400]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4a63      	ldr	r2, [pc, #396]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
 800462c:	e01c      	b.n	8004668 <HAL_RCC_OscConfig+0x324>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b05      	cmp	r3, #5
 8004634:	d10c      	bne.n	8004650 <HAL_RCC_OscConfig+0x30c>
 8004636:	4b5f      	ldr	r3, [pc, #380]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4a5e      	ldr	r2, [pc, #376]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 800463c:	f043 0304 	orr.w	r3, r3, #4
 8004640:	6713      	str	r3, [r2, #112]	; 0x70
 8004642:	4b5c      	ldr	r3, [pc, #368]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	4a5b      	ldr	r2, [pc, #364]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	6713      	str	r3, [r2, #112]	; 0x70
 800464e:	e00b      	b.n	8004668 <HAL_RCC_OscConfig+0x324>
 8004650:	4b58      	ldr	r3, [pc, #352]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004654:	4a57      	ldr	r2, [pc, #348]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	6713      	str	r3, [r2, #112]	; 0x70
 800465c:	4b55      	ldr	r3, [pc, #340]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	4a54      	ldr	r2, [pc, #336]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004662:	f023 0304 	bic.w	r3, r3, #4
 8004666:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d015      	beq.n	800469c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004670:	f7fd f83c 	bl	80016ec <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	e00a      	b.n	800468e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fd f838 	bl	80016ec <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e0cb      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468e:	4b49      	ldr	r3, [pc, #292]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0ee      	beq.n	8004678 <HAL_RCC_OscConfig+0x334>
 800469a:	e014      	b.n	80046c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469c:	f7fd f826 	bl	80016ec <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a4:	f7fd f822 	bl	80016ec <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e0b5      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ba:	4b3e      	ldr	r3, [pc, #248]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1ee      	bne.n	80046a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d105      	bne.n	80046d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046cc:	4b39      	ldr	r3, [pc, #228]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	4a38      	ldr	r2, [pc, #224]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 80046d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80a1 	beq.w	8004824 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046e2:	4b34      	ldr	r3, [pc, #208]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 030c 	and.w	r3, r3, #12
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d05c      	beq.n	80047a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d141      	bne.n	800477a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f6:	4b31      	ldr	r3, [pc, #196]	; (80047bc <HAL_RCC_OscConfig+0x478>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fc fff6 	bl	80016ec <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004704:	f7fc fff2 	bl	80016ec <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e087      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	4b27      	ldr	r3, [pc, #156]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	019b      	lsls	r3, r3, #6
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	3b01      	subs	r3, #1
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	061b      	lsls	r3, r3, #24
 8004746:	491b      	ldr	r1, [pc, #108]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 8004748:	4313      	orrs	r3, r2
 800474a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800474c:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <HAL_RCC_OscConfig+0x478>)
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004752:	f7fc ffcb 	bl	80016ec <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475a:	f7fc ffc7 	bl	80016ec <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e05c      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0x416>
 8004778:	e054      	b.n	8004824 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <HAL_RCC_OscConfig+0x478>)
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fc ffb4 	bl	80016ec <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004788:	f7fc ffb0 	bl	80016ec <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e045      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <HAL_RCC_OscConfig+0x470>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x444>
 80047a6:	e03d      	b.n	8004824 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d107      	bne.n	80047c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e038      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
 80047b4:	40023800 	.word	0x40023800
 80047b8:	40007000 	.word	0x40007000
 80047bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047c0:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_RCC_OscConfig+0x4ec>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d028      	beq.n	8004820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d121      	bne.n	8004820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d11a      	bne.n	8004820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047f0:	4013      	ands	r3, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d111      	bne.n	8004820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	3b01      	subs	r3, #1
 800480a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d107      	bne.n	8004820 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800

08004834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0cc      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004848:	4b68      	ldr	r3, [pc, #416]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d90c      	bls.n	8004870 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004856:	4b65      	ldr	r3, [pc, #404]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0b8      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d020      	beq.n	80048be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004888:	4b59      	ldr	r3, [pc, #356]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a58      	ldr	r2, [pc, #352]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004892:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048a0:	4b53      	ldr	r3, [pc, #332]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4a52      	ldr	r2, [pc, #328]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ac:	4b50      	ldr	r3, [pc, #320]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	494d      	ldr	r1, [pc, #308]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d044      	beq.n	8004954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d2:	4b47      	ldr	r3, [pc, #284]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d119      	bne.n	8004912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e07f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d107      	bne.n	8004902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f2:	4b3f      	ldr	r3, [pc, #252]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e06f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004902:	4b3b      	ldr	r3, [pc, #236]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e067      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004912:	4b37      	ldr	r3, [pc, #220]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f023 0203 	bic.w	r2, r3, #3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4934      	ldr	r1, [pc, #208]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	4313      	orrs	r3, r2
 8004922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004924:	f7fc fee2 	bl	80016ec <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	e00a      	b.n	8004942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492c:	f7fc fede 	bl	80016ec <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	; 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e04f      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	4b2b      	ldr	r3, [pc, #172]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 020c 	and.w	r2, r3, #12
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	429a      	cmp	r2, r3
 8004952:	d1eb      	bne.n	800492c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004954:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d20c      	bcs.n	800497c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	4b22      	ldr	r3, [pc, #136]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496a:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_RCC_ClockConfig+0x1b8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e032      	b.n	80049e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004988:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	4916      	ldr	r1, [pc, #88]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d009      	beq.n	80049ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049a6:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	490e      	ldr	r1, [pc, #56]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ba:	f000 f821 	bl	8004a00 <HAL_RCC_GetSysClockFreq>
 80049be:	4602      	mov	r2, r0
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	490a      	ldr	r1, [pc, #40]	; (80049f4 <HAL_RCC_ClockConfig+0x1c0>)
 80049cc:	5ccb      	ldrb	r3, [r1, r3]
 80049ce:	fa22 f303 	lsr.w	r3, r2, r3
 80049d2:	4a09      	ldr	r2, [pc, #36]	; (80049f8 <HAL_RCC_ClockConfig+0x1c4>)
 80049d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049d6:	4b09      	ldr	r3, [pc, #36]	; (80049fc <HAL_RCC_ClockConfig+0x1c8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fc fd46 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023c00 	.word	0x40023c00
 80049f0:	40023800 	.word	0x40023800
 80049f4:	0800c504 	.word	0x0800c504
 80049f8:	20000000 	.word	0x20000000
 80049fc:	20000004 	.word	0x20000004

08004a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a04:	b094      	sub	sp, #80	; 0x50
 8004a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a10:	2300      	movs	r3, #0
 8004a12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a18:	4b79      	ldr	r3, [pc, #484]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d00d      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x40>
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	f200 80e1 	bhi.w	8004bec <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x34>
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d003      	beq.n	8004a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a32:	e0db      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a34:	4b73      	ldr	r3, [pc, #460]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a38:	e0db      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a3a:	4b73      	ldr	r3, [pc, #460]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a3e:	e0d8      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a40:	4b6f      	ldr	r3, [pc, #444]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a4a:	4b6d      	ldr	r3, [pc, #436]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d063      	beq.n	8004b1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a56:	4b6a      	ldr	r3, [pc, #424]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	099b      	lsrs	r3, r3, #6
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a72:	4622      	mov	r2, r4
 8004a74:	462b      	mov	r3, r5
 8004a76:	f04f 0000 	mov.w	r0, #0
 8004a7a:	f04f 0100 	mov.w	r1, #0
 8004a7e:	0159      	lsls	r1, r3, #5
 8004a80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a84:	0150      	lsls	r0, r2, #5
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	1a51      	subs	r1, r2, r1
 8004a8e:	6139      	str	r1, [r7, #16]
 8004a90:	4629      	mov	r1, r5
 8004a92:	eb63 0301 	sbc.w	r3, r3, r1
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aa4:	4659      	mov	r1, fp
 8004aa6:	018b      	lsls	r3, r1, #6
 8004aa8:	4651      	mov	r1, sl
 8004aaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aae:	4651      	mov	r1, sl
 8004ab0:	018a      	lsls	r2, r1, #6
 8004ab2:	4651      	mov	r1, sl
 8004ab4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ab8:	4659      	mov	r1, fp
 8004aba:	eb63 0901 	sbc.w	r9, r3, r1
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ad2:	4690      	mov	r8, r2
 8004ad4:	4699      	mov	r9, r3
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	eb18 0303 	adds.w	r3, r8, r3
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	462b      	mov	r3, r5
 8004ae0:	eb49 0303 	adc.w	r3, r9, r3
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004af2:	4629      	mov	r1, r5
 8004af4:	024b      	lsls	r3, r1, #9
 8004af6:	4621      	mov	r1, r4
 8004af8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004afc:	4621      	mov	r1, r4
 8004afe:	024a      	lsls	r2, r1, #9
 8004b00:	4610      	mov	r0, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b06:	2200      	movs	r2, #0
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b10:	f7fb fb6e 	bl	80001f0 <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b1c:	e058      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1e:	4b38      	ldr	r3, [pc, #224]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	2200      	movs	r2, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	4611      	mov	r1, r2
 8004b2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b2e:	623b      	str	r3, [r7, #32]
 8004b30:	2300      	movs	r3, #0
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
 8004b34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b38:	4642      	mov	r2, r8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	f04f 0000 	mov.w	r0, #0
 8004b40:	f04f 0100 	mov.w	r1, #0
 8004b44:	0159      	lsls	r1, r3, #5
 8004b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b4a:	0150      	lsls	r0, r2, #5
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4641      	mov	r1, r8
 8004b52:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b56:	4649      	mov	r1, r9
 8004b58:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b70:	ebb2 040a 	subs.w	r4, r2, sl
 8004b74:	eb63 050b 	sbc.w	r5, r3, fp
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	00eb      	lsls	r3, r5, #3
 8004b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b86:	00e2      	lsls	r2, r4, #3
 8004b88:	4614      	mov	r4, r2
 8004b8a:	461d      	mov	r5, r3
 8004b8c:	4643      	mov	r3, r8
 8004b8e:	18e3      	adds	r3, r4, r3
 8004b90:	603b      	str	r3, [r7, #0]
 8004b92:	464b      	mov	r3, r9
 8004b94:	eb45 0303 	adc.w	r3, r5, r3
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	028b      	lsls	r3, r1, #10
 8004baa:	4621      	mov	r1, r4
 8004bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	028a      	lsls	r2, r1, #10
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bba:	2200      	movs	r2, #0
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	61fa      	str	r2, [r7, #28]
 8004bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc4:	f7fb fb14 	bl	80001f0 <__aeabi_uldivmod>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4613      	mov	r3, r2
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bea:	e002      	b.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bec:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3750      	adds	r7, #80	; 0x50
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	007a1200 	.word	0x007a1200

08004c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000000 	.word	0x20000000

08004c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c28:	f7ff fff0 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	0a9b      	lsrs	r3, r3, #10
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4903      	ldr	r1, [pc, #12]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40023800 	.word	0x40023800
 8004c48:	0800c514 	.word	0x0800c514

08004c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c50:	f7ff ffdc 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0b5b      	lsrs	r3, r3, #13
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4903      	ldr	r1, [pc, #12]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	0800c514 	.word	0x0800c514

08004c74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	220f      	movs	r2, #15
 8004c82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0203 	and.w	r2, r3, #3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	08db      	lsrs	r3, r3, #3
 8004cae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <HAL_RCC_GetClockConfig+0x60>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 020f 	and.w	r2, r3, #15
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	601a      	str	r2, [r3, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	40023c00 	.word	0x40023c00

08004cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d105      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d075      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d0c:	4b91      	ldr	r3, [pc, #580]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d12:	f7fc fceb 	bl	80016ec <HAL_GetTick>
 8004d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d1a:	f7fc fce7 	bl	80016ec <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e189      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d2c:	4b8a      	ldr	r3, [pc, #552]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	019a      	lsls	r2, r3, #6
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	071b      	lsls	r3, r3, #28
 8004d50:	4981      	ldr	r1, [pc, #516]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01f      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d64:	4b7c      	ldr	r3, [pc, #496]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d6a:	0f1b      	lsrs	r3, r3, #28
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	019a      	lsls	r2, r3, #6
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	061b      	lsls	r3, r3, #24
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	071b      	lsls	r3, r3, #28
 8004d84:	4974      	ldr	r1, [pc, #464]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d8c:	4b72      	ldr	r3, [pc, #456]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d92:	f023 021f 	bic.w	r2, r3, #31
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	496e      	ldr	r1, [pc, #440]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00d      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	019a      	lsls	r2, r3, #6
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	061b      	lsls	r3, r3, #24
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	071b      	lsls	r3, r3, #28
 8004dc4:	4964      	ldr	r1, [pc, #400]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dcc:	4b61      	ldr	r3, [pc, #388]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dd2:	f7fc fc8b 	bl	80016ec <HAL_GetTick>
 8004dd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dda:	f7fc fc87 	bl	80016ec <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e129      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dec:	4b5a      	ldr	r3, [pc, #360]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d079      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e10:	4b52      	ldr	r3, [pc, #328]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e16:	f7fc fc69 	bl	80016ec <HAL_GetTick>
 8004e1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e1e:	f7fc fc65 	bl	80016ec <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e107      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e30:	4b49      	ldr	r3, [pc, #292]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e3c:	d0ef      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d020      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e4a:	4b43      	ldr	r3, [pc, #268]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	0f1b      	lsrs	r3, r3, #28
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	019a      	lsls	r2, r3, #6
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	061b      	lsls	r3, r3, #24
 8004e64:	431a      	orrs	r2, r3
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	071b      	lsls	r3, r3, #28
 8004e6a:	493b      	ldr	r1, [pc, #236]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e72:	4b39      	ldr	r3, [pc, #228]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	4934      	ldr	r1, [pc, #208]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01e      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e98:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	0e1b      	lsrs	r3, r3, #24
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	019a      	lsls	r2, r3, #6
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	061b      	lsls	r3, r3, #24
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	071b      	lsls	r3, r3, #28
 8004eb8:	4927      	ldr	r1, [pc, #156]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	4922      	ldr	r1, [pc, #136]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ed6:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004edc:	f7fc fc06 	bl	80016ec <HAL_GetTick>
 8004ee0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ee4:	f7fc fc02 	bl	80016ec <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e0a4      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ef6:	4b18      	ldr	r3, [pc, #96]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f02:	d1ef      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 808b 	beq.w	8005028 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f20:	6413      	str	r3, [r2, #64]	; 0x40
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a0b      	ldr	r2, [pc, #44]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f3a:	f7fc fbd7 	bl	80016ec <HAL_GetTick>
 8004f3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f40:	e010      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fc fbd3 	bl	80016ec <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d909      	bls.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e075      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004f54:	42470068 	.word	0x42470068
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	42470070 	.word	0x42470070
 8004f60:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f64:	4b38      	ldr	r3, [pc, #224]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0e8      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f70:	4b36      	ldr	r3, [pc, #216]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d02f      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d028      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f8e:	4b2f      	ldr	r3, [pc, #188]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f98:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f9e:	4b2c      	ldr	r3, [pc, #176]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fa4:	4a29      	ldr	r2, [pc, #164]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004faa:	4b28      	ldr	r3, [pc, #160]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d114      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fb6:	f7fc fb99 	bl	80016ec <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fbe:	f7fc fb95 	bl	80016ec <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e035      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd4:	4b1d      	ldr	r3, [pc, #116]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ee      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fec:	d10d      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004fee:	4b17      	ldr	r3, [pc, #92]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005002:	4912      	ldr	r1, [pc, #72]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005004:	4313      	orrs	r3, r2
 8005006:	608b      	str	r3, [r1, #8]
 8005008:	e005      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800500a:	4b10      	ldr	r3, [pc, #64]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	4a0f      	ldr	r2, [pc, #60]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005010:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005014:	6093      	str	r3, [r2, #8]
 8005016:	4b0d      	ldr	r3, [pc, #52]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005018:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005022:	490a      	ldr	r1, [pc, #40]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005024:	4313      	orrs	r3, r2
 8005026:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b00      	cmp	r3, #0
 8005032:	d004      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800503c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40007000 	.word	0x40007000
 800504c:	40023800 	.word	0x40023800
 8005050:	42470e40 	.word	0x42470e40
 8005054:	424711e0 	.word	0x424711e0

08005058 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e025      	b.n	80050b8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d106      	bne.n	8005086 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7fc f9e9 	bl	8001458 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f000 ffdd 	bl	8006058 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	461a      	mov	r2, r3
 80050a8:	6839      	ldr	r1, [r7, #0]
 80050aa:	f001 f832 	bl	8006112 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e07b      	b.n	80051ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d108      	bne.n	80050ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e2:	d009      	beq.n	80050f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	61da      	str	r2, [r3, #28]
 80050ea:	e005      	b.n	80050f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fc f85c 	bl	80011d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517c:	ea42 0103 	orr.w	r1, r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	f003 0104 	and.w	r1, r3, #4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	f003 0210 	and.w	r2, r3, #16
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e041      	b.n	8005268 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7fc f831 	bl	8001260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3304      	adds	r3, #4
 800520e:	4619      	mov	r1, r3
 8005210:	4610      	mov	r0, r2
 8005212:	f000 fa95 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d001      	beq.n	8005288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e04e      	b.n	8005326 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a23      	ldr	r2, [pc, #140]	; (8005334 <HAL_TIM_Base_Start_IT+0xc4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d022      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b2:	d01d      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1f      	ldr	r2, [pc, #124]	; (8005338 <HAL_TIM_Base_Start_IT+0xc8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d018      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1e      	ldr	r2, [pc, #120]	; (800533c <HAL_TIM_Base_Start_IT+0xcc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1c      	ldr	r2, [pc, #112]	; (8005340 <HAL_TIM_Base_Start_IT+0xd0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00e      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <HAL_TIM_Base_Start_IT+0xd4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d009      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a19      	ldr	r2, [pc, #100]	; (8005348 <HAL_TIM_Base_Start_IT+0xd8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x80>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a18      	ldr	r2, [pc, #96]	; (800534c <HAL_TIM_Base_Start_IT+0xdc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d111      	bne.n	8005314 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b06      	cmp	r3, #6
 8005300:	d010      	beq.n	8005324 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0201 	orr.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005312:	e007      	b.n	8005324 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40010000 	.word	0x40010000
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800
 8005340:	40000c00 	.word	0x40000c00
 8005344:	40010400 	.word	0x40010400
 8005348:	40014000 	.word	0x40014000
 800534c:	40001800 	.word	0x40001800

08005350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d122      	bne.n	80053ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b02      	cmp	r3, #2
 8005372:	d11b      	bne.n	80053ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0202 	mvn.w	r2, #2
 800537c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9b5 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f9a7 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f9b8 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d122      	bne.n	8005400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d11b      	bne.n	8005400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0204 	mvn.w	r2, #4
 80053d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f98b 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f97d 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f98e 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b08      	cmp	r3, #8
 800540c:	d122      	bne.n	8005454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b08      	cmp	r3, #8
 800541a:	d11b      	bne.n	8005454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0208 	mvn.w	r2, #8
 8005424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2204      	movs	r2, #4
 800542a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f961 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 8005440:	e005      	b.n	800544e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f953 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f964 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b10      	cmp	r3, #16
 8005460:	d122      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b10      	cmp	r3, #16
 800546e:	d11b      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0210 	mvn.w	r2, #16
 8005478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2208      	movs	r2, #8
 800547e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f937 	bl	8005702 <HAL_TIM_IC_CaptureCallback>
 8005494:	e005      	b.n	80054a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f929 	bl	80056ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f93a 	bl	8005716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d10e      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d107      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0201 	mvn.w	r2, #1
 80054cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fb fc56 	bl	8000d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b80      	cmp	r3, #128	; 0x80
 80054e0:	d10e      	bne.n	8005500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ec:	2b80      	cmp	r3, #128	; 0x80
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fae0 	bl	8005ac0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d10e      	bne.n	800552c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d107      	bne.n	800552c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f8ff 	bl	800572a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b20      	cmp	r3, #32
 8005538:	d10e      	bne.n	8005558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b20      	cmp	r3, #32
 8005546:	d107      	bne.n	8005558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0220 	mvn.w	r2, #32
 8005550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 faaa 	bl	8005aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIM_ConfigClockSource+0x1c>
 8005578:	2302      	movs	r3, #2
 800557a:	e0b4      	b.n	80056e6 <HAL_TIM_ConfigClockSource+0x186>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800559a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b4:	d03e      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0xd4>
 80055b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ba:	f200 8087 	bhi.w	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c2:	f000 8086 	beq.w	80056d2 <HAL_TIM_ConfigClockSource+0x172>
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ca:	d87f      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055cc:	2b70      	cmp	r3, #112	; 0x70
 80055ce:	d01a      	beq.n	8005606 <HAL_TIM_ConfigClockSource+0xa6>
 80055d0:	2b70      	cmp	r3, #112	; 0x70
 80055d2:	d87b      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055d4:	2b60      	cmp	r3, #96	; 0x60
 80055d6:	d050      	beq.n	800567a <HAL_TIM_ConfigClockSource+0x11a>
 80055d8:	2b60      	cmp	r3, #96	; 0x60
 80055da:	d877      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055dc:	2b50      	cmp	r3, #80	; 0x50
 80055de:	d03c      	beq.n	800565a <HAL_TIM_ConfigClockSource+0xfa>
 80055e0:	2b50      	cmp	r3, #80	; 0x50
 80055e2:	d873      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055e4:	2b40      	cmp	r3, #64	; 0x40
 80055e6:	d058      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x13a>
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d86f      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	2b30      	cmp	r3, #48	; 0x30
 80055ee:	d064      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 80055f0:	2b30      	cmp	r3, #48	; 0x30
 80055f2:	d86b      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d060      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d867      	bhi.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d05c      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 8005600:	2b10      	cmp	r3, #16
 8005602:	d05a      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x15a>
 8005604:	e062      	b.n	80056cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6818      	ldr	r0, [r3, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6899      	ldr	r1, [r3, #8]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f000 f9ad 	bl	8005974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	609a      	str	r2, [r3, #8]
      break;
 8005632:	e04f      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	6899      	ldr	r1, [r3, #8]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f000 f996 	bl	8005974 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005656:	609a      	str	r2, [r3, #8]
      break;
 8005658:	e03c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6859      	ldr	r1, [r3, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	461a      	mov	r2, r3
 8005668:	f000 f90a 	bl	8005880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2150      	movs	r1, #80	; 0x50
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f963 	bl	800593e <TIM_ITRx_SetConfig>
      break;
 8005678:	e02c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6859      	ldr	r1, [r3, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	461a      	mov	r2, r3
 8005688:	f000 f929 	bl	80058de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2160      	movs	r1, #96	; 0x60
 8005692:	4618      	mov	r0, r3
 8005694:	f000 f953 	bl	800593e <TIM_ITRx_SetConfig>
      break;
 8005698:	e01c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6859      	ldr	r1, [r3, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f000 f8ea 	bl	8005880 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2140      	movs	r1, #64	; 0x40
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f943 	bl	800593e <TIM_ITRx_SetConfig>
      break;
 80056b8:	e00c      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f000 f93a 	bl	800593e <TIM_ITRx_SetConfig>
      break;
 80056ca:	e003      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      break;
 80056d0:	e000      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a40      	ldr	r2, [pc, #256]	; (8005854 <TIM_Base_SetConfig+0x114>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <TIM_Base_SetConfig+0x40>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575e:	d00f      	beq.n	8005780 <TIM_Base_SetConfig+0x40>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a3d      	ldr	r2, [pc, #244]	; (8005858 <TIM_Base_SetConfig+0x118>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00b      	beq.n	8005780 <TIM_Base_SetConfig+0x40>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a3c      	ldr	r2, [pc, #240]	; (800585c <TIM_Base_SetConfig+0x11c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d007      	beq.n	8005780 <TIM_Base_SetConfig+0x40>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a3b      	ldr	r2, [pc, #236]	; (8005860 <TIM_Base_SetConfig+0x120>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_Base_SetConfig+0x40>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a3a      	ldr	r2, [pc, #232]	; (8005864 <TIM_Base_SetConfig+0x124>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d108      	bne.n	8005792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a2f      	ldr	r2, [pc, #188]	; (8005854 <TIM_Base_SetConfig+0x114>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d02b      	beq.n	80057f2 <TIM_Base_SetConfig+0xb2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a0:	d027      	beq.n	80057f2 <TIM_Base_SetConfig+0xb2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a2c      	ldr	r2, [pc, #176]	; (8005858 <TIM_Base_SetConfig+0x118>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d023      	beq.n	80057f2 <TIM_Base_SetConfig+0xb2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a2b      	ldr	r2, [pc, #172]	; (800585c <TIM_Base_SetConfig+0x11c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d01f      	beq.n	80057f2 <TIM_Base_SetConfig+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a2a      	ldr	r2, [pc, #168]	; (8005860 <TIM_Base_SetConfig+0x120>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d01b      	beq.n	80057f2 <TIM_Base_SetConfig+0xb2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a29      	ldr	r2, [pc, #164]	; (8005864 <TIM_Base_SetConfig+0x124>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d017      	beq.n	80057f2 <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a28      	ldr	r2, [pc, #160]	; (8005868 <TIM_Base_SetConfig+0x128>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a27      	ldr	r2, [pc, #156]	; (800586c <TIM_Base_SetConfig+0x12c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00f      	beq.n	80057f2 <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a26      	ldr	r2, [pc, #152]	; (8005870 <TIM_Base_SetConfig+0x130>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00b      	beq.n	80057f2 <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a25      	ldr	r2, [pc, #148]	; (8005874 <TIM_Base_SetConfig+0x134>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d007      	beq.n	80057f2 <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a24      	ldr	r2, [pc, #144]	; (8005878 <TIM_Base_SetConfig+0x138>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d003      	beq.n	80057f2 <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a23      	ldr	r2, [pc, #140]	; (800587c <TIM_Base_SetConfig+0x13c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d108      	bne.n	8005804 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <TIM_Base_SetConfig+0x114>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_Base_SetConfig+0xf8>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a0c      	ldr	r2, [pc, #48]	; (8005864 <TIM_Base_SetConfig+0x124>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d103      	bne.n	8005840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	615a      	str	r2, [r3, #20]
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40010000 	.word	0x40010000
 8005858:	40000400 	.word	0x40000400
 800585c:	40000800 	.word	0x40000800
 8005860:	40000c00 	.word	0x40000c00
 8005864:	40010400 	.word	0x40010400
 8005868:	40014000 	.word	0x40014000
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800
 8005874:	40001800 	.word	0x40001800
 8005878:	40001c00 	.word	0x40001c00
 800587c:	40002000 	.word	0x40002000

08005880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f023 0201 	bic.w	r2, r3, #1
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 030a 	bic.w	r3, r3, #10
 80058bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	621a      	str	r2, [r3, #32]
}
 80058d2:	bf00      	nop
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058de:	b480      	push	{r7}
 80058e0:	b087      	sub	sp, #28
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f023 0210 	bic.w	r2, r3, #16
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	031b      	lsls	r3, r3, #12
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800591a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800593e:	b480      	push	{r7}
 8005940:	b085      	sub	sp, #20
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	f043 0307 	orr.w	r3, r3, #7
 8005960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	609a      	str	r2, [r3, #8]
}
 8005968:	bf00      	nop
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800598e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	021a      	lsls	r2, r3, #8
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	431a      	orrs	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4313      	orrs	r3, r2
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4313      	orrs	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	609a      	str	r2, [r3, #8]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e05a      	b.n	8005a82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a21      	ldr	r2, [pc, #132]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d022      	beq.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a18:	d01d      	beq.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d018      	beq.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1b      	ldr	r2, [pc, #108]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1a      	ldr	r2, [pc, #104]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d00e      	beq.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d009      	beq.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a17      	ldr	r2, [pc, #92]	; (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d004      	beq.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d10c      	bne.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40000400 	.word	0x40000400
 8005a98:	40000800 	.word	0x40000800
 8005a9c:	40000c00 	.word	0x40000c00
 8005aa0:	40010400 	.word	0x40010400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40001800 	.word	0x40001800

08005aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e03f      	b.n	8005b66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fb fbd2 	bl	80012a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2224      	movs	r2, #36	; 0x24
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f829 	bl	8005b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b74:	b0c0      	sub	sp, #256	; 0x100
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8c:	68d9      	ldr	r1, [r3, #12]
 8005b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	ea40 0301 	orr.w	r3, r0, r1
 8005b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bc8:	f021 010c 	bic.w	r1, r1, #12
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bea:	6999      	ldr	r1, [r3, #24]
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	ea40 0301 	orr.w	r3, r0, r1
 8005bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	4b8f      	ldr	r3, [pc, #572]	; (8005e3c <UART_SetConfig+0x2cc>)
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d005      	beq.n	8005c10 <UART_SetConfig+0xa0>
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	4b8d      	ldr	r3, [pc, #564]	; (8005e40 <UART_SetConfig+0x2d0>)
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d104      	bne.n	8005c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c10:	f7ff f81c 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 8005c14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c18:	e003      	b.n	8005c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c1a:	f7ff f803 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8005c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c2c:	f040 810c 	bne.w	8005e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c42:	4622      	mov	r2, r4
 8005c44:	462b      	mov	r3, r5
 8005c46:	1891      	adds	r1, r2, r2
 8005c48:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c4a:	415b      	adcs	r3, r3
 8005c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c52:	4621      	mov	r1, r4
 8005c54:	eb12 0801 	adds.w	r8, r2, r1
 8005c58:	4629      	mov	r1, r5
 8005c5a:	eb43 0901 	adc.w	r9, r3, r1
 8005c5e:	f04f 0200 	mov.w	r2, #0
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c72:	4690      	mov	r8, r2
 8005c74:	4699      	mov	r9, r3
 8005c76:	4623      	mov	r3, r4
 8005c78:	eb18 0303 	adds.w	r3, r8, r3
 8005c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c80:	462b      	mov	r3, r5
 8005c82:	eb49 0303 	adc.w	r3, r9, r3
 8005c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	18db      	adds	r3, r3, r3
 8005ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	eb42 0303 	adc.w	r3, r2, r3
 8005caa:	657b      	str	r3, [r7, #84]	; 0x54
 8005cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005cb4:	f7fa fa9c 	bl	80001f0 <__aeabi_uldivmod>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4b61      	ldr	r3, [pc, #388]	; (8005e44 <UART_SetConfig+0x2d4>)
 8005cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	011c      	lsls	r4, r3, #4
 8005cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cd8:	4642      	mov	r2, r8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	1891      	adds	r1, r2, r2
 8005cde:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ce0:	415b      	adcs	r3, r3
 8005ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ce8:	4641      	mov	r1, r8
 8005cea:	eb12 0a01 	adds.w	sl, r2, r1
 8005cee:	4649      	mov	r1, r9
 8005cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d08:	4692      	mov	sl, r2
 8005d0a:	469b      	mov	fp, r3
 8005d0c:	4643      	mov	r3, r8
 8005d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8005d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d16:	464b      	mov	r3, r9
 8005d18:	eb4b 0303 	adc.w	r3, fp, r3
 8005d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d34:	460b      	mov	r3, r1
 8005d36:	18db      	adds	r3, r3, r3
 8005d38:	643b      	str	r3, [r7, #64]	; 0x40
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	eb42 0303 	adc.w	r3, r2, r3
 8005d40:	647b      	str	r3, [r7, #68]	; 0x44
 8005d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d4a:	f7fa fa51 	bl	80001f0 <__aeabi_uldivmod>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	4b3b      	ldr	r3, [pc, #236]	; (8005e44 <UART_SetConfig+0x2d4>)
 8005d56:	fba3 2301 	umull	r2, r3, r3, r1
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2264      	movs	r2, #100	; 0x64
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	1acb      	subs	r3, r1, r3
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d6a:	4b36      	ldr	r3, [pc, #216]	; (8005e44 <UART_SetConfig+0x2d4>)
 8005d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d78:	441c      	add	r4, r3
 8005d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	464b      	mov	r3, r9
 8005d90:	1891      	adds	r1, r2, r2
 8005d92:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d94:	415b      	adcs	r3, r3
 8005d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	1851      	adds	r1, r2, r1
 8005da0:	6339      	str	r1, [r7, #48]	; 0x30
 8005da2:	4649      	mov	r1, r9
 8005da4:	414b      	adcs	r3, r1
 8005da6:	637b      	str	r3, [r7, #52]	; 0x34
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005db4:	4659      	mov	r1, fp
 8005db6:	00cb      	lsls	r3, r1, #3
 8005db8:	4651      	mov	r1, sl
 8005dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dbe:	4651      	mov	r1, sl
 8005dc0:	00ca      	lsls	r2, r1, #3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4642      	mov	r2, r8
 8005dca:	189b      	adds	r3, r3, r2
 8005dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	460a      	mov	r2, r1
 8005dd4:	eb42 0303 	adc.w	r3, r2, r3
 8005dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005de8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005df0:	460b      	mov	r3, r1
 8005df2:	18db      	adds	r3, r3, r3
 8005df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df6:	4613      	mov	r3, r2
 8005df8:	eb42 0303 	adc.w	r3, r2, r3
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e06:	f7fa f9f3 	bl	80001f0 <__aeabi_uldivmod>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <UART_SetConfig+0x2d4>)
 8005e10:	fba3 1302 	umull	r1, r3, r3, r2
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	2164      	movs	r1, #100	; 0x64
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	3332      	adds	r3, #50	; 0x32
 8005e22:	4a08      	ldr	r2, [pc, #32]	; (8005e44 <UART_SetConfig+0x2d4>)
 8005e24:	fba2 2303 	umull	r2, r3, r2, r3
 8005e28:	095b      	lsrs	r3, r3, #5
 8005e2a:	f003 0207 	and.w	r2, r3, #7
 8005e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4422      	add	r2, r4
 8005e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e38:	e105      	b.n	8006046 <UART_SetConfig+0x4d6>
 8005e3a:	bf00      	nop
 8005e3c:	40011000 	.word	0x40011000
 8005e40:	40011400 	.word	0x40011400
 8005e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e5a:	4642      	mov	r2, r8
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	1891      	adds	r1, r2, r2
 8005e60:	6239      	str	r1, [r7, #32]
 8005e62:	415b      	adcs	r3, r3
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
 8005e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	1854      	adds	r4, r2, r1
 8005e6e:	4649      	mov	r1, r9
 8005e70:	eb43 0501 	adc.w	r5, r3, r1
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	f04f 0300 	mov.w	r3, #0
 8005e7c:	00eb      	lsls	r3, r5, #3
 8005e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e82:	00e2      	lsls	r2, r4, #3
 8005e84:	4614      	mov	r4, r2
 8005e86:	461d      	mov	r5, r3
 8005e88:	4643      	mov	r3, r8
 8005e8a:	18e3      	adds	r3, r4, r3
 8005e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e90:	464b      	mov	r3, r9
 8005e92:	eb45 0303 	adc.w	r3, r5, r3
 8005e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	f04f 0300 	mov.w	r3, #0
 8005eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	008b      	lsls	r3, r1, #2
 8005eba:	4621      	mov	r1, r4
 8005ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	008a      	lsls	r2, r1, #2
 8005ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ec8:	f7fa f992 	bl	80001f0 <__aeabi_uldivmod>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4b60      	ldr	r3, [pc, #384]	; (8006054 <UART_SetConfig+0x4e4>)
 8005ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	011c      	lsls	r4, r3, #4
 8005eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ee4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	1891      	adds	r1, r2, r2
 8005ef2:	61b9      	str	r1, [r7, #24]
 8005ef4:	415b      	adcs	r3, r3
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005efc:	4641      	mov	r1, r8
 8005efe:	1851      	adds	r1, r2, r1
 8005f00:	6139      	str	r1, [r7, #16]
 8005f02:	4649      	mov	r1, r9
 8005f04:	414b      	adcs	r3, r1
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f14:	4659      	mov	r1, fp
 8005f16:	00cb      	lsls	r3, r1, #3
 8005f18:	4651      	mov	r1, sl
 8005f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f1e:	4651      	mov	r1, sl
 8005f20:	00ca      	lsls	r2, r1, #3
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	4642      	mov	r2, r8
 8005f2a:	189b      	adds	r3, r3, r2
 8005f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f30:	464b      	mov	r3, r9
 8005f32:	460a      	mov	r2, r1
 8005f34:	eb42 0303 	adc.w	r3, r2, r3
 8005f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f54:	4649      	mov	r1, r9
 8005f56:	008b      	lsls	r3, r1, #2
 8005f58:	4641      	mov	r1, r8
 8005f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f5e:	4641      	mov	r1, r8
 8005f60:	008a      	lsls	r2, r1, #2
 8005f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f66:	f7fa f943 	bl	80001f0 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4b39      	ldr	r3, [pc, #228]	; (8006054 <UART_SetConfig+0x4e4>)
 8005f70:	fba3 1302 	umull	r1, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2164      	movs	r1, #100	; 0x64
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	3332      	adds	r3, #50	; 0x32
 8005f82:	4a34      	ldr	r2, [pc, #208]	; (8006054 <UART_SetConfig+0x4e4>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f8e:	441c      	add	r4, r3
 8005f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f94:	2200      	movs	r2, #0
 8005f96:	673b      	str	r3, [r7, #112]	; 0x70
 8005f98:	677a      	str	r2, [r7, #116]	; 0x74
 8005f9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	1891      	adds	r1, r2, r2
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	415b      	adcs	r3, r3
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fae:	4641      	mov	r1, r8
 8005fb0:	1851      	adds	r1, r2, r1
 8005fb2:	6039      	str	r1, [r7, #0]
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	414b      	adcs	r3, r1
 8005fb8:	607b      	str	r3, [r7, #4]
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fc6:	4659      	mov	r1, fp
 8005fc8:	00cb      	lsls	r3, r1, #3
 8005fca:	4651      	mov	r1, sl
 8005fcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fd0:	4651      	mov	r1, sl
 8005fd2:	00ca      	lsls	r2, r1, #3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4603      	mov	r3, r0
 8005fda:	4642      	mov	r2, r8
 8005fdc:	189b      	adds	r3, r3, r2
 8005fde:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	460a      	mov	r2, r1
 8005fe4:	eb42 0303 	adc.w	r3, r2, r3
 8005fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ff4:	667a      	str	r2, [r7, #100]	; 0x64
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006002:	4649      	mov	r1, r9
 8006004:	008b      	lsls	r3, r1, #2
 8006006:	4641      	mov	r1, r8
 8006008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800600c:	4641      	mov	r1, r8
 800600e:	008a      	lsls	r2, r1, #2
 8006010:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006014:	f7fa f8ec 	bl	80001f0 <__aeabi_uldivmod>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <UART_SetConfig+0x4e4>)
 800601e:	fba3 1302 	umull	r1, r3, r3, r2
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	2164      	movs	r1, #100	; 0x64
 8006026:	fb01 f303 	mul.w	r3, r1, r3
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	3332      	adds	r3, #50	; 0x32
 8006030:	4a08      	ldr	r2, [pc, #32]	; (8006054 <UART_SetConfig+0x4e4>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	f003 020f 	and.w	r2, r3, #15
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4422      	add	r2, r4
 8006044:	609a      	str	r2, [r3, #8]
}
 8006046:	bf00      	nop
 8006048:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800604c:	46bd      	mov	sp, r7
 800604e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006052:	bf00      	nop
 8006054:	51eb851f 	.word	0x51eb851f

08006058 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d123      	bne.n	80060b2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006072:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	6851      	ldr	r1, [r2, #4]
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	6892      	ldr	r2, [r2, #8]
 800607e:	4311      	orrs	r1, r2
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	68d2      	ldr	r2, [r2, #12]
 8006084:	4311      	orrs	r1, r2
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	6912      	ldr	r2, [r2, #16]
 800608a:	4311      	orrs	r1, r2
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	6952      	ldr	r2, [r2, #20]
 8006090:	4311      	orrs	r1, r2
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	6992      	ldr	r2, [r2, #24]
 8006096:	4311      	orrs	r1, r2
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	69d2      	ldr	r2, [r2, #28]
 800609c:	4311      	orrs	r1, r2
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	6a12      	ldr	r2, [r2, #32]
 80060a2:	4311      	orrs	r1, r2
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060a8:	430a      	orrs	r2, r1
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e028      	b.n	8006104 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	69d9      	ldr	r1, [r3, #28]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	4319      	orrs	r1, r3
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	430b      	orrs	r3, r1
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80060d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	6851      	ldr	r1, [r2, #4]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	6892      	ldr	r2, [r2, #8]
 80060e4:	4311      	orrs	r1, r2
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	68d2      	ldr	r2, [r2, #12]
 80060ea:	4311      	orrs	r1, r2
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	6912      	ldr	r2, [r2, #16]
 80060f0:	4311      	orrs	r1, r2
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	6952      	ldr	r2, [r2, #20]
 80060f6:	4311      	orrs	r1, r2
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	6992      	ldr	r2, [r2, #24]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d128      	bne.n	8006176 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	1e59      	subs	r1, r3, #1
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	3b01      	subs	r3, #1
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	4319      	orrs	r1, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	3b01      	subs	r3, #1
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	4319      	orrs	r1, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	3b01      	subs	r3, #1
 800614c:	031b      	lsls	r3, r3, #12
 800614e:	4319      	orrs	r1, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	3b01      	subs	r3, #1
 8006156:	041b      	lsls	r3, r3, #16
 8006158:	4319      	orrs	r1, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	3b01      	subs	r3, #1
 8006160:	051b      	lsls	r3, r3, #20
 8006162:	4319      	orrs	r1, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	3b01      	subs	r3, #1
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	430b      	orrs	r3, r1
 800616e:	431a      	orrs	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	609a      	str	r2, [r3, #8]
 8006174:	e02f      	b.n	80061d6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800617e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	68d2      	ldr	r2, [r2, #12]
 8006186:	3a01      	subs	r2, #1
 8006188:	0311      	lsls	r1, r2, #12
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	6952      	ldr	r2, [r2, #20]
 800618e:	3a01      	subs	r2, #1
 8006190:	0512      	lsls	r2, r2, #20
 8006192:	430a      	orrs	r2, r1
 8006194:	431a      	orrs	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	1e59      	subs	r1, r3, #1
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	4319      	orrs	r1, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	021b      	lsls	r3, r3, #8
 80061ba:	4319      	orrs	r1, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	041b      	lsls	r3, r3, #16
 80061c4:	4319      	orrs	r1, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	061b      	lsls	r3, r3, #24
 80061ce:	430b      	orrs	r3, r1
 80061d0:	431a      	orrs	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061e4:	b084      	sub	sp, #16
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	f107 001c 	add.w	r0, r7, #28
 80061f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d122      	bne.n	8006242 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006226:	2b01      	cmp	r3, #1
 8006228:	d105      	bne.n	8006236 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9c0 	bl	80065bc <USB_CoreReset>
 800623c:	4603      	mov	r3, r0
 800623e:	73fb      	strb	r3, [r7, #15]
 8006240:	e01a      	b.n	8006278 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f9b4 	bl	80065bc <USB_CoreReset>
 8006254:	4603      	mov	r3, r0
 8006256:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
 800626a:	e005      	b.n	8006278 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	2b01      	cmp	r3, #1
 800627c:	d10b      	bne.n	8006296 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f043 0206 	orr.w	r2, r3, #6
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f043 0220 	orr.w	r2, r3, #32
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006296:	7bfb      	ldrb	r3, [r7, #15]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062a2:	b004      	add	sp, #16
 80062a4:	4770      	bx	lr

080062a6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f043 0201 	orr.w	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f023 0201 	bic.w	r2, r3, #1
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d115      	bne.n	8006338 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006318:	2001      	movs	r0, #1
 800631a:	f7fb f9f3 	bl	8001704 <HAL_Delay>
      ms++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3301      	adds	r3, #1
 8006322:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f93a 	bl	800659e <USB_GetMode>
 800632a:	4603      	mov	r3, r0
 800632c:	2b01      	cmp	r3, #1
 800632e:	d01e      	beq.n	800636e <USB_SetCurrentMode+0x84>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b31      	cmp	r3, #49	; 0x31
 8006334:	d9f0      	bls.n	8006318 <USB_SetCurrentMode+0x2e>
 8006336:	e01a      	b.n	800636e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d115      	bne.n	800636a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800634a:	2001      	movs	r0, #1
 800634c:	f7fb f9da 	bl	8001704 <HAL_Delay>
      ms++;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	3301      	adds	r3, #1
 8006354:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f921 	bl	800659e <USB_GetMode>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <USB_SetCurrentMode+0x84>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b31      	cmp	r3, #49	; 0x31
 8006366:	d9f0      	bls.n	800634a <USB_SetCurrentMode+0x60>
 8006368:	e001      	b.n	800636e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e005      	b.n	800637a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b32      	cmp	r3, #50	; 0x32
 8006372:	d101      	bne.n	8006378 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e000      	b.n	800637a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3301      	adds	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4a13      	ldr	r2, [pc, #76]	; (80063e8 <USB_FlushTxFifo+0x64>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d901      	bls.n	80063a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e01b      	b.n	80063dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	daf2      	bge.n	8006392 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	019b      	lsls	r3, r3, #6
 80063b4:	f043 0220 	orr.w	r2, r3, #32
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3301      	adds	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4a08      	ldr	r2, [pc, #32]	; (80063e8 <USB_FlushTxFifo+0x64>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d901      	bls.n	80063ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e006      	b.n	80063dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d0f0      	beq.n	80063bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	00030d40 	.word	0x00030d40

080063ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4a11      	ldr	r2, [pc, #68]	; (8006448 <USB_FlushRxFifo+0x5c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e018      	b.n	800643c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	daf2      	bge.n	80063f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2210      	movs	r2, #16
 800641a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3301      	adds	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4a08      	ldr	r2, [pc, #32]	; (8006448 <USB_FlushRxFifo+0x5c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e006      	b.n	800643c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0310 	and.w	r3, r3, #16
 8006436:	2b10      	cmp	r3, #16
 8006438:	d0f0      	beq.n	800641c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	00030d40 	.word	0x00030d40

0800644c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800644c:	b480      	push	{r7}
 800644e:	b089      	sub	sp, #36	; 0x24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	4611      	mov	r1, r2
 8006458:	461a      	mov	r2, r3
 800645a:	460b      	mov	r3, r1
 800645c:	71fb      	strb	r3, [r7, #7]
 800645e:	4613      	mov	r3, r2
 8006460:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800646a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d123      	bne.n	80064ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006472:	88bb      	ldrh	r3, [r7, #4]
 8006474:	3303      	adds	r3, #3
 8006476:	089b      	lsrs	r3, r3, #2
 8006478:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	e018      	b.n	80064b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	031a      	lsls	r2, r3, #12
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	4413      	add	r3, r2
 8006488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648c:	461a      	mov	r2, r3
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	3301      	adds	r3, #1
 8006498:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	3301      	adds	r3, #1
 800649e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	3301      	adds	r3, #1
 80064a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	3301      	adds	r3, #1
 80064aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	3301      	adds	r3, #1
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d3e2      	bcc.n	8006480 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3724      	adds	r7, #36	; 0x24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b08b      	sub	sp, #44	; 0x2c
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	4613      	mov	r3, r2
 80064d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064de:	88fb      	ldrh	r3, [r7, #6]
 80064e0:	089b      	lsrs	r3, r3, #2
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	f003 0303 	and.w	r3, r3, #3
 80064ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064ee:	2300      	movs	r3, #0
 80064f0:	623b      	str	r3, [r7, #32]
 80064f2:	e014      	b.n	800651e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	3301      	adds	r3, #1
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	3301      	adds	r3, #1
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	3301      	adds	r3, #1
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	3301      	adds	r3, #1
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	3301      	adds	r3, #1
 800651c:	623b      	str	r3, [r7, #32]
 800651e:	6a3a      	ldr	r2, [r7, #32]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	429a      	cmp	r2, r3
 8006524:	d3e6      	bcc.n	80064f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006526:	8bfb      	ldrh	r3, [r7, #30]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01e      	beq.n	800656a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006536:	461a      	mov	r2, r3
 8006538:	f107 0310 	add.w	r3, r7, #16
 800653c:	6812      	ldr	r2, [r2, #0]
 800653e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	fa22 f303 	lsr.w	r3, r2, r3
 800654c:	b2da      	uxtb	r2, r3
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	701a      	strb	r2, [r3, #0]
      i++;
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	3301      	adds	r3, #1
 8006556:	623b      	str	r3, [r7, #32]
      pDest++;
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	3301      	adds	r3, #1
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800655e:	8bfb      	ldrh	r3, [r7, #30]
 8006560:	3b01      	subs	r3, #1
 8006562:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006564:	8bfb      	ldrh	r3, [r7, #30]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1ea      	bne.n	8006540 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800656c:	4618      	mov	r0, r3
 800656e:	372c      	adds	r7, #44	; 0x2c
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4013      	ands	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006590:	68fb      	ldr	r3, [r7, #12]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f003 0301 	and.w	r3, r3, #1
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3301      	adds	r3, #1
 80065cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a13      	ldr	r2, [pc, #76]	; (8006620 <USB_CoreReset+0x64>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d901      	bls.n	80065da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e01b      	b.n	8006612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	daf2      	bge.n	80065c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f043 0201 	orr.w	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a09      	ldr	r2, [pc, #36]	; (8006620 <USB_CoreReset+0x64>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e006      	b.n	8006612 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b01      	cmp	r3, #1
 800660e:	d0f0      	beq.n	80065f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	00030d40 	.word	0x00030d40

08006624 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006624:	b084      	sub	sp, #16
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006644:	461a      	mov	r2, r3
 8006646:	2300      	movs	r3, #0
 8006648:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006666:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d018      	beq.n	80066ac <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d10a      	bne.n	8006696 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800668e:	f043 0304 	orr.w	r3, r3, #4
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	e014      	b.n	80066c0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066a4:	f023 0304 	bic.w	r3, r3, #4
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	e009      	b.n	80066c0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066ba:	f023 0304 	bic.w	r3, r3, #4
 80066be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066c0:	2110      	movs	r1, #16
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff fe5e 	bl	8006384 <USB_FlushTxFifo>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff fe8a 	bl	80063ec <USB_FlushRxFifo>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80066e2:	2300      	movs	r3, #0
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	e015      	b.n	8006714 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f4:	461a      	mov	r2, r3
 80066f6:	f04f 33ff 	mov.w	r3, #4294967295
 80066fa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006708:	461a      	mov	r2, r3
 800670a:	2300      	movs	r3, #0
 800670c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	3301      	adds	r3, #1
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	429a      	cmp	r2, r3
 800671a:	d3e5      	bcc.n	80066e8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f04f 32ff 	mov.w	r2, #4294967295
 8006728:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00b      	beq.n	800674e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800673c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a13      	ldr	r2, [pc, #76]	; (8006790 <USB_HostInit+0x16c>)
 8006742:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a13      	ldr	r2, [pc, #76]	; (8006794 <USB_HostInit+0x170>)
 8006748:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800674c:	e009      	b.n	8006762 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2280      	movs	r2, #128	; 0x80
 8006752:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a10      	ldr	r2, [pc, #64]	; (8006798 <USB_HostInit+0x174>)
 8006758:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a0f      	ldr	r2, [pc, #60]	; (800679c <USB_HostInit+0x178>)
 800675e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	2b00      	cmp	r3, #0
 8006766:	d105      	bne.n	8006774 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f043 0210 	orr.w	r2, r3, #16
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <USB_HostInit+0x17c>)
 800677a:	4313      	orrs	r3, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006780:	7dfb      	ldrb	r3, [r7, #23]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800678c:	b004      	add	sp, #16
 800678e:	4770      	bx	lr
 8006790:	01000200 	.word	0x01000200
 8006794:	00e00300 	.word	0x00e00300
 8006798:	00600080 	.word	0x00600080
 800679c:	004000e0 	.word	0x004000e0
 80067a0:	a3200008 	.word	0xa3200008

080067a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	68f9      	ldr	r1, [r7, #12]
 80067d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067dc:	4313      	orrs	r3, r2
 80067de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d107      	bne.n	80067f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ec:	461a      	mov	r2, r3
 80067ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80067f2:	6053      	str	r3, [r2, #4]
 80067f4:	e009      	b.n	800680a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d106      	bne.n	800680a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006802:	461a      	mov	r2, r3
 8006804:	f241 7370 	movw	r3, #6000	; 0x1770
 8006808:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006838:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006846:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006848:	2064      	movs	r0, #100	; 0x64
 800684a:	f7fa ff5b 	bl	8001704 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800685a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800685c:	200a      	movs	r0, #10
 800685e:	f7fa ff51 	bl	8001704 <HAL_Delay>

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006890:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <USB_DriveVbus+0x44>
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d106      	bne.n	80068b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ba:	d109      	bne.n	80068d0 <USB_DriveVbus+0x64>
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	0c5b      	lsrs	r3, r3, #17
 80068fc:	f003 0303 	and.w	r3, r3, #3
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	b29b      	uxth	r3, r3
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
	...

08006930 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	4608      	mov	r0, r1
 800693a:	4611      	mov	r1, r2
 800693c:	461a      	mov	r2, r3
 800693e:	4603      	mov	r3, r0
 8006940:	70fb      	strb	r3, [r7, #3]
 8006942:	460b      	mov	r3, r1
 8006944:	70bb      	strb	r3, [r7, #2]
 8006946:	4613      	mov	r3, r2
 8006948:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695e:	461a      	mov	r2, r3
 8006960:	f04f 33ff 	mov.w	r3, #4294967295
 8006964:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006966:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800696a:	2b03      	cmp	r3, #3
 800696c:	d87e      	bhi.n	8006a6c <USB_HC_Init+0x13c>
 800696e:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <USB_HC_Init+0x44>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	08006985 	.word	0x08006985
 8006978:	08006a2f 	.word	0x08006a2f
 800697c:	08006985 	.word	0x08006985
 8006980:	080069f1 	.word	0x080069f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006990:	461a      	mov	r2, r3
 8006992:	f240 439d 	movw	r3, #1181	; 0x49d
 8006996:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006998:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800699c:	2b00      	cmp	r3, #0
 800699e:	da10      	bge.n	80069c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	78fa      	ldrb	r2, [r7, #3]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069be:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80069c0:	e057      	b.n	8006a72 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d051      	beq.n	8006a72 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80069ec:	60d3      	str	r3, [r2, #12]
      break;
 80069ee:	e040      	b.n	8006a72 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fc:	461a      	mov	r2, r3
 80069fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8006a02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	da34      	bge.n	8006a76 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006a2c:	e023      	b.n	8006a76 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f240 2325 	movw	r3, #549	; 0x225
 8006a40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	da17      	bge.n	8006a7a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	78fa      	ldrb	r2, [r7, #3]
 8006a5a:	0151      	lsls	r1, r2, #5
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	440a      	add	r2, r1
 8006a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a64:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006a68:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006a6a:	e006      	b.n	8006a7a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	77fb      	strb	r3, [r7, #31]
      break;
 8006a70:	e004      	b.n	8006a7c <USB_HC_Init+0x14c>
      break;
 8006a72:	bf00      	nop
 8006a74:	e002      	b.n	8006a7c <USB_HC_Init+0x14c>
      break;
 8006a76:	bf00      	nop
 8006a78:	e000      	b.n	8006a7c <USB_HC_Init+0x14c>
      break;
 8006a7a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	78fa      	ldrb	r2, [r7, #3]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a96:	f043 0302 	orr.w	r3, r3, #2
 8006a9a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	2101      	movs	r1, #1
 8006aac:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab0:	6939      	ldr	r1, [r7, #16]
 8006ab2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006ac6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da03      	bge.n	8006ad6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	e001      	b.n	8006ada <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff feff 	bl	80068de <USB_GetHostSpeed>
 8006ae0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d106      	bne.n	8006af8 <USB_HC_Init+0x1c8>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d003      	beq.n	8006af8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	e001      	b.n	8006afc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006afc:	787b      	ldrb	r3, [r7, #1]
 8006afe:	059b      	lsls	r3, r3, #22
 8006b00:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b04:	78bb      	ldrb	r3, [r7, #2]
 8006b06:	02db      	lsls	r3, r3, #11
 8006b08:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b0c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b12:	049b      	lsls	r3, r3, #18
 8006b14:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b18:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b20:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	0159      	lsls	r1, r3, #5
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	440b      	add	r3, r1
 8006b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b32:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b38:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006b3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d003      	beq.n	8006b4a <USB_HC_Init+0x21a>
 8006b42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d10f      	bne.n	8006b6a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	78fa      	ldrb	r2, [r7, #3]
 8006b5a:	0151      	lsls	r1, r2, #5
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	440a      	add	r2, r1
 8006b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b68:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006b6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08c      	sub	sp, #48	; 0x30
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	785b      	ldrb	r3, [r3, #1]
 8006b8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b90:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d02d      	beq.n	8006bfa <USB_HC_StartXfer+0x86>
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	791b      	ldrb	r3, [r3, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d129      	bne.n	8006bfa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006ba6:	79fb      	ldrb	r3, [r7, #7]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d117      	bne.n	8006bdc <USB_HC_StartXfer+0x68>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	79db      	ldrb	r3, [r3, #7]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <USB_HC_StartXfer+0x48>
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	79db      	ldrb	r3, [r3, #7]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d10f      	bne.n	8006bdc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	6a3a      	ldr	r2, [r7, #32]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bda:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10b      	bne.n	8006bfa <USB_HC_StartXfer+0x86>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	795b      	ldrb	r3, [r3, #5]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d107      	bne.n	8006bfa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fa0f 	bl	8007014 <USB_DoPing>
      return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e0f8      	b.n	8006dec <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d018      	beq.n	8006c34 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	8912      	ldrh	r2, [r2, #8]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	8912      	ldrh	r2, [r2, #8]
 8006c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c16:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006c18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c1a:	8b7b      	ldrh	r3, [r7, #26]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d90b      	bls.n	8006c38 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006c20:	8b7b      	ldrh	r3, [r7, #26]
 8006c22:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	8912      	ldrh	r2, [r2, #8]
 8006c2a:	fb03 f202 	mul.w	r2, r3, r2
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	611a      	str	r2, [r3, #16]
 8006c32:	e001      	b.n	8006c38 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006c34:	2301      	movs	r3, #1
 8006c36:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	78db      	ldrb	r3, [r3, #3]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	8912      	ldrh	r2, [r2, #8]
 8006c46:	fb03 f202 	mul.w	r2, r3, r2
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	611a      	str	r2, [r3, #16]
 8006c4e:	e003      	b.n	8006c58 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	695a      	ldr	r2, [r3, #20]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c62:	04d9      	lsls	r1, r3, #19
 8006c64:	4b63      	ldr	r3, [pc, #396]	; (8006df4 <USB_HC_StartXfer+0x280>)
 8006c66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	7a9b      	ldrb	r3, [r3, #10]
 8006c6e:	075b      	lsls	r3, r3, #29
 8006c70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c74:	69f9      	ldr	r1, [r7, #28]
 8006c76:	0148      	lsls	r0, r1, #5
 8006c78:	6a39      	ldr	r1, [r7, #32]
 8006c7a:	4401      	add	r1, r0
 8006c7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c82:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	68d9      	ldr	r1, [r3, #12]
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c9a:	460a      	mov	r2, r1
 8006c9c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bf0c      	ite	eq
 8006cae:	2301      	moveq	r3, #1
 8006cb0:	2300      	movne	r3, #0
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	6a3a      	ldr	r2, [r7, #32]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cd4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	7e7b      	ldrb	r3, [r7, #25]
 8006ce6:	075b      	lsls	r3, r3, #29
 8006ce8:	69f9      	ldr	r1, [r7, #28]
 8006cea:	0148      	lsls	r0, r1, #5
 8006cec:	6a39      	ldr	r1, [r7, #32]
 8006cee:	4401      	add	r1, r0
 8006cf0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d0e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	78db      	ldrb	r3, [r3, #3]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d1e:	613b      	str	r3, [r7, #16]
 8006d20:	e003      	b.n	8006d2a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d28:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d30:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3e:	461a      	mov	r2, r3
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	e04e      	b.n	8006dec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	78db      	ldrb	r3, [r3, #3]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d149      	bne.n	8006dea <USB_HC_StartXfer+0x276>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d045      	beq.n	8006dea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	79db      	ldrb	r3, [r3, #7]
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d830      	bhi.n	8006dc8 <USB_HC_StartXfer+0x254>
 8006d66:	a201      	add	r2, pc, #4	; (adr r2, 8006d6c <USB_HC_StartXfer+0x1f8>)
 8006d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6c:	08006d7d 	.word	0x08006d7d
 8006d70:	08006da1 	.word	0x08006da1
 8006d74:	08006d7d 	.word	0x08006d7d
 8006d78:	08006da1 	.word	0x08006da1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	3303      	adds	r3, #3
 8006d82:	089b      	lsrs	r3, r3, #2
 8006d84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006d86:	8afa      	ldrh	r2, [r7, #22]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d91c      	bls.n	8006dcc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d9e:	e015      	b.n	8006dcc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	3303      	adds	r3, #3
 8006da6:	089b      	lsrs	r3, r3, #2
 8006da8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006daa:	8afa      	ldrh	r2, [r7, #22]
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d90a      	bls.n	8006dd0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006dc6:	e003      	b.n	8006dd0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006dc8:	bf00      	nop
 8006dca:	e002      	b.n	8006dd2 <USB_HC_StartXfer+0x25e>
        break;
 8006dcc:	bf00      	nop
 8006dce:	e000      	b.n	8006dd2 <USB_HC_StartXfer+0x25e>
        break;
 8006dd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	68d9      	ldr	r1, [r3, #12]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	785a      	ldrb	r2, [r3, #1]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2000      	movs	r0, #0
 8006de2:	9000      	str	r0, [sp, #0]
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff fb31 	bl	800644c <USB_WritePacket>
  }

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3728      	adds	r7, #40	; 0x28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	1ff80000 	.word	0x1ff80000

08006df8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	b29b      	uxth	r3, r3
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b089      	sub	sp, #36	; 0x24
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	0c9b      	lsrs	r3, r3, #18
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	0fdb      	lsrs	r3, r3, #31
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	d104      	bne.n	8006e74 <USB_HC_Halt+0x5a>
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e0c8      	b.n	8007006 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <USB_HC_Halt+0x66>
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d163      	bne.n	8006f48 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	0151      	lsls	r1, r2, #5
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	440a      	add	r2, r1
 8006e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e9e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f040 80ab 	bne.w	8007004 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d133      	bne.n	8006f22 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ed8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ef8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f06:	d81d      	bhi.n	8006f44 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1e:	d0ec      	beq.n	8006efa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f20:	e070      	b.n	8007004 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f42:	e05f      	b.n	8007004 <USB_HC_Halt+0x1ea>
            break;
 8006f44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f46:	e05d      	b.n	8007004 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d133      	bne.n	8006fe0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	69fa      	ldr	r2, [r7, #28]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	0151      	lsls	r1, r2, #5
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	440a      	add	r2, r1
 8006fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fb6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fc4:	d81d      	bhi.n	8007002 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fdc:	d0ec      	beq.n	8006fb8 <USB_HC_Halt+0x19e>
 8006fde:	e011      	b.n	8007004 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	0151      	lsls	r1, r2, #5
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	440a      	add	r2, r1
 8006ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	e000      	b.n	8007004 <USB_HC_Halt+0x1ea>
          break;
 8007002:	bf00      	nop
    }
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3724      	adds	r7, #36	; 0x24
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007028:	2301      	movs	r3, #1
 800702a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	04da      	lsls	r2, r3, #19
 8007030:	4b15      	ldr	r3, [pc, #84]	; (8007088 <USB_DoPing+0x74>)
 8007032:	4013      	ands	r3, r2
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	0151      	lsls	r1, r2, #5
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	440a      	add	r2, r1
 800703c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007044:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	4413      	add	r3, r2
 800704e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800705c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007064:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4413      	add	r3, r2
 800706e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007072:	461a      	mov	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	371c      	adds	r7, #28
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	1ff80000 	.word	0x1ff80000

0800708c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff f911 	bl	80062c8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070a6:	2110      	movs	r1, #16
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff f96b 	bl	8006384 <USB_FlushTxFifo>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff f997 	bl	80063ec <USB_FlushRxFifo>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80070c8:	2300      	movs	r3, #0
 80070ca:	61bb      	str	r3, [r7, #24]
 80070cc:	e01f      	b.n	800710e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007102:	461a      	mov	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	3301      	adds	r3, #1
 800710c:	61bb      	str	r3, [r7, #24]
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b0f      	cmp	r3, #15
 8007112:	d9dc      	bls.n	80070ce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007114:	2300      	movs	r3, #0
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	e034      	b.n	8007184 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	4413      	add	r3, r2
 8007122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007130:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007138:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007140:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4413      	add	r3, r2
 800714a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714e:	461a      	mov	r2, r3
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3301      	adds	r3, #1
 8007158:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007160:	d80c      	bhi.n	800717c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007178:	d0ec      	beq.n	8007154 <USB_StopHost+0xc8>
 800717a:	e000      	b.n	800717e <USB_StopHost+0xf2>
        break;
 800717c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	3301      	adds	r3, #1
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b0f      	cmp	r3, #15
 8007188:	d9c7      	bls.n	800711a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007190:	461a      	mov	r2, r3
 8007192:	f04f 33ff 	mov.w	r3, #4294967295
 8007196:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f04f 32ff 	mov.w	r2, #4294967295
 800719e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff f880 	bl	80062a6 <USB_EnableGlobalInt>

  return ret;
 80071a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80071b0:	b590      	push	{r4, r7, lr}
 80071b2:	b089      	sub	sp, #36	; 0x24
 80071b4:	af04      	add	r7, sp, #16
 80071b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80071b8:	2301      	movs	r3, #1
 80071ba:	2202      	movs	r2, #2
 80071bc:	2102      	movs	r1, #2
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fcb8 	bl	8007b34 <USBH_FindInterface>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2bff      	cmp	r3, #255	; 0xff
 80071cc:	d002      	beq.n	80071d4 <USBH_CDC_InterfaceInit+0x24>
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d901      	bls.n	80071d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071d4:	2302      	movs	r3, #2
 80071d6:	e13d      	b.n	8007454 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fc8d 	bl	8007afc <USBH_SelectInterface>
 80071e2:	4603      	mov	r3, r0
 80071e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80071ec:	2302      	movs	r3, #2
 80071ee:	e131      	b.n	8007454 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80071f6:	2050      	movs	r0, #80	; 0x50
 80071f8:	f004 fff6 	bl	800c1e8 <malloc>
 80071fc:	4603      	mov	r3, r0
 80071fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007210:	2302      	movs	r3, #2
 8007212:	e11f      	b.n	8007454 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007214:	2250      	movs	r2, #80	; 0x50
 8007216:	2100      	movs	r1, #0
 8007218:	68b8      	ldr	r0, [r7, #8]
 800721a:	f005 f803 	bl	800c224 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	211a      	movs	r1, #26
 8007224:	fb01 f303 	mul.w	r3, r1, r3
 8007228:	4413      	add	r3, r2
 800722a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	b25b      	sxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	da15      	bge.n	8007262 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	211a      	movs	r1, #26
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	4413      	add	r3, r2
 8007242:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007246:	781a      	ldrb	r2, [r3, #0]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	211a      	movs	r1, #26
 8007252:	fb01 f303 	mul.w	r3, r1, r3
 8007256:	4413      	add	r3, r2
 8007258:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800725c:	881a      	ldrh	r2, [r3, #0]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f002 f988 	bl	800957e <USBH_AllocPipe>
 800726e:	4603      	mov	r3, r0
 8007270:	461a      	mov	r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	7819      	ldrb	r1, [r3, #0]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	7858      	ldrb	r0, [r3, #1]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	8952      	ldrh	r2, [r2, #10]
 800728e:	9202      	str	r2, [sp, #8]
 8007290:	2203      	movs	r2, #3
 8007292:	9201      	str	r2, [sp, #4]
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	4623      	mov	r3, r4
 8007298:	4602      	mov	r2, r0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f002 f940 	bl	8009520 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2200      	movs	r2, #0
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f004 feef 	bl	800c08c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80072ae:	2300      	movs	r3, #0
 80072b0:	2200      	movs	r2, #0
 80072b2:	210a      	movs	r1, #10
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fc3d 	bl	8007b34 <USBH_FindInterface>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	2bff      	cmp	r3, #255	; 0xff
 80072c2:	d002      	beq.n	80072ca <USBH_CDC_InterfaceInit+0x11a>
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d901      	bls.n	80072ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80072ca:	2302      	movs	r3, #2
 80072cc:	e0c2      	b.n	8007454 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	211a      	movs	r1, #26
 80072d4:	fb01 f303 	mul.w	r3, r1, r3
 80072d8:	4413      	add	r3, r2
 80072da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	b25b      	sxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	da16      	bge.n	8007314 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	211a      	movs	r1, #26
 80072ec:	fb01 f303 	mul.w	r3, r1, r3
 80072f0:	4413      	add	r3, r2
 80072f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072f6:	781a      	ldrb	r2, [r3, #0]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	211a      	movs	r1, #26
 8007302:	fb01 f303 	mul.w	r3, r1, r3
 8007306:	4413      	add	r3, r2
 8007308:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800730c:	881a      	ldrh	r2, [r3, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	835a      	strh	r2, [r3, #26]
 8007312:	e015      	b.n	8007340 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	211a      	movs	r1, #26
 800731a:	fb01 f303 	mul.w	r3, r1, r3
 800731e:	4413      	add	r3, r2
 8007320:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007324:	781a      	ldrb	r2, [r3, #0]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	211a      	movs	r1, #26
 8007330:	fb01 f303 	mul.w	r3, r1, r3
 8007334:	4413      	add	r3, r2
 8007336:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800733a:	881a      	ldrh	r2, [r3, #0]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	211a      	movs	r1, #26
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	b25b      	sxtb	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	da16      	bge.n	8007386 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	211a      	movs	r1, #26
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	211a      	movs	r1, #26
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800737e:	881a      	ldrh	r2, [r3, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	835a      	strh	r2, [r3, #26]
 8007384:	e015      	b.n	80073b2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	211a      	movs	r1, #26
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	4413      	add	r3, r2
 8007392:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007396:	781a      	ldrb	r2, [r3, #0]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	211a      	movs	r1, #26
 80073a2:	fb01 f303 	mul.w	r3, r1, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80073ac:	881a      	ldrh	r2, [r3, #0]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	7b9b      	ldrb	r3, [r3, #14]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f002 f8e0 	bl	800957e <USBH_AllocPipe>
 80073be:	4603      	mov	r3, r0
 80073c0:	461a      	mov	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	7bdb      	ldrb	r3, [r3, #15]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f002 f8d6 	bl	800957e <USBH_AllocPipe>
 80073d2:	4603      	mov	r3, r0
 80073d4:	461a      	mov	r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	7b59      	ldrb	r1, [r3, #13]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	7b98      	ldrb	r0, [r3, #14]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	8b12      	ldrh	r2, [r2, #24]
 80073f2:	9202      	str	r2, [sp, #8]
 80073f4:	2202      	movs	r2, #2
 80073f6:	9201      	str	r2, [sp, #4]
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	4623      	mov	r3, r4
 80073fc:	4602      	mov	r2, r0
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f002 f88e 	bl	8009520 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	7b19      	ldrb	r1, [r3, #12]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	7bd8      	ldrb	r0, [r3, #15]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	8b52      	ldrh	r2, [r2, #26]
 800741c:	9202      	str	r2, [sp, #8]
 800741e:	2202      	movs	r2, #2
 8007420:	9201      	str	r2, [sp, #4]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	4623      	mov	r3, r4
 8007426:	4602      	mov	r2, r0
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f002 f879 	bl	8009520 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	7b5b      	ldrb	r3, [r3, #13]
 800743a:	2200      	movs	r2, #0
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f004 fe24 	bl	800c08c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	7b1b      	ldrb	r3, [r3, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f004 fe1d 	bl	800c08c <USBH_LL_SetToggle>

  return USBH_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	bd90      	pop	{r4, r7, pc}

0800745c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00e      	beq.n	8007494 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f002 f86e 	bl	800955e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f002 f899 	bl	80095c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	7b1b      	ldrb	r3, [r3, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00e      	beq.n	80074ba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	7b1b      	ldrb	r3, [r3, #12]
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f002 f85b 	bl	800955e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	7b1b      	ldrb	r3, [r3, #12]
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f002 f886 	bl	80095c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	7b5b      	ldrb	r3, [r3, #13]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00e      	beq.n	80074e0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	7b5b      	ldrb	r3, [r3, #13]
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f002 f848 	bl	800955e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	7b5b      	ldrb	r3, [r3, #13]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f002 f873 	bl	80095c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f004 fe7f 	bl	800c1f8 <free>
    phost->pActiveClass->pData = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007500:	2200      	movs	r2, #0
 8007502:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b084      	sub	sp, #16
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3340      	adds	r3, #64	; 0x40
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f8b1 	bl	800768e <GetLineCoding>
 800752c:	4603      	mov	r3, r0
 800752e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007530:	7afb      	ldrb	r3, [r7, #11]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d105      	bne.n	8007542 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800753c:	2102      	movs	r1, #2
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007542:	7afb      	ldrb	r3, [r7, #11]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007554:	2301      	movs	r3, #1
 8007556:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800756c:	2b04      	cmp	r3, #4
 800756e:	d877      	bhi.n	8007660 <USBH_CDC_Process+0x114>
 8007570:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <USBH_CDC_Process+0x2c>)
 8007572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007576:	bf00      	nop
 8007578:	0800758d 	.word	0x0800758d
 800757c:	08007593 	.word	0x08007593
 8007580:	080075c3 	.word	0x080075c3
 8007584:	08007637 	.word	0x08007637
 8007588:	08007645 	.word	0x08007645
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	73fb      	strb	r3, [r7, #15]
      break;
 8007590:	e06d      	b.n	800766e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f897 	bl	80076cc <SetLineCoding>
 800759e:	4603      	mov	r3, r0
 80075a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80075b0:	e058      	b.n	8007664 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d055      	beq.n	8007664 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2204      	movs	r2, #4
 80075bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80075c0:	e050      	b.n	8007664 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	3340      	adds	r3, #64	; 0x40
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f860 	bl	800768e <GetLineCoding>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d126      	bne.n	8007626 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ea:	791b      	ldrb	r3, [r3, #4]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d13b      	bne.n	8007668 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d133      	bne.n	8007668 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800760a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800760c:	429a      	cmp	r2, r3
 800760e:	d12b      	bne.n	8007668 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007618:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800761a:	429a      	cmp	r2, r3
 800761c:	d124      	bne.n	8007668 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f982 	bl	8007928 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007624:	e020      	b.n	8007668 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d01d      	beq.n	8007668 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2204      	movs	r2, #4
 8007630:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007634:	e018      	b.n	8007668 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f867 	bl	800770a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f8f6 	bl	800782e <CDC_ProcessReception>
      break;
 8007642:	e014      	b.n	800766e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007644:	2100      	movs	r1, #0
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f001 f95b 	bl	8008902 <USBH_ClrFeature>
 800764c:	4603      	mov	r3, r0
 800764e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10a      	bne.n	800766c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800765e:	e005      	b.n	800766c <USBH_CDC_Process+0x120>

    default:
      break;
 8007660:	bf00      	nop
 8007662:	e004      	b.n	800766e <USBH_CDC_Process+0x122>
      break;
 8007664:	bf00      	nop
 8007666:	e002      	b.n	800766e <USBH_CDC_Process+0x122>
      break;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <USBH_CDC_Process+0x122>
      break;
 800766c:	bf00      	nop

  }

  return status;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	22a1      	movs	r2, #161	; 0xa1
 800769c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2221      	movs	r2, #33	; 0x21
 80076a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2207      	movs	r2, #7
 80076b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2207      	movs	r2, #7
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 fbed 	bl	8008e9c <USBH_CtlReq>
 80076c2:	4603      	mov	r3, r0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2221      	movs	r2, #33	; 0x21
 80076da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2207      	movs	r2, #7
 80076f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2207      	movs	r2, #7
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fbce 	bl	8008e9c <USBH_CtlReq>
 8007700:	4603      	mov	r3, r0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b086      	sub	sp, #24
 800770e:	af02      	add	r7, sp, #8
 8007710:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800771c:	2300      	movs	r3, #0
 800771e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007726:	2b01      	cmp	r3, #1
 8007728:	d002      	beq.n	8007730 <CDC_ProcessTransmission+0x26>
 800772a:	2b02      	cmp	r3, #2
 800772c:	d023      	beq.n	8007776 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800772e:	e07a      	b.n	8007826 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	8b12      	ldrh	r2, [r2, #24]
 8007738:	4293      	cmp	r3, r2
 800773a:	d90b      	bls.n	8007754 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	69d9      	ldr	r1, [r3, #28]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8b1a      	ldrh	r2, [r3, #24]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	7b5b      	ldrb	r3, [r3, #13]
 8007748:	2001      	movs	r0, #1
 800774a:	9000      	str	r0, [sp, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 fea4 	bl	800949a <USBH_BulkSendData>
 8007752:	e00b      	b.n	800776c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	7b5b      	ldrb	r3, [r3, #13]
 8007762:	2001      	movs	r0, #1
 8007764:	9000      	str	r0, [sp, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 fe97 	bl	800949a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007774:	e057      	b.n	8007826 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	7b5b      	ldrb	r3, [r3, #13]
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f004 fc5b 	bl	800c038 <USBH_LL_GetURBState>
 8007782:	4603      	mov	r3, r0
 8007784:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007786:	7afb      	ldrb	r3, [r7, #11]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d136      	bne.n	80077fa <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	8b12      	ldrh	r2, [r2, #24]
 8007794:	4293      	cmp	r3, r2
 8007796:	d90e      	bls.n	80077b6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	8b12      	ldrh	r2, [r2, #24]
 80077a0:	1a9a      	subs	r2, r3, r2
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	8b12      	ldrh	r2, [r2, #24]
 80077ae:	441a      	add	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	61da      	str	r2, [r3, #28]
 80077b4:	e002      	b.n	80077bc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80077cc:	e006      	b.n	80077dc <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f892 	bl	8007900 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2204      	movs	r2, #4
 80077e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80077f0:	2200      	movs	r2, #0
 80077f2:	4619      	mov	r1, r3
 80077f4:	f001 ffe0 	bl	80097b8 <osMessagePut>
      break;
 80077f8:	e014      	b.n	8007824 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80077fa:	7afb      	ldrb	r3, [r7, #11]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d111      	bne.n	8007824 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2204      	movs	r2, #4
 800780c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800781c:	2200      	movs	r2, #0
 800781e:	4619      	mov	r1, r3
 8007820:	f001 ffca 	bl	80097b8 <osMessagePut>
      break;
 8007824:	bf00      	nop
  }
}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b086      	sub	sp, #24
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007840:	2300      	movs	r3, #0
 8007842:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800784a:	2b03      	cmp	r3, #3
 800784c:	d002      	beq.n	8007854 <CDC_ProcessReception+0x26>
 800784e:	2b04      	cmp	r3, #4
 8007850:	d00e      	beq.n	8007870 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007852:	e051      	b.n	80078f8 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	6a19      	ldr	r1, [r3, #32]
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	8b5a      	ldrh	r2, [r3, #26]
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	7b1b      	ldrb	r3, [r3, #12]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 fe3f 	bl	80094e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2204      	movs	r2, #4
 800786a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800786e:	e043      	b.n	80078f8 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	7b1b      	ldrb	r3, [r3, #12]
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f004 fbde 	bl	800c038 <USBH_LL_GetURBState>
 800787c:	4603      	mov	r3, r0
 800787e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007880:	7cfb      	ldrb	r3, [r7, #19]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d137      	bne.n	80078f6 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	7b1b      	ldrb	r3, [r3, #12]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f004 fb41 	bl	800bf14 <USBH_LL_GetLastXferSize>
 8007892:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	429a      	cmp	r2, r3
 800789c:	d016      	beq.n	80078cc <CDC_ProcessReception+0x9e>
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	8b5b      	ldrh	r3, [r3, #26]
 80078a2:	461a      	mov	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d910      	bls.n	80078cc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	1ad2      	subs	r2, r2, r3
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	6a1a      	ldr	r2, [r3, #32]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	441a      	add	r2, r3
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2203      	movs	r2, #3
 80078c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80078ca:	e006      	b.n	80078da <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f81d 	bl	8007914 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2204      	movs	r2, #4
 80078de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80078ee:	2200      	movs	r2, #0
 80078f0:	4619      	mov	r1, r3
 80078f2:	f001 ff61 	bl	80097b8 <osMessagePut>
      break;
 80078f6:	bf00      	nop
  }
}
 80078f8:	bf00      	nop
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800793c:	b5b0      	push	{r4, r5, r7, lr}
 800793e:	b090      	sub	sp, #64	; 0x40
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	4613      	mov	r3, r2
 8007948:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007950:	2302      	movs	r3, #2
 8007952:	e04d      	b.n	80079f0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	79fa      	ldrb	r2, [r7, #7]
 8007958:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f847 	bl	8007a00 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80079a0:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <USBH_Init+0xbc>)
 80079a2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80079a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80079ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fed7 	bl	8009766 <osMessageCreate>
 80079b8:	4602      	mov	r2, r0
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80079c0:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <USBH_Init+0xc0>)
 80079c2:	f107 0414 	add.w	r4, r7, #20
 80079c6:	461d      	mov	r5, r3
 80079c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80079d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80079d4:	f107 0314 	add.w	r3, r7, #20
 80079d8:	68f9      	ldr	r1, [r7, #12]
 80079da:	4618      	mov	r0, r3
 80079dc:	f001 fe63 	bl	80096a6 <osThreadCreate>
 80079e0:	4602      	mov	r2, r0
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f004 f9d5 	bl	800bd98 <USBH_LL_Init>

  return USBH_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3740      	adds	r7, #64	; 0x40
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bdb0      	pop	{r4, r5, r7, pc}
 80079f8:	0800c4d0 	.word	0x0800c4d0
 80079fc:	0800c4e0 	.word	0x0800c4e0

08007a00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e009      	b.n	8007a26 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	33e0      	adds	r3, #224	; 0xe0
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b0f      	cmp	r3, #15
 8007a2a:	d9f2      	bls.n	8007a12 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	e009      	b.n	8007a46 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3301      	adds	r3, #1
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a4c:	d3f1      	bcc.n	8007a32 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2240      	movs	r2, #64	; 0x40
 8007a72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d016      	beq.n	8007aea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10e      	bne.n	8007ae4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007acc:	1c59      	adds	r1, r3, #1
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	33de      	adds	r3, #222	; 0xde
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]
 8007ae2:	e004      	b.n	8007aee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	73fb      	strb	r3, [r7, #15]
 8007ae8:	e001      	b.n	8007aee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007aea:	2302      	movs	r3, #2
 8007aec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007b12:	78fa      	ldrb	r2, [r7, #3]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d204      	bcs.n	8007b22 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007b20:	e001      	b.n	8007b26 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007b22:	2302      	movs	r3, #2
 8007b24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	4611      	mov	r1, r2
 8007b40:	461a      	mov	r2, r3
 8007b42:	4603      	mov	r3, r0
 8007b44:	70fb      	strb	r3, [r7, #3]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70bb      	strb	r3, [r7, #2]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b5c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b5e:	e025      	b.n	8007bac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	221a      	movs	r2, #26
 8007b64:	fb02 f303 	mul.w	r3, r2, r3
 8007b68:	3308      	adds	r3, #8
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3302      	adds	r3, #2
 8007b70:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	795b      	ldrb	r3, [r3, #5]
 8007b76:	78fa      	ldrb	r2, [r7, #3]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d002      	beq.n	8007b82 <USBH_FindInterface+0x4e>
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	2bff      	cmp	r3, #255	; 0xff
 8007b80:	d111      	bne.n	8007ba6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007b86:	78ba      	ldrb	r2, [r7, #2]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d002      	beq.n	8007b92 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b8c:	78bb      	ldrb	r3, [r7, #2]
 8007b8e:	2bff      	cmp	r3, #255	; 0xff
 8007b90:	d109      	bne.n	8007ba6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b96:	787a      	ldrb	r2, [r7, #1]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d002      	beq.n	8007ba2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b9c:	787b      	ldrb	r3, [r7, #1]
 8007b9e:	2bff      	cmp	r3, #255	; 0xff
 8007ba0:	d101      	bne.n	8007ba6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	e006      	b.n	8007bb4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d9d6      	bls.n	8007b60 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007bb2:	23ff      	movs	r3, #255	; 0xff
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f004 f92b 	bl	800be24 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007bce:	2101      	movs	r1, #1
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f004 fa44 	bl	800c05e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af04      	add	r7, sp, #16
 8007be6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007be8:	2302      	movs	r3, #2
 8007bea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d102      	bne.n	8007c02 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2203      	movs	r2, #3
 8007c00:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b0b      	cmp	r3, #11
 8007c0a:	f200 8247 	bhi.w	800809c <USBH_Process+0x4bc>
 8007c0e:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <USBH_Process+0x34>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c45 	.word	0x08007c45
 8007c18:	08007c93 	.word	0x08007c93
 8007c1c:	08007d17 	.word	0x08007d17
 8007c20:	0800801b 	.word	0x0800801b
 8007c24:	0800809d 	.word	0x0800809d
 8007c28:	08007dd7 	.word	0x08007dd7
 8007c2c:	08007fa5 	.word	0x08007fa5
 8007c30:	08007e29 	.word	0x08007e29
 8007c34:	08007e65 	.word	0x08007e65
 8007c38:	08007e9f 	.word	0x08007e9f
 8007c3c:	08007efd 	.word	0x08007efd
 8007c40:	08008003 	.word	0x08008003
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8227 	beq.w	80080a0 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007c58:	20c8      	movs	r0, #200	; 0xc8
 8007c5a:	f004 fa47 	bl	800c0ec <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f004 f93d 	bl	800bede <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	f001 fd94 	bl	80097b8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c90:	e206      	b.n	80080a0 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d107      	bne.n	8007cac <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	e025      	b.n	8007cf8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cb6:	d914      	bls.n	8007ce2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d903      	bls.n	8007cda <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	220d      	movs	r2, #13
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	e00e      	b.n	8007cf8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	701a      	strb	r2, [r3, #0]
 8007ce0:	e00a      	b.n	8007cf8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ce8:	f103 020a 	add.w	r2, r3, #10
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007cf2:	200a      	movs	r0, #10
 8007cf4:	f004 f9fa 	bl	800c0ec <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4619      	mov	r1, r3
 8007d10:	f001 fd52 	bl	80097b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d14:	e1cb      	b.n	80080ae <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d005      	beq.n	8007d2c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d26:	2104      	movs	r1, #4
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007d2c:	2064      	movs	r0, #100	; 0x64
 8007d2e:	f004 f9dd 	bl	800c0ec <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f004 f8ac 	bl	800be90 <USBH_LL_GetSpeed>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2205      	movs	r2, #5
 8007d46:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007d48:	2100      	movs	r1, #0
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f001 fc17 	bl	800957e <USBH_AllocPipe>
 8007d50:	4603      	mov	r3, r0
 8007d52:	461a      	mov	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007d58:	2180      	movs	r1, #128	; 0x80
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 fc0f 	bl	800957e <USBH_AllocPipe>
 8007d60:	4603      	mov	r3, r0
 8007d62:	461a      	mov	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7919      	ldrb	r1, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d7c:	b292      	uxth	r2, r2
 8007d7e:	9202      	str	r2, [sp, #8]
 8007d80:	2200      	movs	r2, #0
 8007d82:	9201      	str	r2, [sp, #4]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4603      	mov	r3, r0
 8007d88:	2280      	movs	r2, #128	; 0x80
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fbc8 	bl	8009520 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	7959      	ldrb	r1, [r3, #5]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007da4:	b292      	uxth	r2, r2
 8007da6:	9202      	str	r2, [sp, #8]
 8007da8:	2200      	movs	r2, #0
 8007daa:	9201      	str	r2, [sp, #4]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	4603      	mov	r3, r0
 8007db0:	2200      	movs	r2, #0
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f001 fbb4 	bl	8009520 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4619      	mov	r1, r3
 8007dd0:	f001 fcf2 	bl	80097b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dd4:	e16b      	b.n	80080ae <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f96e 	bl	80080b8 <USBH_HandleEnum>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f040 815d 	bne.w	80080a4 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d103      	bne.n	8007e04 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2208      	movs	r2, #8
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	e002      	b.n	8007e0a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2207      	movs	r2, #7
 8007e08:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2205      	movs	r2, #5
 8007e0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4619      	mov	r1, r3
 8007e22:	f001 fcc9 	bl	80097b8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e26:	e13d      	b.n	80080a4 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 813a 	beq.w	80080a8 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2208      	movs	r2, #8
 8007e44:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2205      	movs	r2, #5
 8007e4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	f001 fcab 	bl	80097b8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007e62:	e121      	b.n	80080a8 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fd00 	bl	8008874 <USBH_SetCfg>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d102      	bne.n	8007e80 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2209      	movs	r2, #9
 8007e7e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e94:	2200      	movs	r2, #0
 8007e96:	4619      	mov	r1, r3
 8007e98:	f001 fc8e 	bl	80097b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e9c:	e107      	b.n	80080ae <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d015      	beq.n	8007ed8 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007eac:	2101      	movs	r1, #1
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fd03 	bl	80088ba <USBH_SetFeature>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d103      	bne.n	8007ec8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	220a      	movs	r2, #10
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	e00a      	b.n	8007ede <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d106      	bne.n	8007ede <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	220a      	movs	r2, #10
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	e002      	b.n	8007ede <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	220a      	movs	r2, #10
 8007edc:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	f001 fc5f 	bl	80097b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007efa:	e0d8      	b.n	80080ae <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d03f      	beq.n	8007f86 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f0e:	2300      	movs	r3, #0
 8007f10:	73fb      	strb	r3, [r7, #15]
 8007f12:	e016      	b.n	8007f42 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007f14:	7bfa      	ldrb	r2, [r7, #15]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	32de      	adds	r2, #222	; 0xde
 8007f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1e:	791a      	ldrb	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d108      	bne.n	8007f3c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007f2a:	7bfa      	ldrb	r2, [r7, #15]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	32de      	adds	r2, #222	; 0xde
 8007f30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007f3a:	e005      	b.n	8007f48 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	73fb      	strb	r3, [r7, #15]
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0e5      	beq.n	8007f14 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d016      	beq.n	8007f80 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	4798      	blx	r3
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d109      	bne.n	8007f78 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2206      	movs	r2, #6
 8007f68:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f70:	2103      	movs	r1, #3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4798      	blx	r3
 8007f76:	e006      	b.n	8007f86 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	220d      	movs	r2, #13
 8007f7c:	701a      	strb	r2, [r3, #0]
 8007f7e:	e002      	b.n	8007f86 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	220d      	movs	r2, #13
 8007f84:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2205      	movs	r2, #5
 8007f8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	f001 fc0b 	bl	80097b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fa2:	e084      	b.n	80080ae <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d017      	beq.n	8007fde <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d103      	bne.n	8007fce <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	220b      	movs	r2, #11
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	e00a      	b.n	8007fe4 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d106      	bne.n	8007fe4 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	220d      	movs	r2, #13
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	e002      	b.n	8007fe4 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	220d      	movs	r2, #13
 8007fe2:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2205      	movs	r2, #5
 8007fe8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	f001 fbdc 	bl	80097b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008000:	e055      	b.n	80080ae <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008008:	2b00      	cmp	r3, #0
 800800a:	d04f      	beq.n	80080ac <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
      }
      break;
 8008018:	e048      	b.n	80080ac <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff fcec 	bl	8007a00 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008056:	2105      	movs	r1, #5
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b01      	cmp	r3, #1
 8008066:	d107      	bne.n	8008078 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff fda5 	bl	8007bc0 <USBH_Start>
 8008076:	e002      	b.n	800807e <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f003 fed3 	bl	800be24 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008092:	2200      	movs	r2, #0
 8008094:	4619      	mov	r1, r3
 8008096:	f001 fb8f 	bl	80097b8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800809a:	e008      	b.n	80080ae <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800809c:	bf00      	nop
 800809e:	e006      	b.n	80080ae <USBH_Process+0x4ce>
      break;
 80080a0:	bf00      	nop
 80080a2:	e004      	b.n	80080ae <USBH_Process+0x4ce>
      break;
 80080a4:	bf00      	nop
 80080a6:	e002      	b.n	80080ae <USBH_Process+0x4ce>
    break;
 80080a8:	bf00      	nop
 80080aa:	e000      	b.n	80080ae <USBH_Process+0x4ce>
      break;
 80080ac:	bf00      	nop
  }
  return USBH_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af04      	add	r7, sp, #16
 80080be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80080c0:	2301      	movs	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	2b07      	cmp	r3, #7
 80080ce:	f200 8208 	bhi.w	80084e2 <USBH_HandleEnum+0x42a>
 80080d2:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <USBH_HandleEnum+0x20>)
 80080d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d8:	080080f9 	.word	0x080080f9
 80080dc:	080081b7 	.word	0x080081b7
 80080e0:	08008221 	.word	0x08008221
 80080e4:	080082af 	.word	0x080082af
 80080e8:	08008319 	.word	0x08008319
 80080ec:	08008389 	.word	0x08008389
 80080f0:	08008425 	.word	0x08008425
 80080f4:	080084a3 	.word	0x080084a3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80080f8:	2108      	movs	r1, #8
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 faea 	bl	80086d4 <USBH_Get_DevDesc>
 8008100:	4603      	mov	r3, r0
 8008102:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d130      	bne.n	800816c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	7919      	ldrb	r1, [r3, #4]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800812e:	b292      	uxth	r2, r2
 8008130:	9202      	str	r2, [sp, #8]
 8008132:	2200      	movs	r2, #0
 8008134:	9201      	str	r2, [sp, #4]
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	4603      	mov	r3, r0
 800813a:	2280      	movs	r2, #128	; 0x80
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 f9ef 	bl	8009520 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	7959      	ldrb	r1, [r3, #5]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008156:	b292      	uxth	r2, r2
 8008158:	9202      	str	r2, [sp, #8]
 800815a:	2200      	movs	r2, #0
 800815c:	9201      	str	r2, [sp, #4]
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	4603      	mov	r3, r0
 8008162:	2200      	movs	r2, #0
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 f9db 	bl	8009520 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800816a:	e1bc      	b.n	80084e6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	2b03      	cmp	r3, #3
 8008170:	f040 81b9 	bne.w	80084e6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800817a:	3301      	adds	r3, #1
 800817c:	b2da      	uxtb	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800818a:	2b03      	cmp	r3, #3
 800818c:	d903      	bls.n	8008196 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	220d      	movs	r2, #13
 8008192:	701a      	strb	r2, [r3, #0]
      break;
 8008194:	e1a7      	b.n	80084e6 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	795b      	ldrb	r3, [r3, #5]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 fa0f 	bl	80095c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	791b      	ldrb	r3, [r3, #4]
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 fa09 	bl	80095c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
      break;
 80081b4:	e197      	b.n	80084e6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80081b6:	2112      	movs	r1, #18
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fa8b 	bl	80086d4 <USBH_Get_DevDesc>
 80081be:	4603      	mov	r3, r0
 80081c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d103      	bne.n	80081d0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081ce:	e18c      	b.n	80084ea <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	f040 8189 	bne.w	80084ea <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081de:	3301      	adds	r3, #1
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d903      	bls.n	80081fa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	220d      	movs	r2, #13
 80081f6:	701a      	strb	r2, [r3, #0]
      break;
 80081f8:	e177      	b.n	80084ea <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	795b      	ldrb	r3, [r3, #5]
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 f9dd 	bl	80095c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	791b      	ldrb	r3, [r3, #4]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 f9d7 	bl	80095c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	701a      	strb	r2, [r3, #0]
      break;
 800821e:	e164      	b.n	80084ea <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008220:	2101      	movs	r1, #1
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fb02 	bl	800882c <USBH_SetAddress>
 8008228:	4603      	mov	r3, r0
 800822a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d132      	bne.n	8008298 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008232:	2002      	movs	r0, #2
 8008234:	f003 ff5a 	bl	800c0ec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2203      	movs	r2, #3
 8008244:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	7919      	ldrb	r1, [r3, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800825a:	b292      	uxth	r2, r2
 800825c:	9202      	str	r2, [sp, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	9201      	str	r2, [sp, #4]
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	4603      	mov	r3, r0
 8008266:	2280      	movs	r2, #128	; 0x80
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f001 f959 	bl	8009520 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	7959      	ldrb	r1, [r3, #5]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008282:	b292      	uxth	r2, r2
 8008284:	9202      	str	r2, [sp, #8]
 8008286:	2200      	movs	r2, #0
 8008288:	9201      	str	r2, [sp, #4]
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	4603      	mov	r3, r0
 800828e:	2200      	movs	r2, #0
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 f945 	bl	8009520 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008296:	e12a      	b.n	80084ee <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	2b03      	cmp	r3, #3
 800829c:	f040 8127 	bne.w	80084ee <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	220d      	movs	r2, #13
 80082a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	705a      	strb	r2, [r3, #1]
      break;
 80082ac:	e11f      	b.n	80084ee <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80082ae:	2109      	movs	r1, #9
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fa37 	bl	8008724 <USBH_Get_CfgDesc>
 80082b6:	4603      	mov	r3, r0
 80082b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d103      	bne.n	80082c8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2204      	movs	r2, #4
 80082c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082c6:	e114      	b.n	80084f2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	f040 8111 	bne.w	80084f2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082d6:	3301      	adds	r3, #1
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d903      	bls.n	80082f2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	220d      	movs	r2, #13
 80082ee:	701a      	strb	r2, [r3, #0]
      break;
 80082f0:	e0ff      	b.n	80084f2 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	795b      	ldrb	r3, [r3, #5]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 f961 	bl	80095c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	791b      	ldrb	r3, [r3, #4]
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 f95b 	bl	80095c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	701a      	strb	r2, [r3, #0]
      break;
 8008316:	e0ec      	b.n	80084f2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f9ff 	bl	8008724 <USBH_Get_CfgDesc>
 8008326:	4603      	mov	r3, r0
 8008328:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d103      	bne.n	8008338 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2205      	movs	r2, #5
 8008334:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008336:	e0de      	b.n	80084f6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b03      	cmp	r3, #3
 800833c:	f040 80db 	bne.w	80084f6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008346:	3301      	adds	r3, #1
 8008348:	b2da      	uxtb	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008356:	2b03      	cmp	r3, #3
 8008358:	d903      	bls.n	8008362 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	220d      	movs	r2, #13
 800835e:	701a      	strb	r2, [r3, #0]
      break;
 8008360:	e0c9      	b.n	80084f6 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	795b      	ldrb	r3, [r3, #5]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 f929 	bl	80095c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	791b      	ldrb	r3, [r3, #4]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 f923 	bl	80095c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	701a      	strb	r2, [r3, #0]
      break;
 8008386:	e0b6      	b.n	80084f6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800838e:	2b00      	cmp	r3, #0
 8008390:	d036      	beq.n	8008400 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800839e:	23ff      	movs	r3, #255	; 0xff
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f9e3 	bl	800876c <USBH_Get_StringDesc>
 80083a6:	4603      	mov	r3, r0
 80083a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d111      	bne.n	80083d4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2206      	movs	r2, #6
 80083b4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2205      	movs	r2, #5
 80083ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083ca:	2200      	movs	r2, #0
 80083cc:	4619      	mov	r1, r3
 80083ce:	f001 f9f3 	bl	80097b8 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80083d2:	e092      	b.n	80084fa <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	f040 808f 	bne.w	80084fa <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2206      	movs	r2, #6
 80083e0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2205      	movs	r2, #5
 80083e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083f6:	2200      	movs	r2, #0
 80083f8:	4619      	mov	r1, r3
 80083fa:	f001 f9dd 	bl	80097b8 <osMessagePut>
      break;
 80083fe:	e07c      	b.n	80084fa <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2206      	movs	r2, #6
 8008404:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2205      	movs	r2, #5
 800840a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800841a:	2200      	movs	r2, #0
 800841c:	4619      	mov	r1, r3
 800841e:	f001 f9cb 	bl	80097b8 <osMessagePut>
      break;
 8008422:	e06a      	b.n	80084fa <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800842a:	2b00      	cmp	r3, #0
 800842c:	d027      	beq.n	800847e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800843a:	23ff      	movs	r3, #255	; 0xff
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f995 	bl	800876c <USBH_Get_StringDesc>
 8008442:	4603      	mov	r3, r0
 8008444:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2207      	movs	r2, #7
 8008450:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008452:	e054      	b.n	80084fe <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008454:	7bbb      	ldrb	r3, [r7, #14]
 8008456:	2b03      	cmp	r3, #3
 8008458:	d151      	bne.n	80084fe <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2207      	movs	r2, #7
 800845e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2205      	movs	r2, #5
 8008464:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008474:	2200      	movs	r2, #0
 8008476:	4619      	mov	r1, r3
 8008478:	f001 f99e 	bl	80097b8 <osMessagePut>
      break;
 800847c:	e03f      	b.n	80084fe <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2207      	movs	r2, #7
 8008482:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2205      	movs	r2, #5
 8008488:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008498:	2200      	movs	r2, #0
 800849a:	4619      	mov	r1, r3
 800849c:	f001 f98c 	bl	80097b8 <osMessagePut>
      break;
 80084a0:	e02d      	b.n	80084fe <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d017      	beq.n	80084dc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084b8:	23ff      	movs	r3, #255	; 0xff
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f956 	bl	800876c <USBH_Get_StringDesc>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80084ce:	e018      	b.n	8008502 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d115      	bne.n	8008502 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]
      break;
 80084da:	e012      	b.n	8008502 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]
      break;
 80084e0:	e00f      	b.n	8008502 <USBH_HandleEnum+0x44a>

    default:
      break;
 80084e2:	bf00      	nop
 80084e4:	e00e      	b.n	8008504 <USBH_HandleEnum+0x44c>
      break;
 80084e6:	bf00      	nop
 80084e8:	e00c      	b.n	8008504 <USBH_HandleEnum+0x44c>
      break;
 80084ea:	bf00      	nop
 80084ec:	e00a      	b.n	8008504 <USBH_HandleEnum+0x44c>
      break;
 80084ee:	bf00      	nop
 80084f0:	e008      	b.n	8008504 <USBH_HandleEnum+0x44c>
      break;
 80084f2:	bf00      	nop
 80084f4:	e006      	b.n	8008504 <USBH_HandleEnum+0x44c>
      break;
 80084f6:	bf00      	nop
 80084f8:	e004      	b.n	8008504 <USBH_HandleEnum+0x44c>
      break;
 80084fa:	bf00      	nop
 80084fc:	e002      	b.n	8008504 <USBH_HandleEnum+0x44c>
      break;
 80084fe:	bf00      	nop
 8008500:	e000      	b.n	8008504 <USBH_HandleEnum+0x44c>
      break;
 8008502:	bf00      	nop
  }
  return Status;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop

08008510 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008522:	bf00      	nop
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f804 	bl	8008552 <USBH_HandleSof>
}
 800854a:	bf00      	nop
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b082      	sub	sp, #8
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b0b      	cmp	r3, #11
 8008562:	d10a      	bne.n	800857a <USBH_HandleSof+0x28>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d005      	beq.n	800857a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	4798      	blx	r3
  }
}
 800857a:	bf00      	nop
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085a6:	2200      	movs	r2, #0
 80085a8:	4619      	mov	r1, r3
 80085aa:	f001 f905 	bl	80097b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80085ae:	bf00      	nop
}
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80085c6:	bf00      	nop
}
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b082      	sub	sp, #8
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008606:	2200      	movs	r2, #0
 8008608:	4619      	mov	r1, r3
 800860a:	f001 f8d5 	bl	80097b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f003 fc0e 	bl	800be5a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	791b      	ldrb	r3, [r3, #4]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 ffbb 	bl	80095c0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	795b      	ldrb	r3, [r3, #5]
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 ffb5 	bl	80095c0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800866a:	2200      	movs	r2, #0
 800866c:	4619      	mov	r1, r3
 800866e:	f001 f8a3 	bl	80097b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800868a:	f107 030c 	add.w	r3, r7, #12
 800868e:	f04f 32ff 	mov.w	r2, #4294967295
 8008692:	4618      	mov	r0, r3
 8008694:	f001 f8d0 	bl	8009838 <osMessageGet>
    if (event.status == osEventMessage)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b10      	cmp	r3, #16
 800869c:	d1f2      	bne.n	8008684 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7ff fa9e 	bl	8007be0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80086a4:	e7ee      	b.n	8008684 <USBH_Process_OS+0x8>

080086a6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b082      	sub	sp, #8
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80086c2:	2200      	movs	r2, #0
 80086c4:	4619      	mov	r1, r3
 80086c6:	f001 f877 	bl	80097b8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af02      	add	r7, sp, #8
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	4613      	mov	r3, r2
 80086ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086f2:	2100      	movs	r1, #0
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f864 	bl	80087c2 <USBH_GetDescriptor>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10a      	bne.n	800871a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f203 3026 	addw	r0, r3, #806	; 0x326
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	b292      	uxth	r2, r2
 8008714:	4619      	mov	r1, r3
 8008716:	f000 f918 	bl	800894a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af02      	add	r7, sp, #8
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	331c      	adds	r3, #28
 8008734:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008736:	887b      	ldrh	r3, [r7, #2]
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008740:	2100      	movs	r1, #0
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f83d 	bl	80087c2 <USBH_GetDescriptor>
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d107      	bne.n	8008762 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008752:	887b      	ldrh	r3, [r7, #2]
 8008754:	461a      	mov	r2, r3
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f987 	bl	8008a6c <USBH_ParseCfgDesc>
 800875e:	4603      	mov	r3, r0
 8008760:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b088      	sub	sp, #32
 8008770:	af02      	add	r7, sp, #8
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	607a      	str	r2, [r7, #4]
 8008776:	461a      	mov	r2, r3
 8008778:	460b      	mov	r3, r1
 800877a:	72fb      	strb	r3, [r7, #11]
 800877c:	4613      	mov	r3, r2
 800877e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	b29b      	uxth	r3, r3
 8008784:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008788:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008790:	893b      	ldrh	r3, [r7, #8]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	460b      	mov	r3, r1
 8008796:	2100      	movs	r1, #0
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 f812 	bl	80087c2 <USBH_GetDescriptor>
 800879e:	4603      	mov	r3, r0
 80087a0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80087a2:	7dfb      	ldrb	r3, [r7, #23]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d107      	bne.n	80087b8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80087ae:	893a      	ldrh	r2, [r7, #8]
 80087b0:	6879      	ldr	r1, [r7, #4]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fb24 	bl	8008e00 <USBH_ParseStringDesc>
  }

  return status;
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	607b      	str	r3, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	72fb      	strb	r3, [r7, #11]
 80087d0:	4613      	mov	r3, r2
 80087d2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	789b      	ldrb	r3, [r3, #2]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d11c      	bne.n	8008816 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2206      	movs	r2, #6
 80087ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	893a      	ldrh	r2, [r7, #8]
 80087f2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80087f4:	893b      	ldrh	r3, [r7, #8]
 80087f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80087fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087fe:	d104      	bne.n	800880a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f240 4209 	movw	r2, #1033	; 0x409
 8008806:	829a      	strh	r2, [r3, #20]
 8008808:	e002      	b.n	8008810 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	8b3a      	ldrh	r2, [r7, #24]
 8008814:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008816:	8b3b      	ldrh	r3, [r7, #24]
 8008818:	461a      	mov	r2, r3
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 fb3d 	bl	8008e9c <USBH_CtlReq>
 8008822:	4603      	mov	r3, r0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	789b      	ldrb	r3, [r3, #2]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d10f      	bne.n	8008860 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2205      	movs	r2, #5
 800884a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800884c:	78fb      	ldrb	r3, [r7, #3]
 800884e:	b29a      	uxth	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008860:	2200      	movs	r2, #0
 8008862:	2100      	movs	r1, #0
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fb19 	bl	8008e9c <USBH_CtlReq>
 800886a:	4603      	mov	r3, r0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	789b      	ldrb	r3, [r3, #2]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d10e      	bne.n	80088a6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2209      	movs	r2, #9
 8008892:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	887a      	ldrh	r2, [r7, #2]
 8008898:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80088a6:	2200      	movs	r2, #0
 80088a8:	2100      	movs	r1, #0
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 faf6 	bl	8008e9c <USBH_CtlReq>
 80088b0:	4603      	mov	r3, r0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	789b      	ldrb	r3, [r3, #2]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d10f      	bne.n	80088ee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2203      	movs	r2, #3
 80088d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	b29a      	uxth	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80088ee:	2200      	movs	r2, #0
 80088f0:	2100      	movs	r1, #0
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fad2 	bl	8008e9c <USBH_CtlReq>
 80088f8:	4603      	mov	r3, r0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	460b      	mov	r3, r1
 800890c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	789b      	ldrb	r3, [r3, #2]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d10f      	bne.n	8008936 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2202      	movs	r2, #2
 800891a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	b29a      	uxth	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008936:	2200      	movs	r2, #0
 8008938:	2100      	movs	r1, #0
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 faae 	bl	8008e9c <USBH_CtlReq>
 8008940:	4603      	mov	r3, r0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800894a:	b480      	push	{r7}
 800894c:	b085      	sub	sp, #20
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	4613      	mov	r3, r2
 8008956:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	781a      	ldrb	r2, [r3, #0]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	785a      	ldrb	r2, [r3, #1]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	3302      	adds	r3, #2
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	b29a      	uxth	r2, r3
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	3303      	adds	r3, #3
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	b29b      	uxth	r3, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	b29a      	uxth	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	791a      	ldrb	r2, [r3, #4]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	795a      	ldrb	r2, [r3, #5]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	799a      	ldrb	r2, [r3, #6]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	79da      	ldrb	r2, [r3, #7]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	79db      	ldrb	r3, [r3, #7]
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	dc11      	bgt.n	80089d0 <USBH_ParseDevDesc+0x86>
 80089ac:	2b08      	cmp	r3, #8
 80089ae:	db16      	blt.n	80089de <USBH_ParseDevDesc+0x94>
 80089b0:	3b08      	subs	r3, #8
 80089b2:	2201      	movs	r2, #1
 80089b4:	fa02 f303 	lsl.w	r3, r2, r3
 80089b8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80089bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	bf14      	ite	ne
 80089c4:	2301      	movne	r3, #1
 80089c6:	2300      	moveq	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d102      	bne.n	80089d4 <USBH_ParseDevDesc+0x8a>
 80089ce:	e006      	b.n	80089de <USBH_ParseDevDesc+0x94>
 80089d0:	2b40      	cmp	r3, #64	; 0x40
 80089d2:	d104      	bne.n	80089de <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	79da      	ldrb	r2, [r3, #7]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	71da      	strb	r2, [r3, #7]
      break;
 80089dc:	e003      	b.n	80089e6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2240      	movs	r2, #64	; 0x40
 80089e2:	71da      	strb	r2, [r3, #7]
      break;
 80089e4:	bf00      	nop
  }

  if (length > 8U)
 80089e6:	88fb      	ldrh	r3, [r7, #6]
 80089e8:	2b08      	cmp	r3, #8
 80089ea:	d939      	bls.n	8008a60 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	3308      	adds	r3, #8
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	3309      	adds	r3, #9
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	021b      	lsls	r3, r3, #8
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	4313      	orrs	r3, r2
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	330a      	adds	r3, #10
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	330b      	adds	r3, #11
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	021b      	lsls	r3, r3, #8
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	330c      	adds	r3, #12
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	330d      	adds	r3, #13
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	7b9a      	ldrb	r2, [r3, #14]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	7bda      	ldrb	r2, [r3, #15]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	7c1a      	ldrb	r2, [r3, #16]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	7c5a      	ldrb	r2, [r3, #17]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	745a      	strb	r2, [r3, #17]
  }
}
 8008a60:	bf00      	nop
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08c      	sub	sp, #48	; 0x30
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4613      	mov	r3, r2
 8008a78:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008a80:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	781a      	ldrb	r2, [r3, #0]
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	785a      	ldrb	r2, [r3, #1]
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	3302      	adds	r3, #2
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	3303      	adds	r3, #3
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	021b      	lsls	r3, r3, #8
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ac8:	bf28      	it	cs
 8008aca:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	791a      	ldrb	r2, [r3, #4]
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	795a      	ldrb	r2, [r3, #5]
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	799a      	ldrb	r2, [r3, #6]
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	79da      	ldrb	r2, [r3, #7]
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	7a1a      	ldrb	r2, [r3, #8]
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b09      	cmp	r3, #9
 8008b02:	d002      	beq.n	8008b0a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	2209      	movs	r2, #9
 8008b08:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	2b09      	cmp	r3, #9
 8008b0e:	f240 809d 	bls.w	8008c4c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b12:	2309      	movs	r3, #9
 8008b14:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b1a:	e081      	b.n	8008c20 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b1c:	f107 0316 	add.w	r3, r7, #22
 8008b20:	4619      	mov	r1, r3
 8008b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b24:	f000 f99f 	bl	8008e66 <USBH_GetNextDesc>
 8008b28:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2c:	785b      	ldrb	r3, [r3, #1]
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d176      	bne.n	8008c20 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	2b09      	cmp	r3, #9
 8008b38:	d002      	beq.n	8008b40 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3c:	2209      	movs	r2, #9
 8008b3e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b44:	221a      	movs	r2, #26
 8008b46:	fb02 f303 	mul.w	r3, r2, r3
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	6a3a      	ldr	r2, [r7, #32]
 8008b4e:	4413      	add	r3, r2
 8008b50:	3302      	adds	r3, #2
 8008b52:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b56:	69f8      	ldr	r0, [r7, #28]
 8008b58:	f000 f87e 	bl	8008c58 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b66:	e043      	b.n	8008bf0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b68:	f107 0316 	add.w	r3, r7, #22
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b70:	f000 f979 	bl	8008e66 <USBH_GetNextDesc>
 8008b74:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	785b      	ldrb	r3, [r3, #1]
 8008b7a:	2b05      	cmp	r3, #5
 8008b7c:	d138      	bne.n	8008bf0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	795b      	ldrb	r3, [r3, #5]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d10f      	bne.n	8008ba6 <USBH_ParseCfgDesc+0x13a>
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	799b      	ldrb	r3, [r3, #6]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d10b      	bne.n	8008ba6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	79db      	ldrb	r3, [r3, #7]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10f      	bne.n	8008bb6 <USBH_ParseCfgDesc+0x14a>
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	2b09      	cmp	r3, #9
 8008b9c:	d00b      	beq.n	8008bb6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	2209      	movs	r2, #9
 8008ba2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ba4:	e007      	b.n	8008bb6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	2b07      	cmp	r3, #7
 8008bac:	d004      	beq.n	8008bb8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	2207      	movs	r2, #7
 8008bb2:	701a      	strb	r2, [r3, #0]
 8008bb4:	e000      	b.n	8008bb8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008bb6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bbc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008bc0:	3201      	adds	r2, #1
 8008bc2:	00d2      	lsls	r2, r2, #3
 8008bc4:	211a      	movs	r1, #26
 8008bc6:	fb01 f303 	mul.w	r3, r1, r3
 8008bca:	4413      	add	r3, r2
 8008bcc:	3308      	adds	r3, #8
 8008bce:	6a3a      	ldr	r2, [r7, #32]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bd8:	69b9      	ldr	r1, [r7, #24]
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 f86b 	bl	8008cb6 <USBH_ParseEPDesc>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008be6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008bea:	3301      	adds	r3, #1
 8008bec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	791b      	ldrb	r3, [r3, #4]
 8008bf4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d204      	bcs.n	8008c06 <USBH_ParseCfgDesc+0x19a>
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	885a      	ldrh	r2, [r3, #2]
 8008c00:	8afb      	ldrh	r3, [r7, #22]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d8b0      	bhi.n	8008b68 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	791b      	ldrb	r3, [r3, #4]
 8008c0a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d201      	bcs.n	8008c16 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e01c      	b.n	8008c50 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d805      	bhi.n	8008c34 <USBH_ParseCfgDesc+0x1c8>
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	885a      	ldrh	r2, [r3, #2]
 8008c2c:	8afb      	ldrh	r3, [r7, #22]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	f63f af74 	bhi.w	8008b1c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	791b      	ldrb	r3, [r3, #4]
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	bf28      	it	cs
 8008c3c:	2302      	movcs	r3, #2
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d201      	bcs.n	8008c4c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e001      	b.n	8008c50 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3730      	adds	r7, #48	; 0x30
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781a      	ldrb	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	785a      	ldrb	r2, [r3, #1]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	789a      	ldrb	r2, [r3, #2]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	78da      	ldrb	r2, [r3, #3]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	791a      	ldrb	r2, [r3, #4]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	795a      	ldrb	r2, [r3, #5]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	799a      	ldrb	r2, [r3, #6]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	79da      	ldrb	r2, [r3, #7]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	7a1a      	ldrb	r2, [r3, #8]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	721a      	strb	r2, [r3, #8]
}
 8008caa:	bf00      	nop
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b087      	sub	sp, #28
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	60f8      	str	r0, [r7, #12]
 8008cbe:	60b9      	str	r1, [r7, #8]
 8008cc0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	785a      	ldrb	r2, [r3, #1]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	789a      	ldrb	r2, [r3, #2]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	78da      	ldrb	r2, [r3, #3]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	3305      	adds	r3, #5
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	799a      	ldrb	r2, [r3, #6]
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	889b      	ldrh	r3, [r3, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d102      	bne.n	8008d18 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008d12:	2303      	movs	r3, #3
 8008d14:	75fb      	strb	r3, [r7, #23]
 8008d16:	e033      	b.n	8008d80 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	889b      	ldrh	r3, [r3, #4]
 8008d1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d20:	f023 0307 	bic.w	r3, r3, #7
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	889b      	ldrh	r3, [r3, #4]
 8008d2e:	b21a      	sxth	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3304      	adds	r3, #4
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	b299      	uxth	r1, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3305      	adds	r3, #5
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	021b      	lsls	r3, r3, #8
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	430b      	orrs	r3, r1
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d110      	bne.n	8008d72 <USBH_ParseEPDesc+0xbc>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3304      	adds	r3, #4
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	b299      	uxth	r1, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3305      	adds	r3, #5
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	021b      	lsls	r3, r3, #8
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	430b      	orrs	r3, r1
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	b21b      	sxth	r3, r3
 8008d6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d6e:	b21b      	sxth	r3, r3
 8008d70:	e001      	b.n	8008d76 <USBH_ParseEPDesc+0xc0>
 8008d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d76:	4313      	orrs	r3, r2
 8008d78:	b21b      	sxth	r3, r3
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d116      	bne.n	8008db8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	78db      	ldrb	r3, [r3, #3]
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d005      	beq.n	8008da2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	78db      	ldrb	r3, [r3, #3]
 8008d9a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	d127      	bne.n	8008df2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	799b      	ldrb	r3, [r3, #6]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <USBH_ParseEPDesc+0xfc>
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	799b      	ldrb	r3, [r3, #6]
 8008dae:	2b10      	cmp	r3, #16
 8008db0:	d91f      	bls.n	8008df2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008db2:	2303      	movs	r3, #3
 8008db4:	75fb      	strb	r3, [r7, #23]
 8008db6:	e01c      	b.n	8008df2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	78db      	ldrb	r3, [r3, #3]
 8008dbc:	f003 0303 	and.w	r3, r3, #3
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d10a      	bne.n	8008dda <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	799b      	ldrb	r3, [r3, #6]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <USBH_ParseEPDesc+0x11e>
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	799b      	ldrb	r3, [r3, #6]
 8008dd0:	2b10      	cmp	r3, #16
 8008dd2:	d90e      	bls.n	8008df2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	75fb      	strb	r3, [r7, #23]
 8008dd8:	e00b      	b.n	8008df2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	78db      	ldrb	r3, [r3, #3]
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d105      	bne.n	8008df2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	799b      	ldrb	r3, [r3, #6]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008dee:	2303      	movs	r3, #3
 8008df0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	371c      	adds	r7, #28
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	3301      	adds	r3, #1
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	d120      	bne.n	8008e5a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	1e9a      	subs	r2, r3, #2
 8008e1e:	88fb      	ldrh	r3, [r7, #6]
 8008e20:	4293      	cmp	r3, r2
 8008e22:	bf28      	it	cs
 8008e24:	4613      	movcs	r3, r2
 8008e26:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3302      	adds	r3, #2
 8008e2c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008e2e:	2300      	movs	r3, #0
 8008e30:	82fb      	strh	r3, [r7, #22]
 8008e32:	e00b      	b.n	8008e4c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008e34:	8afb      	ldrh	r3, [r7, #22]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4413      	add	r3, r2
 8008e3a:	781a      	ldrb	r2, [r3, #0]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	3301      	adds	r3, #1
 8008e44:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e46:	8afb      	ldrh	r3, [r7, #22]
 8008e48:	3302      	adds	r3, #2
 8008e4a:	82fb      	strh	r3, [r7, #22]
 8008e4c:	8afa      	ldrh	r2, [r7, #22]
 8008e4e:	8abb      	ldrh	r3, [r7, #20]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d3ef      	bcc.n	8008e34 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2200      	movs	r2, #0
 8008e58:	701a      	strb	r2, [r3, #0]
  }
}
 8008e5a:	bf00      	nop
 8008e5c:	371c      	adds	r7, #28
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	881a      	ldrh	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	4413      	add	r3, r2
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	789b      	ldrb	r3, [r3, #2]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d002      	beq.n	8008ebc <USBH_CtlReq+0x20>
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d01d      	beq.n	8008ef6 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008eba:	e043      	b.n	8008f44 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	88fa      	ldrh	r2, [r7, #6]
 8008ec6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2203      	movs	r2, #3
 8008edc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008eec:	2200      	movs	r2, #0
 8008eee:	4619      	mov	r1, r3
 8008ef0:	f000 fc62 	bl	80097b8 <osMessagePut>
      break;
 8008ef4:	e026      	b.n	8008f44 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 f82a 	bl	8008f50 <USBH_HandleControl>
 8008efc:	4603      	mov	r3, r0
 8008efe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <USBH_CtlReq+0x70>
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d106      	bne.n	8008f1a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	761a      	strb	r2, [r3, #24]
 8008f18:	e005      	b.n	8008f26 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d102      	bne.n	8008f26 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2201      	movs	r2, #1
 8008f24:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2203      	movs	r2, #3
 8008f2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	f000 fc3b 	bl	80097b8 <osMessagePut>
      break;
 8008f42:	bf00      	nop
  }
  return status;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
	...

08008f50 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7e1b      	ldrb	r3, [r3, #24]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	2b0a      	cmp	r3, #10
 8008f68:	f200 8229 	bhi.w	80093be <USBH_HandleControl+0x46e>
 8008f6c:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <USBH_HandleControl+0x24>)
 8008f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f72:	bf00      	nop
 8008f74:	08008fa1 	.word	0x08008fa1
 8008f78:	08008fbb 	.word	0x08008fbb
 8008f7c:	0800905d 	.word	0x0800905d
 8008f80:	08009083 	.word	0x08009083
 8008f84:	0800910f 	.word	0x0800910f
 8008f88:	08009139 	.word	0x08009139
 8008f8c:	080091fb 	.word	0x080091fb
 8008f90:	0800921d 	.word	0x0800921d
 8008f94:	080092af 	.word	0x080092af
 8008f98:	080092d5 	.word	0x080092d5
 8008f9c:	08009367 	.word	0x08009367
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f103 0110 	add.w	r1, r3, #16
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	795b      	ldrb	r3, [r3, #5]
 8008faa:	461a      	mov	r2, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fa17 	bl	80093e0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	761a      	strb	r2, [r3, #24]
      break;
 8008fb8:	e20c      	b.n	80093d4 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	795b      	ldrb	r3, [r3, #5]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f003 f839 	bl	800c038 <USBH_LL_GetURBState>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d12c      	bne.n	800902a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	7c1b      	ldrb	r3, [r3, #16]
 8008fd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fd8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	8adb      	ldrh	r3, [r3, #22]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00a      	beq.n	8008ff8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008fe2:	7b7b      	ldrb	r3, [r7, #13]
 8008fe4:	2b80      	cmp	r3, #128	; 0x80
 8008fe6:	d103      	bne.n	8008ff0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2203      	movs	r2, #3
 8008fec:	761a      	strb	r2, [r3, #24]
 8008fee:	e00d      	b.n	800900c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2205      	movs	r2, #5
 8008ff4:	761a      	strb	r2, [r3, #24]
 8008ff6:	e009      	b.n	800900c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008ff8:	7b7b      	ldrb	r3, [r7, #13]
 8008ffa:	2b80      	cmp	r3, #128	; 0x80
 8008ffc:	d103      	bne.n	8009006 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2209      	movs	r2, #9
 8009002:	761a      	strb	r2, [r3, #24]
 8009004:	e002      	b.n	800900c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2207      	movs	r2, #7
 800900a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2203      	movs	r2, #3
 8009010:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009020:	2200      	movs	r2, #0
 8009022:	4619      	mov	r1, r3
 8009024:	f000 fbc8 	bl	80097b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009028:	e1cb      	b.n	80093c2 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	2b04      	cmp	r3, #4
 800902e:	d003      	beq.n	8009038 <USBH_HandleControl+0xe8>
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	2b02      	cmp	r3, #2
 8009034:	f040 81c5 	bne.w	80093c2 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	220b      	movs	r2, #11
 800903c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2203      	movs	r2, #3
 8009042:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009052:	2200      	movs	r2, #0
 8009054:	4619      	mov	r1, r3
 8009056:	f000 fbaf 	bl	80097b8 <osMessagePut>
      break;
 800905a:	e1b2      	b.n	80093c2 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009062:	b29a      	uxth	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6899      	ldr	r1, [r3, #8]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	899a      	ldrh	r2, [r3, #12]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	791b      	ldrb	r3, [r3, #4]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f9f2 	bl	800945e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2204      	movs	r2, #4
 800907e:	761a      	strb	r2, [r3, #24]
      break;
 8009080:	e1a8      	b.n	80093d4 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	791b      	ldrb	r3, [r3, #4]
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f002 ffd5 	bl	800c038 <USBH_LL_GetURBState>
 800908e:	4603      	mov	r3, r0
 8009090:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d110      	bne.n	80090ba <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2209      	movs	r2, #9
 800909c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2203      	movs	r2, #3
 80090a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090b2:	2200      	movs	r2, #0
 80090b4:	4619      	mov	r1, r3
 80090b6:	f000 fb7f 	bl	80097b8 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b05      	cmp	r3, #5
 80090be:	d110      	bne.n	80090e2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80090c0:	2303      	movs	r3, #3
 80090c2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2203      	movs	r2, #3
 80090c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090d8:	2200      	movs	r2, #0
 80090da:	4619      	mov	r1, r3
 80090dc:	f000 fb6c 	bl	80097b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090e0:	e171      	b.n	80093c6 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	2b04      	cmp	r3, #4
 80090e6:	f040 816e 	bne.w	80093c6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	220b      	movs	r2, #11
 80090ee:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2203      	movs	r2, #3
 80090f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009104:	2200      	movs	r2, #0
 8009106:	4619      	mov	r1, r3
 8009108:	f000 fb56 	bl	80097b8 <osMessagePut>
      break;
 800910c:	e15b      	b.n	80093c6 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6899      	ldr	r1, [r3, #8]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	899a      	ldrh	r2, [r3, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	795b      	ldrb	r3, [r3, #5]
 800911a:	2001      	movs	r0, #1
 800911c:	9000      	str	r0, [sp, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f978 	bl	8009414 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800912a:	b29a      	uxth	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2206      	movs	r2, #6
 8009134:	761a      	strb	r2, [r3, #24]
      break;
 8009136:	e14d      	b.n	80093d4 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	795b      	ldrb	r3, [r3, #5]
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f002 ff7a 	bl	800c038 <USBH_LL_GetURBState>
 8009144:	4603      	mov	r3, r0
 8009146:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d111      	bne.n	8009172 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2207      	movs	r2, #7
 8009152:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2203      	movs	r2, #3
 8009158:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009168:	2200      	movs	r2, #0
 800916a:	4619      	mov	r1, r3
 800916c:	f000 fb24 	bl	80097b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009170:	e12b      	b.n	80093ca <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009172:	7bbb      	ldrb	r3, [r7, #14]
 8009174:	2b05      	cmp	r3, #5
 8009176:	d113      	bne.n	80091a0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	220c      	movs	r2, #12
 800917c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800917e:	2303      	movs	r3, #3
 8009180:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2203      	movs	r2, #3
 8009186:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009196:	2200      	movs	r2, #0
 8009198:	4619      	mov	r1, r3
 800919a:	f000 fb0d 	bl	80097b8 <osMessagePut>
      break;
 800919e:	e114      	b.n	80093ca <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d111      	bne.n	80091ca <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2205      	movs	r2, #5
 80091aa:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2203      	movs	r2, #3
 80091b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091c0:	2200      	movs	r2, #0
 80091c2:	4619      	mov	r1, r3
 80091c4:	f000 faf8 	bl	80097b8 <osMessagePut>
      break;
 80091c8:	e0ff      	b.n	80093ca <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	f040 80fc 	bne.w	80093ca <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	220b      	movs	r2, #11
 80091d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80091d8:	2302      	movs	r3, #2
 80091da:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2203      	movs	r2, #3
 80091e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091f0:	2200      	movs	r2, #0
 80091f2:	4619      	mov	r1, r3
 80091f4:	f000 fae0 	bl	80097b8 <osMessagePut>
      break;
 80091f8:	e0e7      	b.n	80093ca <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	791b      	ldrb	r3, [r3, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	2100      	movs	r1, #0
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f92b 	bl	800945e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800920e:	b29a      	uxth	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2208      	movs	r2, #8
 8009218:	761a      	strb	r2, [r3, #24]

      break;
 800921a:	e0db      	b.n	80093d4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	791b      	ldrb	r3, [r3, #4]
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f002 ff08 	bl	800c038 <USBH_LL_GetURBState>
 8009228:	4603      	mov	r3, r0
 800922a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d113      	bne.n	800925a <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	220d      	movs	r2, #13
 8009236:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2203      	movs	r2, #3
 8009240:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009250:	2200      	movs	r2, #0
 8009252:	4619      	mov	r1, r3
 8009254:	f000 fab0 	bl	80097b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009258:	e0b9      	b.n	80093ce <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	2b04      	cmp	r3, #4
 800925e:	d111      	bne.n	8009284 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	220b      	movs	r2, #11
 8009264:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2203      	movs	r2, #3
 800926a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800927a:	2200      	movs	r2, #0
 800927c:	4619      	mov	r1, r3
 800927e:	f000 fa9b 	bl	80097b8 <osMessagePut>
      break;
 8009282:	e0a4      	b.n	80093ce <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8009284:	7bbb      	ldrb	r3, [r7, #14]
 8009286:	2b05      	cmp	r3, #5
 8009288:	f040 80a1 	bne.w	80093ce <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800928c:	2303      	movs	r3, #3
 800928e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2203      	movs	r2, #3
 8009294:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092a4:	2200      	movs	r2, #0
 80092a6:	4619      	mov	r1, r3
 80092a8:	f000 fa86 	bl	80097b8 <osMessagePut>
      break;
 80092ac:	e08f      	b.n	80093ce <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	795b      	ldrb	r3, [r3, #5]
 80092b2:	2201      	movs	r2, #1
 80092b4:	9200      	str	r2, [sp, #0]
 80092b6:	2200      	movs	r2, #0
 80092b8:	2100      	movs	r1, #0
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f8aa 	bl	8009414 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	220a      	movs	r2, #10
 80092d0:	761a      	strb	r2, [r3, #24]
      break;
 80092d2:	e07f      	b.n	80093d4 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	795b      	ldrb	r3, [r3, #5]
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f002 feac 	bl	800c038 <USBH_LL_GetURBState>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d113      	bne.n	8009312 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	220d      	movs	r2, #13
 80092f2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2203      	movs	r2, #3
 80092f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009308:	2200      	movs	r2, #0
 800930a:	4619      	mov	r1, r3
 800930c:	f000 fa54 	bl	80097b8 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009310:	e05f      	b.n	80093d2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	2b02      	cmp	r3, #2
 8009316:	d111      	bne.n	800933c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2209      	movs	r2, #9
 800931c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2203      	movs	r2, #3
 8009322:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009332:	2200      	movs	r2, #0
 8009334:	4619      	mov	r1, r3
 8009336:	f000 fa3f 	bl	80097b8 <osMessagePut>
      break;
 800933a:	e04a      	b.n	80093d2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800933c:	7bbb      	ldrb	r3, [r7, #14]
 800933e:	2b04      	cmp	r3, #4
 8009340:	d147      	bne.n	80093d2 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	220b      	movs	r2, #11
 8009346:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2203      	movs	r2, #3
 800934c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800935c:	2200      	movs	r2, #0
 800935e:	4619      	mov	r1, r3
 8009360:	f000 fa2a 	bl	80097b8 <osMessagePut>
      break;
 8009364:	e035      	b.n	80093d2 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	7e5b      	ldrb	r3, [r3, #25]
 800936a:	3301      	adds	r3, #1
 800936c:	b2da      	uxtb	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	765a      	strb	r2, [r3, #25]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	7e5b      	ldrb	r3, [r3, #25]
 8009376:	2b02      	cmp	r3, #2
 8009378:	d806      	bhi.n	8009388 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009386:	e025      	b.n	80093d4 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800938e:	2106      	movs	r1, #6
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	795b      	ldrb	r3, [r3, #5]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 f90d 	bl	80095c0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	791b      	ldrb	r3, [r3, #4]
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f907 	bl	80095c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80093b8:	2302      	movs	r3, #2
 80093ba:	73fb      	strb	r3, [r7, #15]
      break;
 80093bc:	e00a      	b.n	80093d4 <USBH_HandleControl+0x484>

    default:
      break;
 80093be:	bf00      	nop
 80093c0:	e008      	b.n	80093d4 <USBH_HandleControl+0x484>
      break;
 80093c2:	bf00      	nop
 80093c4:	e006      	b.n	80093d4 <USBH_HandleControl+0x484>
      break;
 80093c6:	bf00      	nop
 80093c8:	e004      	b.n	80093d4 <USBH_HandleControl+0x484>
      break;
 80093ca:	bf00      	nop
 80093cc:	e002      	b.n	80093d4 <USBH_HandleControl+0x484>
      break;
 80093ce:	bf00      	nop
 80093d0:	e000      	b.n	80093d4 <USBH_HandleControl+0x484>
      break;
 80093d2:	bf00      	nop
  }

  return status;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop

080093e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af04      	add	r7, sp, #16
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	4613      	mov	r3, r2
 80093ec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093ee:	79f9      	ldrb	r1, [r7, #7]
 80093f0:	2300      	movs	r3, #0
 80093f2:	9303      	str	r3, [sp, #12]
 80093f4:	2308      	movs	r3, #8
 80093f6:	9302      	str	r3, [sp, #8]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	9301      	str	r3, [sp, #4]
 80093fc:	2300      	movs	r3, #0
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	2300      	movs	r3, #0
 8009402:	2200      	movs	r2, #0
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f002 fde6 	bl	800bfd6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b088      	sub	sp, #32
 8009418:	af04      	add	r7, sp, #16
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4611      	mov	r1, r2
 8009420:	461a      	mov	r2, r3
 8009422:	460b      	mov	r3, r1
 8009424:	80fb      	strh	r3, [r7, #6]
 8009426:	4613      	mov	r3, r2
 8009428:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009438:	7979      	ldrb	r1, [r7, #5]
 800943a:	7e3b      	ldrb	r3, [r7, #24]
 800943c:	9303      	str	r3, [sp, #12]
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	9302      	str	r3, [sp, #8]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	2301      	movs	r3, #1
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	2300      	movs	r3, #0
 800944c:	2200      	movs	r2, #0
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f002 fdc1 	bl	800bfd6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b088      	sub	sp, #32
 8009462:	af04      	add	r7, sp, #16
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	4611      	mov	r1, r2
 800946a:	461a      	mov	r2, r3
 800946c:	460b      	mov	r3, r1
 800946e:	80fb      	strh	r3, [r7, #6]
 8009470:	4613      	mov	r3, r2
 8009472:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009474:	7979      	ldrb	r1, [r7, #5]
 8009476:	2300      	movs	r3, #0
 8009478:	9303      	str	r3, [sp, #12]
 800947a:	88fb      	ldrh	r3, [r7, #6]
 800947c:	9302      	str	r3, [sp, #8]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	2301      	movs	r3, #1
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	2300      	movs	r3, #0
 8009488:	2201      	movs	r2, #1
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f002 fda3 	bl	800bfd6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009490:	2300      	movs	r3, #0

}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b088      	sub	sp, #32
 800949e:	af04      	add	r7, sp, #16
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	4611      	mov	r1, r2
 80094a6:	461a      	mov	r2, r3
 80094a8:	460b      	mov	r3, r1
 80094aa:	80fb      	strh	r3, [r7, #6]
 80094ac:	4613      	mov	r3, r2
 80094ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094be:	7979      	ldrb	r1, [r7, #5]
 80094c0:	7e3b      	ldrb	r3, [r7, #24]
 80094c2:	9303      	str	r3, [sp, #12]
 80094c4:	88fb      	ldrh	r3, [r7, #6]
 80094c6:	9302      	str	r3, [sp, #8]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	9301      	str	r3, [sp, #4]
 80094cc:	2301      	movs	r3, #1
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	2302      	movs	r3, #2
 80094d2:	2200      	movs	r2, #0
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f002 fd7e 	bl	800bfd6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b088      	sub	sp, #32
 80094e8:	af04      	add	r7, sp, #16
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	4611      	mov	r1, r2
 80094f0:	461a      	mov	r2, r3
 80094f2:	460b      	mov	r3, r1
 80094f4:	80fb      	strh	r3, [r7, #6]
 80094f6:	4613      	mov	r3, r2
 80094f8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094fa:	7979      	ldrb	r1, [r7, #5]
 80094fc:	2300      	movs	r3, #0
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	88fb      	ldrh	r3, [r7, #6]
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	2301      	movs	r3, #1
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	2302      	movs	r3, #2
 800950e:	2201      	movs	r2, #1
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f002 fd60 	bl	800bfd6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af04      	add	r7, sp, #16
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	4608      	mov	r0, r1
 800952a:	4611      	mov	r1, r2
 800952c:	461a      	mov	r2, r3
 800952e:	4603      	mov	r3, r0
 8009530:	70fb      	strb	r3, [r7, #3]
 8009532:	460b      	mov	r3, r1
 8009534:	70bb      	strb	r3, [r7, #2]
 8009536:	4613      	mov	r3, r2
 8009538:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800953a:	7878      	ldrb	r0, [r7, #1]
 800953c:	78ba      	ldrb	r2, [r7, #2]
 800953e:	78f9      	ldrb	r1, [r7, #3]
 8009540:	8b3b      	ldrh	r3, [r7, #24]
 8009542:	9302      	str	r3, [sp, #8]
 8009544:	7d3b      	ldrb	r3, [r7, #20]
 8009546:	9301      	str	r3, [sp, #4]
 8009548:	7c3b      	ldrb	r3, [r7, #16]
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	4603      	mov	r3, r0
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f002 fcf3 	bl	800bf3a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	460b      	mov	r3, r1
 8009568:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	4619      	mov	r1, r3
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f002 fd12 	bl	800bf98 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	460b      	mov	r3, r1
 8009588:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f836 	bl	80095fc <USBH_GetFreePipe>
 8009590:	4603      	mov	r3, r0
 8009592:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009594:	89fb      	ldrh	r3, [r7, #14]
 8009596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800959a:	4293      	cmp	r3, r2
 800959c:	d00a      	beq.n	80095b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800959e:	78fa      	ldrb	r2, [r7, #3]
 80095a0:	89fb      	ldrh	r3, [r7, #14]
 80095a2:	f003 030f 	and.w	r3, r3, #15
 80095a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	33e0      	adds	r3, #224	; 0xe0
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80095b4:	89fb      	ldrh	r3, [r7, #14]
 80095b6:	b2db      	uxtb	r3, r3
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	2b0f      	cmp	r3, #15
 80095d0:	d80d      	bhi.n	80095ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80095d2:	78fb      	ldrb	r3, [r7, #3]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	33e0      	adds	r3, #224	; 0xe0
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	78fb      	ldrb	r3, [r7, #3]
 80095e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	33e0      	adds	r3, #224	; 0xe0
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
 800960c:	e00f      	b.n	800962e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800960e:	7bfb      	ldrb	r3, [r7, #15]
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	33e0      	adds	r3, #224	; 0xe0
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	b29b      	uxth	r3, r3
 8009626:	e007      	b.n	8009638 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	3301      	adds	r3, #1
 800962c:	73fb      	strb	r3, [r7, #15]
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	2b0f      	cmp	r3, #15
 8009632:	d9ec      	bls.n	800960e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009634:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009656:	2b84      	cmp	r3, #132	; 0x84
 8009658:	d005      	beq.n	8009666 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800965a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	4413      	add	r3, r2
 8009662:	3303      	adds	r3, #3
 8009664:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009666:	68fb      	ldr	r3, [r7, #12]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800967a:	f3ef 8305 	mrs	r3, IPSR
 800967e:	607b      	str	r3, [r7, #4]
  return(result);
 8009680:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009682:	2b00      	cmp	r3, #0
 8009684:	bf14      	ite	ne
 8009686:	2301      	movne	r3, #1
 8009688:	2300      	moveq	r3, #0
 800968a:	b2db      	uxtb	r3, r3
}
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800969c:	f001 f90a 	bl	800a8b4 <vTaskStartScheduler>
  
  return osOK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80096a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a8:	b089      	sub	sp, #36	; 0x24
 80096aa:	af04      	add	r7, sp, #16
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d020      	beq.n	80096fa <osThreadCreate+0x54>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01c      	beq.n	80096fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685c      	ldr	r4, [r3, #4]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681d      	ldr	r5, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	691e      	ldr	r6, [r3, #16]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff ffb6 	bl	8009644 <makeFreeRtosPriority>
 80096d8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096e2:	9202      	str	r2, [sp, #8]
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	9100      	str	r1, [sp, #0]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	4632      	mov	r2, r6
 80096ec:	4629      	mov	r1, r5
 80096ee:	4620      	mov	r0, r4
 80096f0:	f000 ff0e 	bl	800a510 <xTaskCreateStatic>
 80096f4:	4603      	mov	r3, r0
 80096f6:	60fb      	str	r3, [r7, #12]
 80096f8:	e01c      	b.n	8009734 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685c      	ldr	r4, [r3, #4]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009706:	b29e      	uxth	r6, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800970e:	4618      	mov	r0, r3
 8009710:	f7ff ff98 	bl	8009644 <makeFreeRtosPriority>
 8009714:	4602      	mov	r2, r0
 8009716:	f107 030c 	add.w	r3, r7, #12
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	9200      	str	r2, [sp, #0]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	4632      	mov	r2, r6
 8009722:	4629      	mov	r1, r5
 8009724:	4620      	mov	r0, r4
 8009726:	f000 ff50 	bl	800a5ca <xTaskCreate>
 800972a:	4603      	mov	r3, r0
 800972c:	2b01      	cmp	r3, #1
 800972e:	d001      	beq.n	8009734 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009730:	2300      	movs	r3, #0
 8009732:	e000      	b.n	8009736 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009734:	68fb      	ldr	r3, [r7, #12]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800973e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <osDelay+0x16>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	e000      	b.n	8009756 <osDelay+0x18>
 8009754:	2301      	movs	r3, #1
 8009756:	4618      	mov	r0, r3
 8009758:	f001 f878 	bl	800a84c <vTaskDelay>
  
  return osOK;
 800975c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009766:	b590      	push	{r4, r7, lr}
 8009768:	b085      	sub	sp, #20
 800976a:	af02      	add	r7, sp, #8
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d011      	beq.n	800979c <osMessageCreate+0x36>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00d      	beq.n	800979c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6859      	ldr	r1, [r3, #4]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689a      	ldr	r2, [r3, #8]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	2400      	movs	r4, #0
 8009792:	9400      	str	r4, [sp, #0]
 8009794:	f000 f9e0 	bl	8009b58 <xQueueGenericCreateStatic>
 8009798:	4603      	mov	r3, r0
 800979a:	e008      	b.n	80097ae <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6818      	ldr	r0, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	4619      	mov	r1, r3
 80097a8:	f000 fa4e 	bl	8009c48 <xQueueGenericCreate>
 80097ac:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd90      	pop	{r4, r7, pc}
	...

080097b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80097c4:	2300      	movs	r3, #0
 80097c6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <osMessagePut+0x1e>
    ticks = 1;
 80097d2:	2301      	movs	r3, #1
 80097d4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80097d6:	f7ff ff4d 	bl	8009674 <inHandlerMode>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d018      	beq.n	8009812 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80097e0:	f107 0210 	add.w	r2, r7, #16
 80097e4:	f107 0108 	add.w	r1, r7, #8
 80097e8:	2300      	movs	r3, #0
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f000 fb84 	bl	8009ef8 <xQueueGenericSendFromISR>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d001      	beq.n	80097fa <osMessagePut+0x42>
      return osErrorOS;
 80097f6:	23ff      	movs	r3, #255	; 0xff
 80097f8:	e018      	b.n	800982c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d014      	beq.n	800982a <osMessagePut+0x72>
 8009800:	4b0c      	ldr	r3, [pc, #48]	; (8009834 <osMessagePut+0x7c>)
 8009802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009806:	601a      	str	r2, [r3, #0]
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	e00b      	b.n	800982a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009812:	f107 0108 	add.w	r1, r7, #8
 8009816:	2300      	movs	r3, #0
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 fa6e 	bl	8009cfc <xQueueGenericSend>
 8009820:	4603      	mov	r3, r0
 8009822:	2b01      	cmp	r3, #1
 8009824:	d001      	beq.n	800982a <osMessagePut+0x72>
      return osErrorOS;
 8009826:	23ff      	movs	r3, #255	; 0xff
 8009828:	e000      	b.n	800982c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	e000ed04 	.word	0xe000ed04

08009838 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009838:	b590      	push	{r4, r7, lr}
 800983a:	b08b      	sub	sp, #44	; 0x2c
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009848:	2300      	movs	r3, #0
 800984a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10a      	bne.n	8009868 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009852:	2380      	movs	r3, #128	; 0x80
 8009854:	617b      	str	r3, [r7, #20]
    return event;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	461c      	mov	r4, r3
 800985a:	f107 0314 	add.w	r3, r7, #20
 800985e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009862:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009866:	e054      	b.n	8009912 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009868:	2300      	movs	r3, #0
 800986a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009876:	d103      	bne.n	8009880 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009878:	f04f 33ff 	mov.w	r3, #4294967295
 800987c:	627b      	str	r3, [r7, #36]	; 0x24
 800987e:	e009      	b.n	8009894 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d006      	beq.n	8009894 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <osMessageGet+0x5c>
      ticks = 1;
 8009890:	2301      	movs	r3, #1
 8009892:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009894:	f7ff feee 	bl	8009674 <inHandlerMode>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d01c      	beq.n	80098d8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800989e:	f107 0220 	add.w	r2, r7, #32
 80098a2:	f107 0314 	add.w	r3, r7, #20
 80098a6:	3304      	adds	r3, #4
 80098a8:	4619      	mov	r1, r3
 80098aa:	68b8      	ldr	r0, [r7, #8]
 80098ac:	f000 fca0 	bl	800a1f0 <xQueueReceiveFromISR>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d102      	bne.n	80098bc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80098b6:	2310      	movs	r3, #16
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	e001      	b.n	80098c0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80098bc:	2300      	movs	r3, #0
 80098be:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d01d      	beq.n	8009902 <osMessageGet+0xca>
 80098c6:	4b15      	ldr	r3, [pc, #84]	; (800991c <osMessageGet+0xe4>)
 80098c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	e014      	b.n	8009902 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80098d8:	f107 0314 	add.w	r3, r7, #20
 80098dc:	3304      	adds	r3, #4
 80098de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e0:	4619      	mov	r1, r3
 80098e2:	68b8      	ldr	r0, [r7, #8]
 80098e4:	f000 fba4 	bl	800a030 <xQueueReceive>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d102      	bne.n	80098f4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80098ee:	2310      	movs	r3, #16
 80098f0:	617b      	str	r3, [r7, #20]
 80098f2:	e006      	b.n	8009902 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <osMessageGet+0xc6>
 80098fa:	2300      	movs	r3, #0
 80098fc:	e000      	b.n	8009900 <osMessageGet+0xc8>
 80098fe:	2340      	movs	r3, #64	; 0x40
 8009900:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	461c      	mov	r4, r3
 8009906:	f107 0314 	add.w	r3, r7, #20
 800990a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800990e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	372c      	adds	r7, #44	; 0x2c
 8009916:	46bd      	mov	sp, r7
 8009918:	bd90      	pop	{r4, r7, pc}
 800991a:	bf00      	nop
 800991c:	e000ed04 	.word	0xe000ed04

08009920 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f103 0208 	add.w	r2, r3, #8
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f04f 32ff 	mov.w	r2, #4294967295
 8009938:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f103 0208 	add.w	r2, r3, #8
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f103 0208 	add.w	r2, r3, #8
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800996e:	bf00      	nop
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800997a:	b480      	push	{r7}
 800997c:	b085      	sub	sp, #20
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	683a      	ldr	r2, [r7, #0]
 800999e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	601a      	str	r2, [r3, #0]
}
 80099b6:	bf00      	nop
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099c2:	b480      	push	{r7}
 80099c4:	b085      	sub	sp, #20
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d8:	d103      	bne.n	80099e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	e00c      	b.n	80099fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	3308      	adds	r3, #8
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	e002      	b.n	80099f0 <vListInsert+0x2e>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d2f6      	bcs.n	80099ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	1c5a      	adds	r2, r3, #1
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	601a      	str	r2, [r3, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	6892      	ldr	r2, [r2, #8]
 8009a4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6852      	ldr	r2, [r2, #4]
 8009a54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d103      	bne.n	8009a68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	1e5a      	subs	r2, r3, #1
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10a      	bne.n	8009ab2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ab2:	f001 fd57 	bl	800b564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ac2:	fb01 f303 	mul.w	r3, r1, r3
 8009ac6:	441a      	add	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	68f9      	ldr	r1, [r7, #12]
 8009ae6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ae8:	fb01 f303 	mul.w	r3, r1, r3
 8009aec:	441a      	add	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	22ff      	movs	r2, #255	; 0xff
 8009af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	22ff      	movs	r2, #255	; 0xff
 8009afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d114      	bne.n	8009b32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d01a      	beq.n	8009b46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3310      	adds	r3, #16
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 f933 	bl	800ad80 <xTaskRemoveFromEventList>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d012      	beq.n	8009b46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b20:	4b0c      	ldr	r3, [pc, #48]	; (8009b54 <xQueueGenericReset+0xcc>)
 8009b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	e009      	b.n	8009b46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	3310      	adds	r3, #16
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7ff fef2 	bl	8009920 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3324      	adds	r3, #36	; 0x24
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff feed 	bl	8009920 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b46:	f001 fd3d 	bl	800b5c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b4a:	2301      	movs	r3, #1
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	e000ed04 	.word	0xe000ed04

08009b58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08e      	sub	sp, #56	; 0x38
 8009b5c:	af02      	add	r7, sp, #8
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10a      	bne.n	8009b82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d002      	beq.n	8009baa <xQueueGenericCreateStatic+0x52>
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d001      	beq.n	8009bae <xQueueGenericCreateStatic+0x56>
 8009baa:	2301      	movs	r3, #1
 8009bac:	e000      	b.n	8009bb0 <xQueueGenericCreateStatic+0x58>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10a      	bne.n	8009bca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	623b      	str	r3, [r7, #32]
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d102      	bne.n	8009bd6 <xQueueGenericCreateStatic+0x7e>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <xQueueGenericCreateStatic+0x82>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <xQueueGenericCreateStatic+0x84>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10a      	bne.n	8009bf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	61fb      	str	r3, [r7, #28]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009bf6:	2348      	movs	r3, #72	; 0x48
 8009bf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2b48      	cmp	r3, #72	; 0x48
 8009bfe:	d00a      	beq.n	8009c16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	61bb      	str	r3, [r7, #24]
}
 8009c12:	bf00      	nop
 8009c14:	e7fe      	b.n	8009c14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00d      	beq.n	8009c3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	4613      	mov	r3, r2
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	68b9      	ldr	r1, [r7, #8]
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f83f 	bl	8009cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3730      	adds	r7, #48	; 0x30
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	; 0x28
 8009c4c:	af02      	add	r7, sp, #8
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	4613      	mov	r3, r2
 8009c54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	613b      	str	r3, [r7, #16]
}
 8009c6e:	bf00      	nop
 8009c70:	e7fe      	b.n	8009c70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	fb02 f303 	mul.w	r3, r2, r3
 8009c7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	3348      	adds	r3, #72	; 0x48
 8009c80:	4618      	mov	r0, r3
 8009c82:	f001 fd91 	bl	800b7a8 <pvPortMalloc>
 8009c86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d011      	beq.n	8009cb2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	3348      	adds	r3, #72	; 0x48
 8009c96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ca0:	79fa      	ldrb	r2, [r7, #7]
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	68b9      	ldr	r1, [r7, #8]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f805 	bl	8009cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009cb2:	69bb      	ldr	r3, [r7, #24]
	}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3720      	adds	r7, #32
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d103      	bne.n	8009cd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	69ba      	ldr	r2, [r7, #24]
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	e002      	b.n	8009cde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009cea:	2101      	movs	r1, #1
 8009cec:	69b8      	ldr	r0, [r7, #24]
 8009cee:	f7ff fecb 	bl	8009a88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009cf2:	bf00      	nop
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08e      	sub	sp, #56	; 0x38
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <xQueueGenericSend+0x32>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d103      	bne.n	8009d3c <xQueueGenericSend+0x40>
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <xQueueGenericSend+0x44>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e000      	b.n	8009d42 <xQueueGenericSend+0x46>
 8009d40:	2300      	movs	r3, #0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <xQueueGenericSend+0x60>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d58:	bf00      	nop
 8009d5a:	e7fe      	b.n	8009d5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d103      	bne.n	8009d6a <xQueueGenericSend+0x6e>
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d101      	bne.n	8009d6e <xQueueGenericSend+0x72>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e000      	b.n	8009d70 <xQueueGenericSend+0x74>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <xQueueGenericSend+0x8e>
	__asm volatile
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	623b      	str	r3, [r7, #32]
}
 8009d86:	bf00      	nop
 8009d88:	e7fe      	b.n	8009d88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d8a:	f001 f9b7 	bl	800b0fc <xTaskGetSchedulerState>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d102      	bne.n	8009d9a <xQueueGenericSend+0x9e>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <xQueueGenericSend+0xa2>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e000      	b.n	8009da0 <xQueueGenericSend+0xa4>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10a      	bne.n	8009dba <xQueueGenericSend+0xbe>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	61fb      	str	r3, [r7, #28]
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dba:	f001 fbd3 	bl	800b564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d302      	bcc.n	8009dd0 <xQueueGenericSend+0xd4>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d129      	bne.n	8009e24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	68b9      	ldr	r1, [r7, #8]
 8009dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dd6:	f000 fa8b 	bl	800a2f0 <prvCopyDataToQueue>
 8009dda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d010      	beq.n	8009e06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de6:	3324      	adds	r3, #36	; 0x24
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 ffc9 	bl	800ad80 <xTaskRemoveFromEventList>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d013      	beq.n	8009e1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009df4:	4b3f      	ldr	r3, [pc, #252]	; (8009ef4 <xQueueGenericSend+0x1f8>)
 8009df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	e00a      	b.n	8009e1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d007      	beq.n	8009e1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e0c:	4b39      	ldr	r3, [pc, #228]	; (8009ef4 <xQueueGenericSend+0x1f8>)
 8009e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e1c:	f001 fbd2 	bl	800b5c4 <vPortExitCritical>
				return pdPASS;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e063      	b.n	8009eec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d103      	bne.n	8009e32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e2a:	f001 fbcb 	bl	800b5c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e05c      	b.n	8009eec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d106      	bne.n	8009e46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e38:	f107 0314 	add.w	r3, r7, #20
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 f801 	bl	800ae44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e42:	2301      	movs	r3, #1
 8009e44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e46:	f001 fbbd 	bl	800b5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e4a:	f000 fd93 	bl	800a974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e4e:	f001 fb89 	bl	800b564 <vPortEnterCritical>
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e58:	b25b      	sxtb	r3, r3
 8009e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5e:	d103      	bne.n	8009e68 <xQueueGenericSend+0x16c>
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e6e:	b25b      	sxtb	r3, r3
 8009e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e74:	d103      	bne.n	8009e7e <xQueueGenericSend+0x182>
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e7e:	f001 fba1 	bl	800b5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e82:	1d3a      	adds	r2, r7, #4
 8009e84:	f107 0314 	add.w	r3, r7, #20
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 fff0 	bl	800ae70 <xTaskCheckForTimeOut>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d124      	bne.n	8009ee0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e98:	f000 fb22 	bl	800a4e0 <prvIsQueueFull>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d018      	beq.n	8009ed4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	3310      	adds	r3, #16
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 ff44 	bl	800ad38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eb2:	f000 faad 	bl	800a410 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009eb6:	f000 fd6b 	bl	800a990 <xTaskResumeAll>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f47f af7c 	bne.w	8009dba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009ec2:	4b0c      	ldr	r3, [pc, #48]	; (8009ef4 <xQueueGenericSend+0x1f8>)
 8009ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	e772      	b.n	8009dba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ed6:	f000 fa9b 	bl	800a410 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009eda:	f000 fd59 	bl	800a990 <xTaskResumeAll>
 8009ede:	e76c      	b.n	8009dba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ee2:	f000 fa95 	bl	800a410 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ee6:	f000 fd53 	bl	800a990 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009eea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3738      	adds	r7, #56	; 0x38
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	e000ed04 	.word	0xe000ed04

08009ef8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b090      	sub	sp, #64	; 0x40
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10a      	bne.n	8009f26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d103      	bne.n	8009f34 <xQueueGenericSendFromISR+0x3c>
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d101      	bne.n	8009f38 <xQueueGenericSendFromISR+0x40>
 8009f34:	2301      	movs	r3, #1
 8009f36:	e000      	b.n	8009f3a <xQueueGenericSendFromISR+0x42>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d103      	bne.n	8009f62 <xQueueGenericSendFromISR+0x6a>
 8009f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d101      	bne.n	8009f66 <xQueueGenericSendFromISR+0x6e>
 8009f62:	2301      	movs	r3, #1
 8009f64:	e000      	b.n	8009f68 <xQueueGenericSendFromISR+0x70>
 8009f66:	2300      	movs	r3, #0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	623b      	str	r3, [r7, #32]
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f82:	f001 fbd1 	bl	800b728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f86:	f3ef 8211 	mrs	r2, BASEPRI
 8009f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	61fa      	str	r2, [r7, #28]
 8009f9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fa0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d302      	bcc.n	8009fb4 <xQueueGenericSendFromISR+0xbc>
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d12f      	bne.n	800a014 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	68b9      	ldr	r1, [r7, #8]
 8009fc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fca:	f000 f991 	bl	800a2f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd6:	d112      	bne.n	8009ffe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d016      	beq.n	800a00e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	3324      	adds	r3, #36	; 0x24
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fecb 	bl	800ad80 <xTaskRemoveFromEventList>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00e      	beq.n	800a00e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00b      	beq.n	800a00e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	e007      	b.n	800a00e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ffe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a002:	3301      	adds	r3, #1
 800a004:	b2db      	uxtb	r3, r3
 800a006:	b25a      	sxtb	r2, r3
 800a008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a00e:	2301      	movs	r3, #1
 800a010:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a012:	e001      	b.n	800a018 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a014:	2300      	movs	r3, #0
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a022:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a026:	4618      	mov	r0, r3
 800a028:	3740      	adds	r7, #64	; 0x40
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
	...

0800a030 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08c      	sub	sp, #48	; 0x30
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a03c:	2300      	movs	r3, #0
 800a03e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10a      	bne.n	800a060 <xQueueReceive+0x30>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	623b      	str	r3, [r7, #32]
}
 800a05c:	bf00      	nop
 800a05e:	e7fe      	b.n	800a05e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d103      	bne.n	800a06e <xQueueReceive+0x3e>
 800a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <xQueueReceive+0x42>
 800a06e:	2301      	movs	r3, #1
 800a070:	e000      	b.n	800a074 <xQueueReceive+0x44>
 800a072:	2300      	movs	r3, #0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10a      	bne.n	800a08e <xQueueReceive+0x5e>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	61fb      	str	r3, [r7, #28]
}
 800a08a:	bf00      	nop
 800a08c:	e7fe      	b.n	800a08c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a08e:	f001 f835 	bl	800b0fc <xTaskGetSchedulerState>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d102      	bne.n	800a09e <xQueueReceive+0x6e>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d101      	bne.n	800a0a2 <xQueueReceive+0x72>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e000      	b.n	800a0a4 <xQueueReceive+0x74>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10a      	bne.n	800a0be <xQueueReceive+0x8e>
	__asm volatile
 800a0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	61bb      	str	r3, [r7, #24]
}
 800a0ba:	bf00      	nop
 800a0bc:	e7fe      	b.n	800a0bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0be:	f001 fa51 	bl	800b564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d01f      	beq.n	800a10e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0d2:	f000 f977 	bl	800a3c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	1e5a      	subs	r2, r3, #1
 800a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00f      	beq.n	800a106 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	3310      	adds	r3, #16
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 fe48 	bl	800ad80 <xTaskRemoveFromEventList>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d007      	beq.n	800a106 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0f6:	4b3d      	ldr	r3, [pc, #244]	; (800a1ec <xQueueReceive+0x1bc>)
 800a0f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a106:	f001 fa5d 	bl	800b5c4 <vPortExitCritical>
				return pdPASS;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e069      	b.n	800a1e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d103      	bne.n	800a11c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a114:	f001 fa56 	bl	800b5c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a118:	2300      	movs	r3, #0
 800a11a:	e062      	b.n	800a1e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d106      	bne.n	800a130 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a122:	f107 0310 	add.w	r3, r7, #16
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fe8c 	bl	800ae44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a12c:	2301      	movs	r3, #1
 800a12e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a130:	f001 fa48 	bl	800b5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a134:	f000 fc1e 	bl	800a974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a138:	f001 fa14 	bl	800b564 <vPortEnterCritical>
 800a13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a142:	b25b      	sxtb	r3, r3
 800a144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a148:	d103      	bne.n	800a152 <xQueueReceive+0x122>
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a158:	b25b      	sxtb	r3, r3
 800a15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15e:	d103      	bne.n	800a168 <xQueueReceive+0x138>
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	2200      	movs	r2, #0
 800a164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a168:	f001 fa2c 	bl	800b5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a16c:	1d3a      	adds	r2, r7, #4
 800a16e:	f107 0310 	add.w	r3, r7, #16
 800a172:	4611      	mov	r1, r2
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fe7b 	bl	800ae70 <xTaskCheckForTimeOut>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d123      	bne.n	800a1c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a182:	f000 f997 	bl	800a4b4 <prvIsQueueEmpty>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d017      	beq.n	800a1bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	3324      	adds	r3, #36	; 0x24
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	4611      	mov	r1, r2
 800a194:	4618      	mov	r0, r3
 800a196:	f000 fdcf 	bl	800ad38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a19a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a19c:	f000 f938 	bl	800a410 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1a0:	f000 fbf6 	bl	800a990 <xTaskResumeAll>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d189      	bne.n	800a0be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a1aa:	4b10      	ldr	r3, [pc, #64]	; (800a1ec <xQueueReceive+0x1bc>)
 800a1ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	e780      	b.n	800a0be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a1bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1be:	f000 f927 	bl	800a410 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1c2:	f000 fbe5 	bl	800a990 <xTaskResumeAll>
 800a1c6:	e77a      	b.n	800a0be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a1c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1ca:	f000 f921 	bl	800a410 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1ce:	f000 fbdf 	bl	800a990 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1d4:	f000 f96e 	bl	800a4b4 <prvIsQueueEmpty>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f43f af6f 	beq.w	800a0be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3730      	adds	r7, #48	; 0x30
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	e000ed04 	.word	0xe000ed04

0800a1f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08e      	sub	sp, #56	; 0x38
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10a      	bne.n	800a21c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	623b      	str	r3, [r7, #32]
}
 800a218:	bf00      	nop
 800a21a:	e7fe      	b.n	800a21a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d103      	bne.n	800a22a <xQueueReceiveFromISR+0x3a>
 800a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <xQueueReceiveFromISR+0x3e>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e000      	b.n	800a230 <xQueueReceiveFromISR+0x40>
 800a22e:	2300      	movs	r3, #0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10a      	bne.n	800a24a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	61fb      	str	r3, [r7, #28]
}
 800a246:	bf00      	nop
 800a248:	e7fe      	b.n	800a248 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a24a:	f001 fa6d 	bl	800b728 <vPortValidateInterruptPriority>
	__asm volatile
 800a24e:	f3ef 8211 	mrs	r2, BASEPRI
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	61ba      	str	r2, [r7, #24]
 800a264:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a266:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a268:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	2b00      	cmp	r3, #0
 800a274:	d02f      	beq.n	800a2d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a27c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a280:	68b9      	ldr	r1, [r7, #8]
 800a282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a284:	f000 f89e 	bl	800a3c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28a:	1e5a      	subs	r2, r3, #1
 800a28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a290:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a298:	d112      	bne.n	800a2c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d016      	beq.n	800a2d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	3310      	adds	r3, #16
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fd6a 	bl	800ad80 <xTaskRemoveFromEventList>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00e      	beq.n	800a2d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00b      	beq.n	800a2d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	e007      	b.n	800a2d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	b25a      	sxtb	r2, r3
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a2d4:	e001      	b.n	800a2da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f383 8811 	msr	BASEPRI, r3
}
 800a2e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3738      	adds	r7, #56	; 0x38
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a304:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10d      	bne.n	800a32a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d14d      	bne.n	800a3b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 ff0c 	bl	800b138 <xTaskPriorityDisinherit>
 800a320:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	609a      	str	r2, [r3, #8]
 800a328:	e043      	b.n	800a3b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d119      	bne.n	800a364 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6858      	ldr	r0, [r3, #4]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a338:	461a      	mov	r2, r3
 800a33a:	68b9      	ldr	r1, [r7, #8]
 800a33c:	f001 ff64 	bl	800c208 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	685a      	ldr	r2, [r3, #4]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a348:	441a      	add	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	429a      	cmp	r2, r3
 800a358:	d32b      	bcc.n	800a3b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	605a      	str	r2, [r3, #4]
 800a362:	e026      	b.n	800a3b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	68d8      	ldr	r0, [r3, #12]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36c:	461a      	mov	r2, r3
 800a36e:	68b9      	ldr	r1, [r7, #8]
 800a370:	f001 ff4a 	bl	800c208 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37c:	425b      	negs	r3, r3
 800a37e:	441a      	add	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	68da      	ldr	r2, [r3, #12]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d207      	bcs.n	800a3a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a398:	425b      	negs	r3, r3
 800a39a:	441a      	add	r2, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d105      	bne.n	800a3b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d002      	beq.n	800a3b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	1c5a      	adds	r2, r3, #1
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a3ba:	697b      	ldr	r3, [r7, #20]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d018      	beq.n	800a408 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	68da      	ldr	r2, [r3, #12]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3de:	441a      	add	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68da      	ldr	r2, [r3, #12]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d303      	bcc.n	800a3f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68d9      	ldr	r1, [r3, #12]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a400:	461a      	mov	r2, r3
 800a402:	6838      	ldr	r0, [r7, #0]
 800a404:	f001 ff00 	bl	800c208 <memcpy>
	}
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a418:	f001 f8a4 	bl	800b564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a422:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a424:	e011      	b.n	800a44a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d012      	beq.n	800a454 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	3324      	adds	r3, #36	; 0x24
 800a432:	4618      	mov	r0, r3
 800a434:	f000 fca4 	bl	800ad80 <xTaskRemoveFromEventList>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a43e:	f000 fd79 	bl	800af34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	3b01      	subs	r3, #1
 800a446:	b2db      	uxtb	r3, r3
 800a448:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a44a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	dce9      	bgt.n	800a426 <prvUnlockQueue+0x16>
 800a452:	e000      	b.n	800a456 <prvUnlockQueue+0x46>
					break;
 800a454:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	22ff      	movs	r2, #255	; 0xff
 800a45a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a45e:	f001 f8b1 	bl	800b5c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a462:	f001 f87f 	bl	800b564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a46c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a46e:	e011      	b.n	800a494 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d012      	beq.n	800a49e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	3310      	adds	r3, #16
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 fc7f 	bl	800ad80 <xTaskRemoveFromEventList>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a488:	f000 fd54 	bl	800af34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
 800a48e:	3b01      	subs	r3, #1
 800a490:	b2db      	uxtb	r3, r3
 800a492:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	dce9      	bgt.n	800a470 <prvUnlockQueue+0x60>
 800a49c:	e000      	b.n	800a4a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a49e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	22ff      	movs	r2, #255	; 0xff
 800a4a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a4a8:	f001 f88c 	bl	800b5c4 <vPortExitCritical>
}
 800a4ac:	bf00      	nop
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4bc:	f001 f852 	bl	800b564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d102      	bne.n	800a4ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	e001      	b.n	800a4d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4d2:	f001 f877 	bl	800b5c4 <vPortExitCritical>

	return xReturn;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4e8:	f001 f83c 	bl	800b564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d102      	bne.n	800a4fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	e001      	b.n	800a502 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4fe:	2300      	movs	r3, #0
 800a500:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a502:	f001 f85f 	bl	800b5c4 <vPortExitCritical>

	return xReturn;
 800a506:	68fb      	ldr	r3, [r7, #12]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08e      	sub	sp, #56	; 0x38
 800a514:	af04      	add	r7, sp, #16
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	623b      	str	r3, [r7, #32]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10a      	bne.n	800a556 <xTaskCreateStatic+0x46>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	61fb      	str	r3, [r7, #28]
}
 800a552:	bf00      	nop
 800a554:	e7fe      	b.n	800a554 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a556:	2358      	movs	r3, #88	; 0x58
 800a558:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2b58      	cmp	r3, #88	; 0x58
 800a55e:	d00a      	beq.n	800a576 <xTaskCreateStatic+0x66>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	61bb      	str	r3, [r7, #24]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a576:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d01e      	beq.n	800a5bc <xTaskCreateStatic+0xac>
 800a57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a580:	2b00      	cmp	r3, #0
 800a582:	d01b      	beq.n	800a5bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a586:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a58c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	2202      	movs	r2, #2
 800a592:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a596:	2300      	movs	r3, #0
 800a598:	9303      	str	r3, [sp, #12]
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	9302      	str	r3, [sp, #8]
 800a59e:	f107 0314 	add.w	r3, r7, #20
 800a5a2:	9301      	str	r3, [sp, #4]
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	68b9      	ldr	r1, [r7, #8]
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f000 f850 	bl	800a654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5b6:	f000 f8df 	bl	800a778 <prvAddNewTaskToReadyList>
 800a5ba:	e001      	b.n	800a5c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a5c0:	697b      	ldr	r3, [r7, #20]
	}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3728      	adds	r7, #40	; 0x28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b08c      	sub	sp, #48	; 0x30
 800a5ce:	af04      	add	r7, sp, #16
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	60b9      	str	r1, [r7, #8]
 800a5d4:	603b      	str	r3, [r7, #0]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a5da:	88fb      	ldrh	r3, [r7, #6]
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f001 f8e2 	bl	800b7a8 <pvPortMalloc>
 800a5e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00e      	beq.n	800a60a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a5ec:	2058      	movs	r0, #88	; 0x58
 800a5ee:	f001 f8db 	bl	800b7a8 <pvPortMalloc>
 800a5f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	631a      	str	r2, [r3, #48]	; 0x30
 800a600:	e005      	b.n	800a60e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a602:	6978      	ldr	r0, [r7, #20]
 800a604:	f001 f9a0 	bl	800b948 <vPortFree>
 800a608:	e001      	b.n	800a60e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d017      	beq.n	800a644 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a61c:	88fa      	ldrh	r2, [r7, #6]
 800a61e:	2300      	movs	r3, #0
 800a620:	9303      	str	r3, [sp, #12]
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	9302      	str	r3, [sp, #8]
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 f80e 	bl	800a654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a638:	69f8      	ldr	r0, [r7, #28]
 800a63a:	f000 f89d 	bl	800a778 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a63e:	2301      	movs	r3, #1
 800a640:	61bb      	str	r3, [r7, #24]
 800a642:	e002      	b.n	800a64a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a644:	f04f 33ff 	mov.w	r3, #4294967295
 800a648:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a64a:	69bb      	ldr	r3, [r7, #24]
	}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3720      	adds	r7, #32
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b088      	sub	sp, #32
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
 800a660:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	461a      	mov	r2, r3
 800a66c:	21a5      	movs	r1, #165	; 0xa5
 800a66e:	f001 fdd9 	bl	800c224 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a67c:	3b01      	subs	r3, #1
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	4413      	add	r3, r2
 800a682:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	f023 0307 	bic.w	r3, r3, #7
 800a68a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <prvInitialiseNewTask+0x58>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	617b      	str	r3, [r7, #20]
}
 800a6a8:	bf00      	nop
 800a6aa:	e7fe      	b.n	800a6aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d01f      	beq.n	800a6f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	61fb      	str	r3, [r7, #28]
 800a6b6:	e012      	b.n	800a6de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	7819      	ldrb	r1, [r3, #0]
 800a6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	3334      	adds	r3, #52	; 0x34
 800a6c8:	460a      	mov	r2, r1
 800a6ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d006      	beq.n	800a6e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	61fb      	str	r3, [r7, #28]
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	2b0f      	cmp	r3, #15
 800a6e2:	d9e9      	bls.n	800a6b8 <prvInitialiseNewTask+0x64>
 800a6e4:	e000      	b.n	800a6e8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a6e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a6f0:	e003      	b.n	800a6fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	2b06      	cmp	r3, #6
 800a6fe:	d901      	bls.n	800a704 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a700:	2306      	movs	r3, #6
 800a702:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a708:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a70e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	2200      	movs	r2, #0
 800a714:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	3304      	adds	r3, #4
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7ff f920 	bl	8009960 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a722:	3318      	adds	r3, #24
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff f91b 	bl	8009960 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a72e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a732:	f1c3 0207 	rsb	r2, r3, #7
 800a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a738:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a73e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a742:	2200      	movs	r2, #0
 800a744:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a748:	2200      	movs	r2, #0
 800a74a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a754:	683a      	ldr	r2, [r7, #0]
 800a756:	68f9      	ldr	r1, [r7, #12]
 800a758:	69b8      	ldr	r0, [r7, #24]
 800a75a:	f000 fdd9 	bl	800b310 <pxPortInitialiseStack>
 800a75e:	4602      	mov	r2, r0
 800a760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a762:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a76e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a770:	bf00      	nop
 800a772:	3720      	adds	r7, #32
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a780:	f000 fef0 	bl	800b564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a784:	4b2a      	ldr	r3, [pc, #168]	; (800a830 <prvAddNewTaskToReadyList+0xb8>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	3301      	adds	r3, #1
 800a78a:	4a29      	ldr	r2, [pc, #164]	; (800a830 <prvAddNewTaskToReadyList+0xb8>)
 800a78c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a78e:	4b29      	ldr	r3, [pc, #164]	; (800a834 <prvAddNewTaskToReadyList+0xbc>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d109      	bne.n	800a7aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a796:	4a27      	ldr	r2, [pc, #156]	; (800a834 <prvAddNewTaskToReadyList+0xbc>)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a79c:	4b24      	ldr	r3, [pc, #144]	; (800a830 <prvAddNewTaskToReadyList+0xb8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d110      	bne.n	800a7c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a7a4:	f000 fbec 	bl	800af80 <prvInitialiseTaskLists>
 800a7a8:	e00d      	b.n	800a7c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a7aa:	4b23      	ldr	r3, [pc, #140]	; (800a838 <prvAddNewTaskToReadyList+0xc0>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d109      	bne.n	800a7c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a7b2:	4b20      	ldr	r3, [pc, #128]	; (800a834 <prvAddNewTaskToReadyList+0xbc>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d802      	bhi.n	800a7c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a7c0:	4a1c      	ldr	r2, [pc, #112]	; (800a834 <prvAddNewTaskToReadyList+0xbc>)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a7c6:	4b1d      	ldr	r3, [pc, #116]	; (800a83c <prvAddNewTaskToReadyList+0xc4>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	4a1b      	ldr	r2, [pc, #108]	; (800a83c <prvAddNewTaskToReadyList+0xc4>)
 800a7ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	409a      	lsls	r2, r3
 800a7d8:	4b19      	ldr	r3, [pc, #100]	; (800a840 <prvAddNewTaskToReadyList+0xc8>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	4a18      	ldr	r2, [pc, #96]	; (800a840 <prvAddNewTaskToReadyList+0xc8>)
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4413      	add	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4a15      	ldr	r2, [pc, #84]	; (800a844 <prvAddNewTaskToReadyList+0xcc>)
 800a7f0:	441a      	add	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	f7ff f8be 	bl	800997a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a7fe:	f000 fee1 	bl	800b5c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a802:	4b0d      	ldr	r3, [pc, #52]	; (800a838 <prvAddNewTaskToReadyList+0xc0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00e      	beq.n	800a828 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a80a:	4b0a      	ldr	r3, [pc, #40]	; (800a834 <prvAddNewTaskToReadyList+0xbc>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	429a      	cmp	r2, r3
 800a816:	d207      	bcs.n	800a828 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a818:	4b0b      	ldr	r3, [pc, #44]	; (800a848 <prvAddNewTaskToReadyList+0xd0>)
 800a81a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a81e:	601a      	str	r2, [r3, #0]
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	200006c4 	.word	0x200006c4
 800a834:	200005c4 	.word	0x200005c4
 800a838:	200006d0 	.word	0x200006d0
 800a83c:	200006e0 	.word	0x200006e0
 800a840:	200006cc 	.word	0x200006cc
 800a844:	200005c8 	.word	0x200005c8
 800a848:	e000ed04 	.word	0xe000ed04

0800a84c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a854:	2300      	movs	r3, #0
 800a856:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d017      	beq.n	800a88e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a85e:	4b13      	ldr	r3, [pc, #76]	; (800a8ac <vTaskDelay+0x60>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <vTaskDelay+0x30>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	60bb      	str	r3, [r7, #8]
}
 800a878:	bf00      	nop
 800a87a:	e7fe      	b.n	800a87a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a87c:	f000 f87a 	bl	800a974 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a880:	2100      	movs	r1, #0
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fcde 	bl	800b244 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a888:	f000 f882 	bl	800a990 <xTaskResumeAll>
 800a88c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d107      	bne.n	800a8a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a894:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <vTaskDelay+0x64>)
 800a896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8a4:	bf00      	nop
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	200006ec 	.word	0x200006ec
 800a8b0:	e000ed04 	.word	0xe000ed04

0800a8b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08a      	sub	sp, #40	; 0x28
 800a8b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a8c2:	463a      	mov	r2, r7
 800a8c4:	1d39      	adds	r1, r7, #4
 800a8c6:	f107 0308 	add.w	r3, r7, #8
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7f5 fe2c 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	9202      	str	r2, [sp, #8]
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	2300      	movs	r3, #0
 800a8e0:	460a      	mov	r2, r1
 800a8e2:	491e      	ldr	r1, [pc, #120]	; (800a95c <vTaskStartScheduler+0xa8>)
 800a8e4:	481e      	ldr	r0, [pc, #120]	; (800a960 <vTaskStartScheduler+0xac>)
 800a8e6:	f7ff fe13 	bl	800a510 <xTaskCreateStatic>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	4a1d      	ldr	r2, [pc, #116]	; (800a964 <vTaskStartScheduler+0xb0>)
 800a8ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a8f0:	4b1c      	ldr	r3, [pc, #112]	; (800a964 <vTaskStartScheduler+0xb0>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	e001      	b.n	800a902 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d116      	bne.n	800a936 <vTaskStartScheduler+0x82>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	613b      	str	r3, [r7, #16]
}
 800a91a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a91c:	4b12      	ldr	r3, [pc, #72]	; (800a968 <vTaskStartScheduler+0xb4>)
 800a91e:	f04f 32ff 	mov.w	r2, #4294967295
 800a922:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a924:	4b11      	ldr	r3, [pc, #68]	; (800a96c <vTaskStartScheduler+0xb8>)
 800a926:	2201      	movs	r2, #1
 800a928:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a92a:	4b11      	ldr	r3, [pc, #68]	; (800a970 <vTaskStartScheduler+0xbc>)
 800a92c:	2200      	movs	r2, #0
 800a92e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a930:	f000 fd76 	bl	800b420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a934:	e00e      	b.n	800a954 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93c:	d10a      	bne.n	800a954 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	60fb      	str	r3, [r7, #12]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <vTaskStartScheduler+0x9e>
}
 800a954:	bf00      	nop
 800a956:	3718      	adds	r7, #24
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	0800c4fc 	.word	0x0800c4fc
 800a960:	0800af4d 	.word	0x0800af4d
 800a964:	200006e8 	.word	0x200006e8
 800a968:	200006e4 	.word	0x200006e4
 800a96c:	200006d0 	.word	0x200006d0
 800a970:	200006c8 	.word	0x200006c8

0800a974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a974:	b480      	push	{r7}
 800a976:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a978:	4b04      	ldr	r3, [pc, #16]	; (800a98c <vTaskSuspendAll+0x18>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3301      	adds	r3, #1
 800a97e:	4a03      	ldr	r2, [pc, #12]	; (800a98c <vTaskSuspendAll+0x18>)
 800a980:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a982:	bf00      	nop
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	200006ec 	.word	0x200006ec

0800a990 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a996:	2300      	movs	r3, #0
 800a998:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a99a:	2300      	movs	r3, #0
 800a99c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a99e:	4b41      	ldr	r3, [pc, #260]	; (800aaa4 <xTaskResumeAll+0x114>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10a      	bne.n	800a9bc <xTaskResumeAll+0x2c>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	603b      	str	r3, [r7, #0]
}
 800a9b8:	bf00      	nop
 800a9ba:	e7fe      	b.n	800a9ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a9bc:	f000 fdd2 	bl	800b564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9c0:	4b38      	ldr	r3, [pc, #224]	; (800aaa4 <xTaskResumeAll+0x114>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	4a37      	ldr	r2, [pc, #220]	; (800aaa4 <xTaskResumeAll+0x114>)
 800a9c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9ca:	4b36      	ldr	r3, [pc, #216]	; (800aaa4 <xTaskResumeAll+0x114>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d161      	bne.n	800aa96 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a9d2:	4b35      	ldr	r3, [pc, #212]	; (800aaa8 <xTaskResumeAll+0x118>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d05d      	beq.n	800aa96 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9da:	e02e      	b.n	800aa3a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9dc:	4b33      	ldr	r3, [pc, #204]	; (800aaac <xTaskResumeAll+0x11c>)
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3318      	adds	r3, #24
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff f823 	bl	8009a34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3304      	adds	r3, #4
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7ff f81e 	bl	8009a34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	409a      	lsls	r2, r3
 800aa00:	4b2b      	ldr	r3, [pc, #172]	; (800aab0 <xTaskResumeAll+0x120>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	4a2a      	ldr	r2, [pc, #168]	; (800aab0 <xTaskResumeAll+0x120>)
 800aa08:	6013      	str	r3, [r2, #0]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0e:	4613      	mov	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	4413      	add	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4a27      	ldr	r2, [pc, #156]	; (800aab4 <xTaskResumeAll+0x124>)
 800aa18:	441a      	add	r2, r3
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4610      	mov	r0, r2
 800aa22:	f7fe ffaa 	bl	800997a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2a:	4b23      	ldr	r3, [pc, #140]	; (800aab8 <xTaskResumeAll+0x128>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d302      	bcc.n	800aa3a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800aa34:	4b21      	ldr	r3, [pc, #132]	; (800aabc <xTaskResumeAll+0x12c>)
 800aa36:	2201      	movs	r2, #1
 800aa38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa3a:	4b1c      	ldr	r3, [pc, #112]	; (800aaac <xTaskResumeAll+0x11c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1cc      	bne.n	800a9dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa48:	f000 fb38 	bl	800b0bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa4c:	4b1c      	ldr	r3, [pc, #112]	; (800aac0 <xTaskResumeAll+0x130>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d010      	beq.n	800aa7a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa58:	f000 f836 	bl	800aac8 <xTaskIncrementTick>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800aa62:	4b16      	ldr	r3, [pc, #88]	; (800aabc <xTaskResumeAll+0x12c>)
 800aa64:	2201      	movs	r2, #1
 800aa66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1f1      	bne.n	800aa58 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800aa74:	4b12      	ldr	r3, [pc, #72]	; (800aac0 <xTaskResumeAll+0x130>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa7a:	4b10      	ldr	r3, [pc, #64]	; (800aabc <xTaskResumeAll+0x12c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d009      	beq.n	800aa96 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa82:	2301      	movs	r3, #1
 800aa84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa86:	4b0f      	ldr	r3, [pc, #60]	; (800aac4 <xTaskResumeAll+0x134>)
 800aa88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa96:	f000 fd95 	bl	800b5c4 <vPortExitCritical>

	return xAlreadyYielded;
 800aa9a:	68bb      	ldr	r3, [r7, #8]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	200006ec 	.word	0x200006ec
 800aaa8:	200006c4 	.word	0x200006c4
 800aaac:	20000684 	.word	0x20000684
 800aab0:	200006cc 	.word	0x200006cc
 800aab4:	200005c8 	.word	0x200005c8
 800aab8:	200005c4 	.word	0x200005c4
 800aabc:	200006d8 	.word	0x200006d8
 800aac0:	200006d4 	.word	0x200006d4
 800aac4:	e000ed04 	.word	0xe000ed04

0800aac8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aace:	2300      	movs	r3, #0
 800aad0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aad2:	4b4e      	ldr	r3, [pc, #312]	; (800ac0c <xTaskIncrementTick+0x144>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f040 808e 	bne.w	800abf8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aadc:	4b4c      	ldr	r3, [pc, #304]	; (800ac10 <xTaskIncrementTick+0x148>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3301      	adds	r3, #1
 800aae2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aae4:	4a4a      	ldr	r2, [pc, #296]	; (800ac10 <xTaskIncrementTick+0x148>)
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d120      	bne.n	800ab32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aaf0:	4b48      	ldr	r3, [pc, #288]	; (800ac14 <xTaskIncrementTick+0x14c>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00a      	beq.n	800ab10 <xTaskIncrementTick+0x48>
	__asm volatile
 800aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	603b      	str	r3, [r7, #0]
}
 800ab0c:	bf00      	nop
 800ab0e:	e7fe      	b.n	800ab0e <xTaskIncrementTick+0x46>
 800ab10:	4b40      	ldr	r3, [pc, #256]	; (800ac14 <xTaskIncrementTick+0x14c>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	60fb      	str	r3, [r7, #12]
 800ab16:	4b40      	ldr	r3, [pc, #256]	; (800ac18 <xTaskIncrementTick+0x150>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a3e      	ldr	r2, [pc, #248]	; (800ac14 <xTaskIncrementTick+0x14c>)
 800ab1c:	6013      	str	r3, [r2, #0]
 800ab1e:	4a3e      	ldr	r2, [pc, #248]	; (800ac18 <xTaskIncrementTick+0x150>)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6013      	str	r3, [r2, #0]
 800ab24:	4b3d      	ldr	r3, [pc, #244]	; (800ac1c <xTaskIncrementTick+0x154>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	4a3c      	ldr	r2, [pc, #240]	; (800ac1c <xTaskIncrementTick+0x154>)
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	f000 fac5 	bl	800b0bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab32:	4b3b      	ldr	r3, [pc, #236]	; (800ac20 <xTaskIncrementTick+0x158>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d348      	bcc.n	800abce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab3c:	4b35      	ldr	r3, [pc, #212]	; (800ac14 <xTaskIncrementTick+0x14c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d104      	bne.n	800ab50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab46:	4b36      	ldr	r3, [pc, #216]	; (800ac20 <xTaskIncrementTick+0x158>)
 800ab48:	f04f 32ff 	mov.w	r2, #4294967295
 800ab4c:	601a      	str	r2, [r3, #0]
					break;
 800ab4e:	e03e      	b.n	800abce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab50:	4b30      	ldr	r3, [pc, #192]	; (800ac14 <xTaskIncrementTick+0x14c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab60:	693a      	ldr	r2, [r7, #16]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d203      	bcs.n	800ab70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab68:	4a2d      	ldr	r2, [pc, #180]	; (800ac20 <xTaskIncrementTick+0x158>)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab6e:	e02e      	b.n	800abce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	3304      	adds	r3, #4
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fe ff5d 	bl	8009a34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d004      	beq.n	800ab8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	3318      	adds	r3, #24
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe ff54 	bl	8009a34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab90:	2201      	movs	r2, #1
 800ab92:	409a      	lsls	r2, r3
 800ab94:	4b23      	ldr	r3, [pc, #140]	; (800ac24 <xTaskIncrementTick+0x15c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	4a22      	ldr	r2, [pc, #136]	; (800ac24 <xTaskIncrementTick+0x15c>)
 800ab9c:	6013      	str	r3, [r2, #0]
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba2:	4613      	mov	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4a1f      	ldr	r2, [pc, #124]	; (800ac28 <xTaskIncrementTick+0x160>)
 800abac:	441a      	add	r2, r3
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	3304      	adds	r3, #4
 800abb2:	4619      	mov	r1, r3
 800abb4:	4610      	mov	r0, r2
 800abb6:	f7fe fee0 	bl	800997a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abbe:	4b1b      	ldr	r3, [pc, #108]	; (800ac2c <xTaskIncrementTick+0x164>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d3b9      	bcc.n	800ab3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800abc8:	2301      	movs	r3, #1
 800abca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abcc:	e7b6      	b.n	800ab3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abce:	4b17      	ldr	r3, [pc, #92]	; (800ac2c <xTaskIncrementTick+0x164>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd4:	4914      	ldr	r1, [pc, #80]	; (800ac28 <xTaskIncrementTick+0x160>)
 800abd6:	4613      	mov	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	440b      	add	r3, r1
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d901      	bls.n	800abea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800abe6:	2301      	movs	r3, #1
 800abe8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800abea:	4b11      	ldr	r3, [pc, #68]	; (800ac30 <xTaskIncrementTick+0x168>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d007      	beq.n	800ac02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800abf2:	2301      	movs	r3, #1
 800abf4:	617b      	str	r3, [r7, #20]
 800abf6:	e004      	b.n	800ac02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800abf8:	4b0e      	ldr	r3, [pc, #56]	; (800ac34 <xTaskIncrementTick+0x16c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3301      	adds	r3, #1
 800abfe:	4a0d      	ldr	r2, [pc, #52]	; (800ac34 <xTaskIncrementTick+0x16c>)
 800ac00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ac02:	697b      	ldr	r3, [r7, #20]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	200006ec 	.word	0x200006ec
 800ac10:	200006c8 	.word	0x200006c8
 800ac14:	2000067c 	.word	0x2000067c
 800ac18:	20000680 	.word	0x20000680
 800ac1c:	200006dc 	.word	0x200006dc
 800ac20:	200006e4 	.word	0x200006e4
 800ac24:	200006cc 	.word	0x200006cc
 800ac28:	200005c8 	.word	0x200005c8
 800ac2c:	200005c4 	.word	0x200005c4
 800ac30:	200006d8 	.word	0x200006d8
 800ac34:	200006d4 	.word	0x200006d4

0800ac38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac3e:	4b39      	ldr	r3, [pc, #228]	; (800ad24 <vTaskSwitchContext+0xec>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac46:	4b38      	ldr	r3, [pc, #224]	; (800ad28 <vTaskSwitchContext+0xf0>)
 800ac48:	2201      	movs	r2, #1
 800ac4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac4c:	e066      	b.n	800ad1c <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800ac4e:	4b36      	ldr	r3, [pc, #216]	; (800ad28 <vTaskSwitchContext+0xf0>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ac54:	4b35      	ldr	r3, [pc, #212]	; (800ad2c <vTaskSwitchContext+0xf4>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5a:	61fb      	str	r3, [r7, #28]
 800ac5c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ac60:	61bb      	str	r3, [r7, #24]
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	69ba      	ldr	r2, [r7, #24]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d111      	bne.n	800ac90 <vTaskSwitchContext+0x58>
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	3304      	adds	r3, #4
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d10b      	bne.n	800ac90 <vTaskSwitchContext+0x58>
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d105      	bne.n	800ac90 <vTaskSwitchContext+0x58>
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	330c      	adds	r3, #12
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d008      	beq.n	800aca2 <vTaskSwitchContext+0x6a>
 800ac90:	4b26      	ldr	r3, [pc, #152]	; (800ad2c <vTaskSwitchContext+0xf4>)
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	4b25      	ldr	r3, [pc, #148]	; (800ad2c <vTaskSwitchContext+0xf4>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3334      	adds	r3, #52	; 0x34
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	f7f5 fc30 	bl	8000502 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca2:	4b23      	ldr	r3, [pc, #140]	; (800ad30 <vTaskSwitchContext+0xf8>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	fab3 f383 	clz	r3, r3
 800acae:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800acb0:	7afb      	ldrb	r3, [r7, #11]
 800acb2:	f1c3 031f 	rsb	r3, r3, #31
 800acb6:	617b      	str	r3, [r7, #20]
 800acb8:	491e      	ldr	r1, [pc, #120]	; (800ad34 <vTaskSwitchContext+0xfc>)
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	4613      	mov	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	440b      	add	r3, r1
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10a      	bne.n	800ace2 <vTaskSwitchContext+0xaa>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	607b      	str	r3, [r7, #4]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <vTaskSwitchContext+0xa8>
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	4613      	mov	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4413      	add	r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	4a11      	ldr	r2, [pc, #68]	; (800ad34 <vTaskSwitchContext+0xfc>)
 800acee:	4413      	add	r3, r2
 800acf0:	613b      	str	r3, [r7, #16]
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	605a      	str	r2, [r3, #4]
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	3308      	adds	r3, #8
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d104      	bne.n	800ad12 <vTaskSwitchContext+0xda>
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	605a      	str	r2, [r3, #4]
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	4a04      	ldr	r2, [pc, #16]	; (800ad2c <vTaskSwitchContext+0xf4>)
 800ad1a:	6013      	str	r3, [r2, #0]
}
 800ad1c:	bf00      	nop
 800ad1e:	3720      	adds	r7, #32
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	200006ec 	.word	0x200006ec
 800ad28:	200006d8 	.word	0x200006d8
 800ad2c:	200005c4 	.word	0x200005c4
 800ad30:	200006cc 	.word	0x200006cc
 800ad34:	200005c8 	.word	0x200005c8

0800ad38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10a      	bne.n	800ad5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	60fb      	str	r3, [r7, #12]
}
 800ad5a:	bf00      	nop
 800ad5c:	e7fe      	b.n	800ad5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad5e:	4b07      	ldr	r3, [pc, #28]	; (800ad7c <vTaskPlaceOnEventList+0x44>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3318      	adds	r3, #24
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7fe fe2b 	bl	80099c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	6838      	ldr	r0, [r7, #0]
 800ad70:	f000 fa68 	bl	800b244 <prvAddCurrentTaskToDelayedList>
}
 800ad74:	bf00      	nop
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	200005c4 	.word	0x200005c4

0800ad80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10a      	bne.n	800adac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	60fb      	str	r3, [r7, #12]
}
 800ada8:	bf00      	nop
 800adaa:	e7fe      	b.n	800adaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	3318      	adds	r3, #24
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fe fe3f 	bl	8009a34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adb6:	4b1d      	ldr	r3, [pc, #116]	; (800ae2c <xTaskRemoveFromEventList+0xac>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d11c      	bne.n	800adf8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe fe36 	bl	8009a34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	2201      	movs	r2, #1
 800adce:	409a      	lsls	r2, r3
 800add0:	4b17      	ldr	r3, [pc, #92]	; (800ae30 <xTaskRemoveFromEventList+0xb0>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4313      	orrs	r3, r2
 800add6:	4a16      	ldr	r2, [pc, #88]	; (800ae30 <xTaskRemoveFromEventList+0xb0>)
 800add8:	6013      	str	r3, [r2, #0]
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adde:	4613      	mov	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4a13      	ldr	r2, [pc, #76]	; (800ae34 <xTaskRemoveFromEventList+0xb4>)
 800ade8:	441a      	add	r2, r3
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	3304      	adds	r3, #4
 800adee:	4619      	mov	r1, r3
 800adf0:	4610      	mov	r0, r2
 800adf2:	f7fe fdc2 	bl	800997a <vListInsertEnd>
 800adf6:	e005      	b.n	800ae04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	3318      	adds	r3, #24
 800adfc:	4619      	mov	r1, r3
 800adfe:	480e      	ldr	r0, [pc, #56]	; (800ae38 <xTaskRemoveFromEventList+0xb8>)
 800ae00:	f7fe fdbb 	bl	800997a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae08:	4b0c      	ldr	r3, [pc, #48]	; (800ae3c <xTaskRemoveFromEventList+0xbc>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d905      	bls.n	800ae1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae12:	2301      	movs	r3, #1
 800ae14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae16:	4b0a      	ldr	r3, [pc, #40]	; (800ae40 <xTaskRemoveFromEventList+0xc0>)
 800ae18:	2201      	movs	r2, #1
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	e001      	b.n	800ae22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae22:	697b      	ldr	r3, [r7, #20]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	200006ec 	.word	0x200006ec
 800ae30:	200006cc 	.word	0x200006cc
 800ae34:	200005c8 	.word	0x200005c8
 800ae38:	20000684 	.word	0x20000684
 800ae3c:	200005c4 	.word	0x200005c4
 800ae40:	200006d8 	.word	0x200006d8

0800ae44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae4c:	4b06      	ldr	r3, [pc, #24]	; (800ae68 <vTaskInternalSetTimeOutState+0x24>)
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <vTaskInternalSetTimeOutState+0x28>)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	605a      	str	r2, [r3, #4]
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr
 800ae68:	200006dc 	.word	0x200006dc
 800ae6c:	200006c8 	.word	0x200006c8

0800ae70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b088      	sub	sp, #32
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10a      	bne.n	800ae96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	613b      	str	r3, [r7, #16]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	60fb      	str	r3, [r7, #12]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aeb2:	f000 fb57 	bl	800b564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aeb6:	4b1d      	ldr	r3, [pc, #116]	; (800af2c <xTaskCheckForTimeOut+0xbc>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	69ba      	ldr	r2, [r7, #24]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aece:	d102      	bne.n	800aed6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aed0:	2300      	movs	r3, #0
 800aed2:	61fb      	str	r3, [r7, #28]
 800aed4:	e023      	b.n	800af1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	4b15      	ldr	r3, [pc, #84]	; (800af30 <xTaskCheckForTimeOut+0xc0>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d007      	beq.n	800aef2 <xTaskCheckForTimeOut+0x82>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d302      	bcc.n	800aef2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aeec:	2301      	movs	r3, #1
 800aeee:	61fb      	str	r3, [r7, #28]
 800aef0:	e015      	b.n	800af1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d20b      	bcs.n	800af14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	1ad2      	subs	r2, r2, r3
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7ff ff9b 	bl	800ae44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af0e:	2300      	movs	r3, #0
 800af10:	61fb      	str	r3, [r7, #28]
 800af12:	e004      	b.n	800af1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af1a:	2301      	movs	r3, #1
 800af1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af1e:	f000 fb51 	bl	800b5c4 <vPortExitCritical>

	return xReturn;
 800af22:	69fb      	ldr	r3, [r7, #28]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3720      	adds	r7, #32
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	200006c8 	.word	0x200006c8
 800af30:	200006dc 	.word	0x200006dc

0800af34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af34:	b480      	push	{r7}
 800af36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af38:	4b03      	ldr	r3, [pc, #12]	; (800af48 <vTaskMissedYield+0x14>)
 800af3a:	2201      	movs	r2, #1
 800af3c:	601a      	str	r2, [r3, #0]
}
 800af3e:	bf00      	nop
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	200006d8 	.word	0x200006d8

0800af4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af54:	f000 f854 	bl	800b000 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af58:	4b07      	ldr	r3, [pc, #28]	; (800af78 <prvIdleTask+0x2c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d907      	bls.n	800af70 <prvIdleTask+0x24>
			{
				taskYIELD();
 800af60:	4b06      	ldr	r3, [pc, #24]	; (800af7c <prvIdleTask+0x30>)
 800af62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800af70:	f7f5 fac0 	bl	80004f4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800af74:	e7ee      	b.n	800af54 <prvIdleTask+0x8>
 800af76:	bf00      	nop
 800af78:	200005c8 	.word	0x200005c8
 800af7c:	e000ed04 	.word	0xe000ed04

0800af80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af86:	2300      	movs	r3, #0
 800af88:	607b      	str	r3, [r7, #4]
 800af8a:	e00c      	b.n	800afa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	4613      	mov	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4a12      	ldr	r2, [pc, #72]	; (800afe0 <prvInitialiseTaskLists+0x60>)
 800af98:	4413      	add	r3, r2
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fe fcc0 	bl	8009920 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	3301      	adds	r3, #1
 800afa4:	607b      	str	r3, [r7, #4]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b06      	cmp	r3, #6
 800afaa:	d9ef      	bls.n	800af8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afac:	480d      	ldr	r0, [pc, #52]	; (800afe4 <prvInitialiseTaskLists+0x64>)
 800afae:	f7fe fcb7 	bl	8009920 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afb2:	480d      	ldr	r0, [pc, #52]	; (800afe8 <prvInitialiseTaskLists+0x68>)
 800afb4:	f7fe fcb4 	bl	8009920 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afb8:	480c      	ldr	r0, [pc, #48]	; (800afec <prvInitialiseTaskLists+0x6c>)
 800afba:	f7fe fcb1 	bl	8009920 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afbe:	480c      	ldr	r0, [pc, #48]	; (800aff0 <prvInitialiseTaskLists+0x70>)
 800afc0:	f7fe fcae 	bl	8009920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afc4:	480b      	ldr	r0, [pc, #44]	; (800aff4 <prvInitialiseTaskLists+0x74>)
 800afc6:	f7fe fcab 	bl	8009920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afca:	4b0b      	ldr	r3, [pc, #44]	; (800aff8 <prvInitialiseTaskLists+0x78>)
 800afcc:	4a05      	ldr	r2, [pc, #20]	; (800afe4 <prvInitialiseTaskLists+0x64>)
 800afce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afd0:	4b0a      	ldr	r3, [pc, #40]	; (800affc <prvInitialiseTaskLists+0x7c>)
 800afd2:	4a05      	ldr	r2, [pc, #20]	; (800afe8 <prvInitialiseTaskLists+0x68>)
 800afd4:	601a      	str	r2, [r3, #0]
}
 800afd6:	bf00      	nop
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	200005c8 	.word	0x200005c8
 800afe4:	20000654 	.word	0x20000654
 800afe8:	20000668 	.word	0x20000668
 800afec:	20000684 	.word	0x20000684
 800aff0:	20000698 	.word	0x20000698
 800aff4:	200006b0 	.word	0x200006b0
 800aff8:	2000067c 	.word	0x2000067c
 800affc:	20000680 	.word	0x20000680

0800b000 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b006:	e019      	b.n	800b03c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b008:	f000 faac 	bl	800b564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b00c:	4b10      	ldr	r3, [pc, #64]	; (800b050 <prvCheckTasksWaitingTermination+0x50>)
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	3304      	adds	r3, #4
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fe fd0b 	bl	8009a34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b01e:	4b0d      	ldr	r3, [pc, #52]	; (800b054 <prvCheckTasksWaitingTermination+0x54>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	3b01      	subs	r3, #1
 800b024:	4a0b      	ldr	r2, [pc, #44]	; (800b054 <prvCheckTasksWaitingTermination+0x54>)
 800b026:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b028:	4b0b      	ldr	r3, [pc, #44]	; (800b058 <prvCheckTasksWaitingTermination+0x58>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	4a0a      	ldr	r2, [pc, #40]	; (800b058 <prvCheckTasksWaitingTermination+0x58>)
 800b030:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b032:	f000 fac7 	bl	800b5c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f810 	bl	800b05c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b03c:	4b06      	ldr	r3, [pc, #24]	; (800b058 <prvCheckTasksWaitingTermination+0x58>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1e1      	bne.n	800b008 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b044:	bf00      	nop
 800b046:	bf00      	nop
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	20000698 	.word	0x20000698
 800b054:	200006c4 	.word	0x200006c4
 800b058:	200006ac 	.word	0x200006ac

0800b05c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d108      	bne.n	800b080 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b072:	4618      	mov	r0, r3
 800b074:	f000 fc68 	bl	800b948 <vPortFree>
				vPortFree( pxTCB );
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fc65 	bl	800b948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b07e:	e018      	b.n	800b0b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b086:	2b01      	cmp	r3, #1
 800b088:	d103      	bne.n	800b092 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fc5c 	bl	800b948 <vPortFree>
	}
 800b090:	e00f      	b.n	800b0b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d00a      	beq.n	800b0b2 <prvDeleteTCB+0x56>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	60fb      	str	r3, [r7, #12]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <prvDeleteTCB+0x54>
	}
 800b0b2:	bf00      	nop
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
	...

0800b0bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0c2:	4b0c      	ldr	r3, [pc, #48]	; (800b0f4 <prvResetNextTaskUnblockTime+0x38>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d104      	bne.n	800b0d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	; (800b0f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0d4:	e008      	b.n	800b0e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0d6:	4b07      	ldr	r3, [pc, #28]	; (800b0f4 <prvResetNextTaskUnblockTime+0x38>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	4a04      	ldr	r2, [pc, #16]	; (800b0f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b0e6:	6013      	str	r3, [r2, #0]
}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	2000067c 	.word	0x2000067c
 800b0f8:	200006e4 	.word	0x200006e4

0800b0fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b102:	4b0b      	ldr	r3, [pc, #44]	; (800b130 <xTaskGetSchedulerState+0x34>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d102      	bne.n	800b110 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b10a:	2301      	movs	r3, #1
 800b10c:	607b      	str	r3, [r7, #4]
 800b10e:	e008      	b.n	800b122 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b110:	4b08      	ldr	r3, [pc, #32]	; (800b134 <xTaskGetSchedulerState+0x38>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d102      	bne.n	800b11e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b118:	2302      	movs	r3, #2
 800b11a:	607b      	str	r3, [r7, #4]
 800b11c:	e001      	b.n	800b122 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b11e:	2300      	movs	r3, #0
 800b120:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b122:	687b      	ldr	r3, [r7, #4]
	}
 800b124:	4618      	mov	r0, r3
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	200006d0 	.word	0x200006d0
 800b134:	200006ec 	.word	0x200006ec

0800b138 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b144:	2300      	movs	r3, #0
 800b146:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d06e      	beq.n	800b22c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b14e:	4b3a      	ldr	r3, [pc, #232]	; (800b238 <xTaskPriorityDisinherit+0x100>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	693a      	ldr	r2, [r7, #16]
 800b154:	429a      	cmp	r2, r3
 800b156:	d00a      	beq.n	800b16e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	60fb      	str	r3, [r7, #12]
}
 800b16a:	bf00      	nop
 800b16c:	e7fe      	b.n	800b16c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10a      	bne.n	800b18c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	60bb      	str	r3, [r7, #8]
}
 800b188:	bf00      	nop
 800b18a:	e7fe      	b.n	800b18a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b190:	1e5a      	subs	r2, r3, #1
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d044      	beq.n	800b22c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d140      	bne.n	800b22c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe fc40 	bl	8009a34 <uxListRemove>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d115      	bne.n	800b1e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1be:	491f      	ldr	r1, [pc, #124]	; (800b23c <xTaskPriorityDisinherit+0x104>)
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	440b      	add	r3, r1
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10a      	bne.n	800b1e6 <xTaskPriorityDisinherit+0xae>
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1da:	43da      	mvns	r2, r3
 800b1dc:	4b18      	ldr	r3, [pc, #96]	; (800b240 <xTaskPriorityDisinherit+0x108>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	4a17      	ldr	r2, [pc, #92]	; (800b240 <xTaskPriorityDisinherit+0x108>)
 800b1e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f2:	f1c3 0207 	rsb	r2, r3, #7
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fe:	2201      	movs	r2, #1
 800b200:	409a      	lsls	r2, r3
 800b202:	4b0f      	ldr	r3, [pc, #60]	; (800b240 <xTaskPriorityDisinherit+0x108>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4313      	orrs	r3, r2
 800b208:	4a0d      	ldr	r2, [pc, #52]	; (800b240 <xTaskPriorityDisinherit+0x108>)
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b210:	4613      	mov	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4a08      	ldr	r2, [pc, #32]	; (800b23c <xTaskPriorityDisinherit+0x104>)
 800b21a:	441a      	add	r2, r3
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	3304      	adds	r3, #4
 800b220:	4619      	mov	r1, r3
 800b222:	4610      	mov	r0, r2
 800b224:	f7fe fba9 	bl	800997a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b228:	2301      	movs	r3, #1
 800b22a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b22c:	697b      	ldr	r3, [r7, #20]
	}
 800b22e:	4618      	mov	r0, r3
 800b230:	3718      	adds	r7, #24
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	200005c4 	.word	0x200005c4
 800b23c:	200005c8 	.word	0x200005c8
 800b240:	200006cc 	.word	0x200006cc

0800b244 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b24e:	4b29      	ldr	r3, [pc, #164]	; (800b2f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b254:	4b28      	ldr	r3, [pc, #160]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3304      	adds	r3, #4
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe fbea 	bl	8009a34 <uxListRemove>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10b      	bne.n	800b27e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b266:	4b24      	ldr	r3, [pc, #144]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	2201      	movs	r2, #1
 800b26e:	fa02 f303 	lsl.w	r3, r2, r3
 800b272:	43da      	mvns	r2, r3
 800b274:	4b21      	ldr	r3, [pc, #132]	; (800b2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4013      	ands	r3, r2
 800b27a:	4a20      	ldr	r2, [pc, #128]	; (800b2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b27c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b284:	d10a      	bne.n	800b29c <prvAddCurrentTaskToDelayedList+0x58>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d007      	beq.n	800b29c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b28c:	4b1a      	ldr	r3, [pc, #104]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3304      	adds	r3, #4
 800b292:	4619      	mov	r1, r3
 800b294:	481a      	ldr	r0, [pc, #104]	; (800b300 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b296:	f7fe fb70 	bl	800997a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b29a:	e026      	b.n	800b2ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2a4:	4b14      	ldr	r3, [pc, #80]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d209      	bcs.n	800b2c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2b4:	4b13      	ldr	r3, [pc, #76]	; (800b304 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	4b0f      	ldr	r3, [pc, #60]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	4619      	mov	r1, r3
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	f7fe fb7e 	bl	80099c2 <vListInsert>
}
 800b2c6:	e010      	b.n	800b2ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2c8:	4b0f      	ldr	r3, [pc, #60]	; (800b308 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	f7fe fb74 	bl	80099c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2da:	4b0c      	ldr	r3, [pc, #48]	; (800b30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d202      	bcs.n	800b2ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b2e4:	4a09      	ldr	r2, [pc, #36]	; (800b30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	6013      	str	r3, [r2, #0]
}
 800b2ea:	bf00      	nop
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	200006c8 	.word	0x200006c8
 800b2f8:	200005c4 	.word	0x200005c4
 800b2fc:	200006cc 	.word	0x200006cc
 800b300:	200006b0 	.word	0x200006b0
 800b304:	20000680 	.word	0x20000680
 800b308:	2000067c 	.word	0x2000067c
 800b30c:	200006e4 	.word	0x200006e4

0800b310 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	3b04      	subs	r3, #4
 800b320:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3b04      	subs	r3, #4
 800b32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	f023 0201 	bic.w	r2, r3, #1
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	3b04      	subs	r3, #4
 800b33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b340:	4a0c      	ldr	r2, [pc, #48]	; (800b374 <pxPortInitialiseStack+0x64>)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3b14      	subs	r3, #20
 800b34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3b04      	subs	r3, #4
 800b356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f06f 0202 	mvn.w	r2, #2
 800b35e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	3b20      	subs	r3, #32
 800b364:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b366:	68fb      	ldr	r3, [r7, #12]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3714      	adds	r7, #20
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr
 800b374:	0800b379 	.word	0x0800b379

0800b378 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b382:	4b12      	ldr	r3, [pc, #72]	; (800b3cc <prvTaskExitError+0x54>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38a:	d00a      	beq.n	800b3a2 <prvTaskExitError+0x2a>
	__asm volatile
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	60fb      	str	r3, [r7, #12]
}
 800b39e:	bf00      	nop
 800b3a0:	e7fe      	b.n	800b3a0 <prvTaskExitError+0x28>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	60bb      	str	r3, [r7, #8]
}
 800b3b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3b6:	bf00      	nop
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d0fc      	beq.n	800b3b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3be:	bf00      	nop
 800b3c0:	bf00      	nop
 800b3c2:	3714      	adds	r7, #20
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	2000002c 	.word	0x2000002c

0800b3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3d0:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <pxCurrentTCBConst2>)
 800b3d2:	6819      	ldr	r1, [r3, #0]
 800b3d4:	6808      	ldr	r0, [r1, #0]
 800b3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3da:	f380 8809 	msr	PSP, r0
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f04f 0000 	mov.w	r0, #0
 800b3e6:	f380 8811 	msr	BASEPRI, r0
 800b3ea:	4770      	bx	lr
 800b3ec:	f3af 8000 	nop.w

0800b3f0 <pxCurrentTCBConst2>:
 800b3f0:	200005c4 	.word	0x200005c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop

0800b3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3f8:	4808      	ldr	r0, [pc, #32]	; (800b41c <prvPortStartFirstTask+0x24>)
 800b3fa:	6800      	ldr	r0, [r0, #0]
 800b3fc:	6800      	ldr	r0, [r0, #0]
 800b3fe:	f380 8808 	msr	MSP, r0
 800b402:	f04f 0000 	mov.w	r0, #0
 800b406:	f380 8814 	msr	CONTROL, r0
 800b40a:	b662      	cpsie	i
 800b40c:	b661      	cpsie	f
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	df00      	svc	0
 800b418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b41a:	bf00      	nop
 800b41c:	e000ed08 	.word	0xe000ed08

0800b420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b426:	4b46      	ldr	r3, [pc, #280]	; (800b540 <xPortStartScheduler+0x120>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a46      	ldr	r2, [pc, #280]	; (800b544 <xPortStartScheduler+0x124>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d10a      	bne.n	800b446 <xPortStartScheduler+0x26>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	613b      	str	r3, [r7, #16]
}
 800b442:	bf00      	nop
 800b444:	e7fe      	b.n	800b444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b446:	4b3e      	ldr	r3, [pc, #248]	; (800b540 <xPortStartScheduler+0x120>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a3f      	ldr	r2, [pc, #252]	; (800b548 <xPortStartScheduler+0x128>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d10a      	bne.n	800b466 <xPortStartScheduler+0x46>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	60fb      	str	r3, [r7, #12]
}
 800b462:	bf00      	nop
 800b464:	e7fe      	b.n	800b464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b466:	4b39      	ldr	r3, [pc, #228]	; (800b54c <xPortStartScheduler+0x12c>)
 800b468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	22ff      	movs	r2, #255	; 0xff
 800b476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b480:	78fb      	ldrb	r3, [r7, #3]
 800b482:	b2db      	uxtb	r3, r3
 800b484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	4b31      	ldr	r3, [pc, #196]	; (800b550 <xPortStartScheduler+0x130>)
 800b48c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b48e:	4b31      	ldr	r3, [pc, #196]	; (800b554 <xPortStartScheduler+0x134>)
 800b490:	2207      	movs	r2, #7
 800b492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b494:	e009      	b.n	800b4aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b496:	4b2f      	ldr	r3, [pc, #188]	; (800b554 <xPortStartScheduler+0x134>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3b01      	subs	r3, #1
 800b49c:	4a2d      	ldr	r2, [pc, #180]	; (800b554 <xPortStartScheduler+0x134>)
 800b49e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4a0:	78fb      	ldrb	r3, [r7, #3]
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4aa:	78fb      	ldrb	r3, [r7, #3]
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4b2:	2b80      	cmp	r3, #128	; 0x80
 800b4b4:	d0ef      	beq.n	800b496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4b6:	4b27      	ldr	r3, [pc, #156]	; (800b554 <xPortStartScheduler+0x134>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f1c3 0307 	rsb	r3, r3, #7
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	d00a      	beq.n	800b4d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	60bb      	str	r3, [r7, #8]
}
 800b4d4:	bf00      	nop
 800b4d6:	e7fe      	b.n	800b4d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4d8:	4b1e      	ldr	r3, [pc, #120]	; (800b554 <xPortStartScheduler+0x134>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	021b      	lsls	r3, r3, #8
 800b4de:	4a1d      	ldr	r2, [pc, #116]	; (800b554 <xPortStartScheduler+0x134>)
 800b4e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4e2:	4b1c      	ldr	r3, [pc, #112]	; (800b554 <xPortStartScheduler+0x134>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4ea:	4a1a      	ldr	r2, [pc, #104]	; (800b554 <xPortStartScheduler+0x134>)
 800b4ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	b2da      	uxtb	r2, r3
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4f6:	4b18      	ldr	r3, [pc, #96]	; (800b558 <xPortStartScheduler+0x138>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a17      	ldr	r2, [pc, #92]	; (800b558 <xPortStartScheduler+0x138>)
 800b4fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b502:	4b15      	ldr	r3, [pc, #84]	; (800b558 <xPortStartScheduler+0x138>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a14      	ldr	r2, [pc, #80]	; (800b558 <xPortStartScheduler+0x138>)
 800b508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b50c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b50e:	f000 f8dd 	bl	800b6cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b512:	4b12      	ldr	r3, [pc, #72]	; (800b55c <xPortStartScheduler+0x13c>)
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b518:	f000 f8fc 	bl	800b714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b51c:	4b10      	ldr	r3, [pc, #64]	; (800b560 <xPortStartScheduler+0x140>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a0f      	ldr	r2, [pc, #60]	; (800b560 <xPortStartScheduler+0x140>)
 800b522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b528:	f7ff ff66 	bl	800b3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b52c:	f7ff fb84 	bl	800ac38 <vTaskSwitchContext>
	prvTaskExitError();
 800b530:	f7ff ff22 	bl	800b378 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3718      	adds	r7, #24
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	e000ed00 	.word	0xe000ed00
 800b544:	410fc271 	.word	0x410fc271
 800b548:	410fc270 	.word	0x410fc270
 800b54c:	e000e400 	.word	0xe000e400
 800b550:	200006f0 	.word	0x200006f0
 800b554:	200006f4 	.word	0x200006f4
 800b558:	e000ed20 	.word	0xe000ed20
 800b55c:	2000002c 	.word	0x2000002c
 800b560:	e000ef34 	.word	0xe000ef34

0800b564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
	__asm volatile
 800b56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	607b      	str	r3, [r7, #4]
}
 800b57c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b57e:	4b0f      	ldr	r3, [pc, #60]	; (800b5bc <vPortEnterCritical+0x58>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3301      	adds	r3, #1
 800b584:	4a0d      	ldr	r2, [pc, #52]	; (800b5bc <vPortEnterCritical+0x58>)
 800b586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b588:	4b0c      	ldr	r3, [pc, #48]	; (800b5bc <vPortEnterCritical+0x58>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d10f      	bne.n	800b5b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b590:	4b0b      	ldr	r3, [pc, #44]	; (800b5c0 <vPortEnterCritical+0x5c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00a      	beq.n	800b5b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	603b      	str	r3, [r7, #0]
}
 800b5ac:	bf00      	nop
 800b5ae:	e7fe      	b.n	800b5ae <vPortEnterCritical+0x4a>
	}
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	2000002c 	.word	0x2000002c
 800b5c0:	e000ed04 	.word	0xe000ed04

0800b5c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5ca:	4b12      	ldr	r3, [pc, #72]	; (800b614 <vPortExitCritical+0x50>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10a      	bne.n	800b5e8 <vPortExitCritical+0x24>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	607b      	str	r3, [r7, #4]
}
 800b5e4:	bf00      	nop
 800b5e6:	e7fe      	b.n	800b5e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5e8:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <vPortExitCritical+0x50>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	4a09      	ldr	r2, [pc, #36]	; (800b614 <vPortExitCritical+0x50>)
 800b5f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5f2:	4b08      	ldr	r3, [pc, #32]	; (800b614 <vPortExitCritical+0x50>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d105      	bne.n	800b606 <vPortExitCritical+0x42>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	f383 8811 	msr	BASEPRI, r3
}
 800b604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b606:	bf00      	nop
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	2000002c 	.word	0x2000002c
	...

0800b620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b620:	f3ef 8009 	mrs	r0, PSP
 800b624:	f3bf 8f6f 	isb	sy
 800b628:	4b15      	ldr	r3, [pc, #84]	; (800b680 <pxCurrentTCBConst>)
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	f01e 0f10 	tst.w	lr, #16
 800b630:	bf08      	it	eq
 800b632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63a:	6010      	str	r0, [r2, #0]
 800b63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b640:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b644:	f380 8811 	msr	BASEPRI, r0
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f7ff faf2 	bl	800ac38 <vTaskSwitchContext>
 800b654:	f04f 0000 	mov.w	r0, #0
 800b658:	f380 8811 	msr	BASEPRI, r0
 800b65c:	bc09      	pop	{r0, r3}
 800b65e:	6819      	ldr	r1, [r3, #0]
 800b660:	6808      	ldr	r0, [r1, #0]
 800b662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b666:	f01e 0f10 	tst.w	lr, #16
 800b66a:	bf08      	it	eq
 800b66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b670:	f380 8809 	msr	PSP, r0
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	f3af 8000 	nop.w

0800b680 <pxCurrentTCBConst>:
 800b680:	200005c4 	.word	0x200005c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b684:	bf00      	nop
 800b686:	bf00      	nop

0800b688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	607b      	str	r3, [r7, #4]
}
 800b6a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6a2:	f7ff fa11 	bl	800aac8 <xTaskIncrementTick>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d003      	beq.n	800b6b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6ac:	4b06      	ldr	r3, [pc, #24]	; (800b6c8 <SysTick_Handler+0x40>)
 800b6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b2:	601a      	str	r2, [r3, #0]
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	f383 8811 	msr	BASEPRI, r3
}
 800b6be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6c0:	bf00      	nop
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	e000ed04 	.word	0xe000ed04

0800b6cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6d0:	4b0b      	ldr	r3, [pc, #44]	; (800b700 <vPortSetupTimerInterrupt+0x34>)
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6d6:	4b0b      	ldr	r3, [pc, #44]	; (800b704 <vPortSetupTimerInterrupt+0x38>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6dc:	4b0a      	ldr	r3, [pc, #40]	; (800b708 <vPortSetupTimerInterrupt+0x3c>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a0a      	ldr	r2, [pc, #40]	; (800b70c <vPortSetupTimerInterrupt+0x40>)
 800b6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e6:	099b      	lsrs	r3, r3, #6
 800b6e8:	4a09      	ldr	r2, [pc, #36]	; (800b710 <vPortSetupTimerInterrupt+0x44>)
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6ee:	4b04      	ldr	r3, [pc, #16]	; (800b700 <vPortSetupTimerInterrupt+0x34>)
 800b6f0:	2207      	movs	r2, #7
 800b6f2:	601a      	str	r2, [r3, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	e000e010 	.word	0xe000e010
 800b704:	e000e018 	.word	0xe000e018
 800b708:	20000000 	.word	0x20000000
 800b70c:	10624dd3 	.word	0x10624dd3
 800b710:	e000e014 	.word	0xe000e014

0800b714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b724 <vPortEnableVFP+0x10>
 800b718:	6801      	ldr	r1, [r0, #0]
 800b71a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b71e:	6001      	str	r1, [r0, #0]
 800b720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b722:	bf00      	nop
 800b724:	e000ed88 	.word	0xe000ed88

0800b728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b72e:	f3ef 8305 	mrs	r3, IPSR
 800b732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b0f      	cmp	r3, #15
 800b738:	d914      	bls.n	800b764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b73a:	4a17      	ldr	r2, [pc, #92]	; (800b798 <vPortValidateInterruptPriority+0x70>)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	4413      	add	r3, r2
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b744:	4b15      	ldr	r3, [pc, #84]	; (800b79c <vPortValidateInterruptPriority+0x74>)
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	7afa      	ldrb	r2, [r7, #11]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d20a      	bcs.n	800b764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	607b      	str	r3, [r7, #4]
}
 800b760:	bf00      	nop
 800b762:	e7fe      	b.n	800b762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b764:	4b0e      	ldr	r3, [pc, #56]	; (800b7a0 <vPortValidateInterruptPriority+0x78>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b76c:	4b0d      	ldr	r3, [pc, #52]	; (800b7a4 <vPortValidateInterruptPriority+0x7c>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	429a      	cmp	r2, r3
 800b772:	d90a      	bls.n	800b78a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	603b      	str	r3, [r7, #0]
}
 800b786:	bf00      	nop
 800b788:	e7fe      	b.n	800b788 <vPortValidateInterruptPriority+0x60>
	}
 800b78a:	bf00      	nop
 800b78c:	3714      	adds	r7, #20
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	e000e3f0 	.word	0xe000e3f0
 800b79c:	200006f0 	.word	0x200006f0
 800b7a0:	e000ed0c 	.word	0xe000ed0c
 800b7a4:	200006f4 	.word	0x200006f4

0800b7a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08a      	sub	sp, #40	; 0x28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7b4:	f7ff f8de 	bl	800a974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7b8:	4b5d      	ldr	r3, [pc, #372]	; (800b930 <pvPortMalloc+0x188>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7c0:	f000 f924 	bl	800ba0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7c4:	4b5b      	ldr	r3, [pc, #364]	; (800b934 <pvPortMalloc+0x18c>)
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f040 8093 	bne.w	800b8f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d01d      	beq.n	800b814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b7d8:	2208      	movs	r2, #8
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4413      	add	r3, r2
 800b7de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f003 0307 	and.w	r3, r3, #7
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d014      	beq.n	800b814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f023 0307 	bic.w	r3, r3, #7
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f003 0307 	and.w	r3, r3, #7
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <pvPortMalloc+0x6c>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	617b      	str	r3, [r7, #20]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d06e      	beq.n	800b8f8 <pvPortMalloc+0x150>
 800b81a:	4b47      	ldr	r3, [pc, #284]	; (800b938 <pvPortMalloc+0x190>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	429a      	cmp	r2, r3
 800b822:	d869      	bhi.n	800b8f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b824:	4b45      	ldr	r3, [pc, #276]	; (800b93c <pvPortMalloc+0x194>)
 800b826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b828:	4b44      	ldr	r3, [pc, #272]	; (800b93c <pvPortMalloc+0x194>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b82e:	e004      	b.n	800b83a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	429a      	cmp	r2, r3
 800b842:	d903      	bls.n	800b84c <pvPortMalloc+0xa4>
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1f1      	bne.n	800b830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b84c:	4b38      	ldr	r3, [pc, #224]	; (800b930 <pvPortMalloc+0x188>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b852:	429a      	cmp	r2, r3
 800b854:	d050      	beq.n	800b8f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b856:	6a3b      	ldr	r3, [r7, #32]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2208      	movs	r2, #8
 800b85c:	4413      	add	r3, r2
 800b85e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	1ad2      	subs	r2, r2, r3
 800b870:	2308      	movs	r3, #8
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	429a      	cmp	r2, r3
 800b876:	d91f      	bls.n	800b8b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	4413      	add	r3, r2
 800b87e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	f003 0307 	and.w	r3, r3, #7
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00a      	beq.n	800b8a0 <pvPortMalloc+0xf8>
	__asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	613b      	str	r3, [r7, #16]
}
 800b89c:	bf00      	nop
 800b89e:	e7fe      	b.n	800b89e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	1ad2      	subs	r2, r2, r3
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8b2:	69b8      	ldr	r0, [r7, #24]
 800b8b4:	f000 f90c 	bl	800bad0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8b8:	4b1f      	ldr	r3, [pc, #124]	; (800b938 <pvPortMalloc+0x190>)
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	4a1d      	ldr	r2, [pc, #116]	; (800b938 <pvPortMalloc+0x190>)
 800b8c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8c6:	4b1c      	ldr	r3, [pc, #112]	; (800b938 <pvPortMalloc+0x190>)
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	4b1d      	ldr	r3, [pc, #116]	; (800b940 <pvPortMalloc+0x198>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d203      	bcs.n	800b8da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8d2:	4b19      	ldr	r3, [pc, #100]	; (800b938 <pvPortMalloc+0x190>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a1a      	ldr	r2, [pc, #104]	; (800b940 <pvPortMalloc+0x198>)
 800b8d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	4b15      	ldr	r3, [pc, #84]	; (800b934 <pvPortMalloc+0x18c>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	431a      	orrs	r2, r3
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b8ee:	4b15      	ldr	r3, [pc, #84]	; (800b944 <pvPortMalloc+0x19c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	4a13      	ldr	r2, [pc, #76]	; (800b944 <pvPortMalloc+0x19c>)
 800b8f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8f8:	f7ff f84a 	bl	800a990 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b902:	f7f4 fe09 	bl	8000518 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	f003 0307 	and.w	r3, r3, #7
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00a      	beq.n	800b926 <pvPortMalloc+0x17e>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	60fb      	str	r3, [r7, #12]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <pvPortMalloc+0x17c>
	return pvReturn;
 800b926:	69fb      	ldr	r3, [r7, #28]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3728      	adds	r7, #40	; 0x28
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	20008700 	.word	0x20008700
 800b934:	20008714 	.word	0x20008714
 800b938:	20008704 	.word	0x20008704
 800b93c:	200086f8 	.word	0x200086f8
 800b940:	20008708 	.word	0x20008708
 800b944:	2000870c 	.word	0x2000870c

0800b948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b086      	sub	sp, #24
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d04d      	beq.n	800b9f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b95a:	2308      	movs	r3, #8
 800b95c:	425b      	negs	r3, r3
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	4413      	add	r3, r2
 800b962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	4b24      	ldr	r3, [pc, #144]	; (800ba00 <vPortFree+0xb8>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4013      	ands	r3, r2
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10a      	bne.n	800b98c <vPortFree+0x44>
	__asm volatile
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	60fb      	str	r3, [r7, #12]
}
 800b988:	bf00      	nop
 800b98a:	e7fe      	b.n	800b98a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00a      	beq.n	800b9aa <vPortFree+0x62>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	60bb      	str	r3, [r7, #8]
}
 800b9a6:	bf00      	nop
 800b9a8:	e7fe      	b.n	800b9a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	4b14      	ldr	r3, [pc, #80]	; (800ba00 <vPortFree+0xb8>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d01e      	beq.n	800b9f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d11a      	bne.n	800b9f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	4b0e      	ldr	r3, [pc, #56]	; (800ba00 <vPortFree+0xb8>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	43db      	mvns	r3, r3
 800b9ca:	401a      	ands	r2, r3
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9d0:	f7fe ffd0 	bl	800a974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ba04 <vPortFree+0xbc>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4413      	add	r3, r2
 800b9de:	4a09      	ldr	r2, [pc, #36]	; (800ba04 <vPortFree+0xbc>)
 800b9e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9e2:	6938      	ldr	r0, [r7, #16]
 800b9e4:	f000 f874 	bl	800bad0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b9e8:	4b07      	ldr	r3, [pc, #28]	; (800ba08 <vPortFree+0xc0>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	4a06      	ldr	r2, [pc, #24]	; (800ba08 <vPortFree+0xc0>)
 800b9f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b9f2:	f7fe ffcd 	bl	800a990 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9f6:	bf00      	nop
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20008714 	.word	0x20008714
 800ba04:	20008704 	.word	0x20008704
 800ba08:	20008710 	.word	0x20008710

0800ba0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba18:	4b27      	ldr	r3, [pc, #156]	; (800bab8 <prvHeapInit+0xac>)
 800ba1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f003 0307 	and.w	r3, r3, #7
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00c      	beq.n	800ba40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3307      	adds	r3, #7
 800ba2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f023 0307 	bic.w	r3, r3, #7
 800ba32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	4a1f      	ldr	r2, [pc, #124]	; (800bab8 <prvHeapInit+0xac>)
 800ba3c:	4413      	add	r3, r2
 800ba3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba44:	4a1d      	ldr	r2, [pc, #116]	; (800babc <prvHeapInit+0xb0>)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba4a:	4b1c      	ldr	r3, [pc, #112]	; (800babc <prvHeapInit+0xb0>)
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	4413      	add	r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba58:	2208      	movs	r2, #8
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	1a9b      	subs	r3, r3, r2
 800ba5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f023 0307 	bic.w	r3, r3, #7
 800ba66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	4a15      	ldr	r2, [pc, #84]	; (800bac0 <prvHeapInit+0xb4>)
 800ba6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba6e:	4b14      	ldr	r3, [pc, #80]	; (800bac0 <prvHeapInit+0xb4>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2200      	movs	r2, #0
 800ba74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba76:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <prvHeapInit+0xb4>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	1ad2      	subs	r2, r2, r3
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba8c:	4b0c      	ldr	r3, [pc, #48]	; (800bac0 <prvHeapInit+0xb4>)
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	4a0a      	ldr	r2, [pc, #40]	; (800bac4 <prvHeapInit+0xb8>)
 800ba9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	4a09      	ldr	r2, [pc, #36]	; (800bac8 <prvHeapInit+0xbc>)
 800baa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800baa4:	4b09      	ldr	r3, [pc, #36]	; (800bacc <prvHeapInit+0xc0>)
 800baa6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800baaa:	601a      	str	r2, [r3, #0]
}
 800baac:	bf00      	nop
 800baae:	3714      	adds	r7, #20
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr
 800bab8:	200006f8 	.word	0x200006f8
 800babc:	200086f8 	.word	0x200086f8
 800bac0:	20008700 	.word	0x20008700
 800bac4:	20008708 	.word	0x20008708
 800bac8:	20008704 	.word	0x20008704
 800bacc:	20008714 	.word	0x20008714

0800bad0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bad8:	4b28      	ldr	r3, [pc, #160]	; (800bb7c <prvInsertBlockIntoFreeList+0xac>)
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	e002      	b.n	800bae4 <prvInsertBlockIntoFreeList+0x14>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	60fb      	str	r3, [r7, #12]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	429a      	cmp	r2, r3
 800baec:	d8f7      	bhi.n	800bade <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	4413      	add	r3, r2
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d108      	bne.n	800bb12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	685a      	ldr	r2, [r3, #4]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	441a      	add	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	441a      	add	r2, r3
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d118      	bne.n	800bb58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	4b15      	ldr	r3, [pc, #84]	; (800bb80 <prvInsertBlockIntoFreeList+0xb0>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d00d      	beq.n	800bb4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	685a      	ldr	r2, [r3, #4]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	441a      	add	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	601a      	str	r2, [r3, #0]
 800bb4c:	e008      	b.n	800bb60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb4e:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <prvInsertBlockIntoFreeList+0xb0>)
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	e003      	b.n	800bb60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d002      	beq.n	800bb6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	200086f8 	.word	0x200086f8
 800bb80:	20008700 	.word	0x20008700

0800bb84 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	490e      	ldr	r1, [pc, #56]	; (800bbc4 <MX_USB_HOST_Init+0x40>)
 800bb8c:	480e      	ldr	r0, [pc, #56]	; (800bbc8 <MX_USB_HOST_Init+0x44>)
 800bb8e:	f7fb fed5 	bl	800793c <USBH_Init>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bb98:	f7f5 f904 	bl	8000da4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800bb9c:	490b      	ldr	r1, [pc, #44]	; (800bbcc <MX_USB_HOST_Init+0x48>)
 800bb9e:	480a      	ldr	r0, [pc, #40]	; (800bbc8 <MX_USB_HOST_Init+0x44>)
 800bba0:	f7fb ff82 	bl	8007aa8 <USBH_RegisterClass>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bbaa:	f7f5 f8fb 	bl	8000da4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800bbae:	4806      	ldr	r0, [pc, #24]	; (800bbc8 <MX_USB_HOST_Init+0x44>)
 800bbb0:	f7fc f806 	bl	8007bc0 <USBH_Start>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bbba:	f7f5 f8f3 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bbbe:	bf00      	nop
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	0800bbd1 	.word	0x0800bbd1
 800bbc8:	20008718 	.word	0x20008718
 800bbcc:	2000000c 	.word	0x2000000c

0800bbd0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bbdc:	78fb      	ldrb	r3, [r7, #3]
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	2b04      	cmp	r3, #4
 800bbe2:	d819      	bhi.n	800bc18 <USBH_UserProcess+0x48>
 800bbe4:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <USBH_UserProcess+0x1c>)
 800bbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbea:	bf00      	nop
 800bbec:	0800bc19 	.word	0x0800bc19
 800bbf0:	0800bc09 	.word	0x0800bc09
 800bbf4:	0800bc19 	.word	0x0800bc19
 800bbf8:	0800bc11 	.word	0x0800bc11
 800bbfc:	0800bc01 	.word	0x0800bc01
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bc00:	4b09      	ldr	r3, [pc, #36]	; (800bc28 <USBH_UserProcess+0x58>)
 800bc02:	2203      	movs	r2, #3
 800bc04:	701a      	strb	r2, [r3, #0]
  break;
 800bc06:	e008      	b.n	800bc1a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bc08:	4b07      	ldr	r3, [pc, #28]	; (800bc28 <USBH_UserProcess+0x58>)
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	701a      	strb	r2, [r3, #0]
  break;
 800bc0e:	e004      	b.n	800bc1a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bc10:	4b05      	ldr	r3, [pc, #20]	; (800bc28 <USBH_UserProcess+0x58>)
 800bc12:	2201      	movs	r2, #1
 800bc14:	701a      	strb	r2, [r3, #0]
  break;
 800bc16:	e000      	b.n	800bc1a <USBH_UserProcess+0x4a>

  default:
  break;
 800bc18:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bc1a:	bf00      	nop
 800bc1c:	370c      	adds	r7, #12
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	20008afc 	.word	0x20008afc

0800bc2c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b08a      	sub	sp, #40	; 0x28
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc34:	f107 0314 	add.w	r3, r7, #20
 800bc38:	2200      	movs	r2, #0
 800bc3a:	601a      	str	r2, [r3, #0]
 800bc3c:	605a      	str	r2, [r3, #4]
 800bc3e:	609a      	str	r2, [r3, #8]
 800bc40:	60da      	str	r2, [r3, #12]
 800bc42:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a24      	ldr	r2, [pc, #144]	; (800bcdc <HAL_HCD_MspInit+0xb0>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d141      	bne.n	800bcd2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc4e:	2300      	movs	r3, #0
 800bc50:	613b      	str	r3, [r7, #16]
 800bc52:	4b23      	ldr	r3, [pc, #140]	; (800bce0 <HAL_HCD_MspInit+0xb4>)
 800bc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc56:	4a22      	ldr	r2, [pc, #136]	; (800bce0 <HAL_HCD_MspInit+0xb4>)
 800bc58:	f043 0302 	orr.w	r3, r3, #2
 800bc5c:	6313      	str	r3, [r2, #48]	; 0x30
 800bc5e:	4b20      	ldr	r3, [pc, #128]	; (800bce0 <HAL_HCD_MspInit+0xb4>)
 800bc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc62:	f003 0302 	and.w	r3, r3, #2
 800bc66:	613b      	str	r3, [r7, #16]
 800bc68:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800bc6a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800bc6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc70:	2302      	movs	r3, #2
 800bc72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc74:	2300      	movs	r3, #0
 800bc76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800bc7c:	230c      	movs	r3, #12
 800bc7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc80:	f107 0314 	add.w	r3, r7, #20
 800bc84:	4619      	mov	r1, r3
 800bc86:	4817      	ldr	r0, [pc, #92]	; (800bce4 <HAL_HCD_MspInit+0xb8>)
 800bc88:	f7f6 f84a 	bl	8001d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800bc8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc92:	2300      	movs	r3, #0
 800bc94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc96:	2300      	movs	r3, #0
 800bc98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800bc9a:	f107 0314 	add.w	r3, r7, #20
 800bc9e:	4619      	mov	r1, r3
 800bca0:	4810      	ldr	r0, [pc, #64]	; (800bce4 <HAL_HCD_MspInit+0xb8>)
 800bca2:	f7f6 f83d 	bl	8001d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bca6:	2300      	movs	r3, #0
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	4b0d      	ldr	r3, [pc, #52]	; (800bce0 <HAL_HCD_MspInit+0xb4>)
 800bcac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcae:	4a0c      	ldr	r2, [pc, #48]	; (800bce0 <HAL_HCD_MspInit+0xb4>)
 800bcb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bcb4:	6313      	str	r3, [r2, #48]	; 0x30
 800bcb6:	4b0a      	ldr	r3, [pc, #40]	; (800bce0 <HAL_HCD_MspInit+0xb4>)
 800bcb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcbe:	60fb      	str	r3, [r7, #12]
 800bcc0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2105      	movs	r1, #5
 800bcc6:	204d      	movs	r0, #77	; 0x4d
 800bcc8:	f7f5 fdf8 	bl	80018bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800bccc:	204d      	movs	r0, #77	; 0x4d
 800bcce:	f7f5 fe11 	bl	80018f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bcd2:	bf00      	nop
 800bcd4:	3728      	adds	r7, #40	; 0x28
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	40040000 	.word	0x40040000
 800bce0:	40023800 	.word	0x40023800
 800bce4:	40020400 	.word	0x40020400

0800bce8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fc fc19 	bl	800852e <USBH_LL_IncTimer>
}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fc fc5d 	bl	80085d2 <USBH_LL_Connect>
}
 800bd18:	bf00      	nop
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fc fc72 	bl	8008618 <USBH_LL_Disconnect>
}
 800bd34:	bf00      	nop
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
 800bd48:	4613      	mov	r3, r2
 800bd4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fc fca7 	bl	80086a6 <USBH_LL_NotifyURBChange>
#endif
}
 800bd58:	bf00      	nop
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fc fc07 	bl	8008582 <USBH_LL_PortEnabled>
}
 800bd74:	bf00      	nop
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fc fc13 	bl	80085b6 <USBH_LL_PortDisabled>
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d132      	bne.n	800be10 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800bdaa:	4a1c      	ldr	r2, [pc, #112]	; (800be1c <USBH_LL_Init+0x84>)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	4a19      	ldr	r2, [pc, #100]	; (800be1c <USBH_LL_Init+0x84>)
 800bdb6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800bdba:	4b18      	ldr	r3, [pc, #96]	; (800be1c <USBH_LL_Init+0x84>)
 800bdbc:	4a18      	ldr	r2, [pc, #96]	; (800be20 <USBH_LL_Init+0x88>)
 800bdbe:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800bdc0:	4b16      	ldr	r3, [pc, #88]	; (800be1c <USBH_LL_Init+0x84>)
 800bdc2:	220c      	movs	r2, #12
 800bdc4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800bdc6:	4b15      	ldr	r3, [pc, #84]	; (800be1c <USBH_LL_Init+0x84>)
 800bdc8:	2201      	movs	r2, #1
 800bdca:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800bdcc:	4b13      	ldr	r3, [pc, #76]	; (800be1c <USBH_LL_Init+0x84>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800bdd2:	4b12      	ldr	r3, [pc, #72]	; (800be1c <USBH_LL_Init+0x84>)
 800bdd4:	2202      	movs	r2, #2
 800bdd6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800bdd8:	4b10      	ldr	r3, [pc, #64]	; (800be1c <USBH_LL_Init+0x84>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800bdde:	4b0f      	ldr	r3, [pc, #60]	; (800be1c <USBH_LL_Init+0x84>)
 800bde0:	2200      	movs	r2, #0
 800bde2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800bde4:	4b0d      	ldr	r3, [pc, #52]	; (800be1c <USBH_LL_Init+0x84>)
 800bde6:	2200      	movs	r2, #0
 800bde8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800bdea:	4b0c      	ldr	r3, [pc, #48]	; (800be1c <USBH_LL_Init+0x84>)
 800bdec:	2200      	movs	r2, #0
 800bdee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800bdf0:	480a      	ldr	r0, [pc, #40]	; (800be1c <USBH_LL_Init+0x84>)
 800bdf2:	f7f6 f974 	bl	80020de <HAL_HCD_Init>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d001      	beq.n	800be00 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800bdfc:	f7f4 ffd2 	bl	8000da4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800be00:	4806      	ldr	r0, [pc, #24]	; (800be1c <USBH_LL_Init+0x84>)
 800be02:	f7f6 fd58 	bl	80028b6 <HAL_HCD_GetCurrentFrame>
 800be06:	4603      	mov	r3, r0
 800be08:	4619      	mov	r1, r3
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7fc fb80 	bl	8008510 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20008b00 	.word	0x20008b00
 800be20:	40040000 	.word	0x40040000

0800be24 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be2c:	2300      	movs	r3, #0
 800be2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be30:	2300      	movs	r3, #0
 800be32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7f6 fcc5 	bl	80027ca <HAL_HCD_Start>
 800be40:	4603      	mov	r3, r0
 800be42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be44:	7bfb      	ldrb	r3, [r7, #15]
 800be46:	4618      	mov	r0, r3
 800be48:	f000 f95c 	bl	800c104 <USBH_Get_USB_Status>
 800be4c:	4603      	mov	r3, r0
 800be4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be50:	7bbb      	ldrb	r3, [r7, #14]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be62:	2300      	movs	r3, #0
 800be64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be70:	4618      	mov	r0, r3
 800be72:	f7f6 fccd 	bl	8002810 <HAL_HCD_Stop>
 800be76:	4603      	mov	r3, r0
 800be78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be7a:	7bfb      	ldrb	r3, [r7, #15]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 f941 	bl	800c104 <USBH_Get_USB_Status>
 800be82:	4603      	mov	r3, r0
 800be84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be86:	7bbb      	ldrb	r3, [r7, #14]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800be98:	2301      	movs	r3, #1
 800be9a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7f6 fd15 	bl	80028d2 <HAL_HCD_GetCurrentSpeed>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d00c      	beq.n	800bec8 <USBH_LL_GetSpeed+0x38>
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d80d      	bhi.n	800bece <USBH_LL_GetSpeed+0x3e>
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d002      	beq.n	800bebc <USBH_LL_GetSpeed+0x2c>
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d003      	beq.n	800bec2 <USBH_LL_GetSpeed+0x32>
 800beba:	e008      	b.n	800bece <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bebc:	2300      	movs	r3, #0
 800bebe:	73fb      	strb	r3, [r7, #15]
    break;
 800bec0:	e008      	b.n	800bed4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bec2:	2301      	movs	r3, #1
 800bec4:	73fb      	strb	r3, [r7, #15]
    break;
 800bec6:	e005      	b.n	800bed4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bec8:	2302      	movs	r3, #2
 800beca:	73fb      	strb	r3, [r7, #15]
    break;
 800becc:	e002      	b.n	800bed4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bece:	2301      	movs	r3, #1
 800bed0:	73fb      	strb	r3, [r7, #15]
    break;
 800bed2:	bf00      	nop
  }
  return  speed;
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b084      	sub	sp, #16
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bee6:	2300      	movs	r3, #0
 800bee8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800beea:	2300      	movs	r3, #0
 800beec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7f6 fca8 	bl	800284a <HAL_HCD_ResetPort>
 800befa:	4603      	mov	r3, r0
 800befc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800befe:	7bfb      	ldrb	r3, [r7, #15]
 800bf00:	4618      	mov	r0, r3
 800bf02:	f000 f8ff 	bl	800c104 <USBH_Get_USB_Status>
 800bf06:	4603      	mov	r3, r0
 800bf08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bf26:	78fa      	ldrb	r2, [r7, #3]
 800bf28:	4611      	mov	r1, r2
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7f6 fcaf 	bl	800288e <HAL_HCD_HC_GetXferCount>
 800bf30:	4603      	mov	r3, r0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bf3a:	b590      	push	{r4, r7, lr}
 800bf3c:	b089      	sub	sp, #36	; 0x24
 800bf3e:	af04      	add	r7, sp, #16
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	4608      	mov	r0, r1
 800bf44:	4611      	mov	r1, r2
 800bf46:	461a      	mov	r2, r3
 800bf48:	4603      	mov	r3, r0
 800bf4a:	70fb      	strb	r3, [r7, #3]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	70bb      	strb	r3, [r7, #2]
 800bf50:	4613      	mov	r3, r2
 800bf52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bf62:	787c      	ldrb	r4, [r7, #1]
 800bf64:	78ba      	ldrb	r2, [r7, #2]
 800bf66:	78f9      	ldrb	r1, [r7, #3]
 800bf68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bf6a:	9302      	str	r3, [sp, #8]
 800bf6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf70:	9301      	str	r3, [sp, #4]
 800bf72:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	4623      	mov	r3, r4
 800bf7a:	f7f6 f912 	bl	80021a2 <HAL_HCD_HC_Init>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
 800bf84:	4618      	mov	r0, r3
 800bf86:	f000 f8bd 	bl	800c104 <USBH_Get_USB_Status>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd90      	pop	{r4, r7, pc}

0800bf98 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bfb2:	78fa      	ldrb	r2, [r7, #3]
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7f6 f982 	bl	80022c0 <HAL_HCD_HC_Halt>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f000 f89e 	bl	800c104 <USBH_Get_USB_Status>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bfd6:	b590      	push	{r4, r7, lr}
 800bfd8:	b089      	sub	sp, #36	; 0x24
 800bfda:	af04      	add	r7, sp, #16
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	4608      	mov	r0, r1
 800bfe0:	4611      	mov	r1, r2
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	70fb      	strb	r3, [r7, #3]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	70bb      	strb	r3, [r7, #2]
 800bfec:	4613      	mov	r3, r2
 800bfee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bffe:	787c      	ldrb	r4, [r7, #1]
 800c000:	78ba      	ldrb	r2, [r7, #2]
 800c002:	78f9      	ldrb	r1, [r7, #3]
 800c004:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c008:	9303      	str	r3, [sp, #12]
 800c00a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c00c:	9302      	str	r3, [sp, #8]
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	9301      	str	r3, [sp, #4]
 800c012:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	4623      	mov	r3, r4
 800c01a:	f7f6 f975 	bl	8002308 <HAL_HCD_HC_SubmitRequest>
 800c01e:	4603      	mov	r3, r0
 800c020:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c022:	7bfb      	ldrb	r3, [r7, #15]
 800c024:	4618      	mov	r0, r3
 800c026:	f000 f86d 	bl	800c104 <USBH_Get_USB_Status>
 800c02a:	4603      	mov	r3, r0
 800c02c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c02e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	bd90      	pop	{r4, r7, pc}

0800c038 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	460b      	mov	r3, r1
 800c042:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c04a:	78fa      	ldrb	r2, [r7, #3]
 800c04c:	4611      	mov	r1, r2
 800c04e:	4618      	mov	r0, r3
 800c050:	f7f6 fc09 	bl	8002866 <HAL_HCD_HC_GetURBState>
 800c054:	4603      	mov	r3, r0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b082      	sub	sp, #8
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	460b      	mov	r3, r1
 800c068:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c070:	2b00      	cmp	r3, #0
 800c072:	d103      	bne.n	800c07c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800c074:	78fb      	ldrb	r3, [r7, #3]
 800c076:	4618      	mov	r0, r3
 800c078:	f000 f870 	bl	800c15c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c07c:	20c8      	movs	r0, #200	; 0xc8
 800c07e:	f7f5 fb41 	bl	8001704 <HAL_Delay>
  return USBH_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	70fb      	strb	r3, [r7, #3]
 800c098:	4613      	mov	r3, r2
 800c09a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c0a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c0a4:	78fb      	ldrb	r3, [r7, #3]
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	212c      	movs	r1, #44	; 0x2c
 800c0aa:	fb01 f303 	mul.w	r3, r1, r3
 800c0ae:	4413      	add	r3, r2
 800c0b0:	333b      	adds	r3, #59	; 0x3b
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d009      	beq.n	800c0cc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c0b8:	78fb      	ldrb	r3, [r7, #3]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	212c      	movs	r1, #44	; 0x2c
 800c0be:	fb01 f303 	mul.w	r3, r1, r3
 800c0c2:	4413      	add	r3, r2
 800c0c4:	3354      	adds	r3, #84	; 0x54
 800c0c6:	78ba      	ldrb	r2, [r7, #2]
 800c0c8:	701a      	strb	r2, [r3, #0]
 800c0ca:	e008      	b.n	800c0de <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c0cc:	78fb      	ldrb	r3, [r7, #3]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	212c      	movs	r1, #44	; 0x2c
 800c0d2:	fb01 f303 	mul.w	r3, r1, r3
 800c0d6:	4413      	add	r3, r2
 800c0d8:	3355      	adds	r3, #85	; 0x55
 800c0da:	78ba      	ldrb	r2, [r7, #2]
 800c0dc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3714      	adds	r7, #20
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7f5 fb05 	bl	8001704 <HAL_Delay>
}
 800c0fa:	bf00      	nop
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	4603      	mov	r3, r0
 800c10c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c10e:	2300      	movs	r3, #0
 800c110:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c112:	79fb      	ldrb	r3, [r7, #7]
 800c114:	2b03      	cmp	r3, #3
 800c116:	d817      	bhi.n	800c148 <USBH_Get_USB_Status+0x44>
 800c118:	a201      	add	r2, pc, #4	; (adr r2, 800c120 <USBH_Get_USB_Status+0x1c>)
 800c11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11e:	bf00      	nop
 800c120:	0800c131 	.word	0x0800c131
 800c124:	0800c137 	.word	0x0800c137
 800c128:	0800c13d 	.word	0x0800c13d
 800c12c:	0800c143 	.word	0x0800c143
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	73fb      	strb	r3, [r7, #15]
    break;
 800c134:	e00b      	b.n	800c14e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c136:	2302      	movs	r3, #2
 800c138:	73fb      	strb	r3, [r7, #15]
    break;
 800c13a:	e008      	b.n	800c14e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c13c:	2301      	movs	r3, #1
 800c13e:	73fb      	strb	r3, [r7, #15]
    break;
 800c140:	e005      	b.n	800c14e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c142:	2302      	movs	r3, #2
 800c144:	73fb      	strb	r3, [r7, #15]
    break;
 800c146:	e002      	b.n	800c14e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c148:	2302      	movs	r3, #2
 800c14a:	73fb      	strb	r3, [r7, #15]
    break;
 800c14c:	bf00      	nop
  }
  return usb_status;
 800c14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c166:	79fb      	ldrb	r3, [r7, #7]
 800c168:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800c16a:	79fb      	ldrb	r3, [r7, #7]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d102      	bne.n	800c176 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800c170:	2301      	movs	r3, #1
 800c172:	73fb      	strb	r3, [r7, #15]
 800c174:	e001      	b.n	800c17a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800c176:	2300      	movs	r3, #0
 800c178:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800c17a:	7bfb      	ldrb	r3, [r7, #15]
 800c17c:	461a      	mov	r2, r3
 800c17e:	2110      	movs	r1, #16
 800c180:	4803      	ldr	r0, [pc, #12]	; (800c190 <MX_DriverVbusHS+0x34>)
 800c182:	f7f5 ff79 	bl	8002078 <HAL_GPIO_WritePin>
}
 800c186:	bf00      	nop
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	40020800 	.word	0x40020800

0800c194 <__errno>:
 800c194:	4b01      	ldr	r3, [pc, #4]	; (800c19c <__errno+0x8>)
 800c196:	6818      	ldr	r0, [r3, #0]
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	20000030 	.word	0x20000030

0800c1a0 <__libc_init_array>:
 800c1a0:	b570      	push	{r4, r5, r6, lr}
 800c1a2:	4d0d      	ldr	r5, [pc, #52]	; (800c1d8 <__libc_init_array+0x38>)
 800c1a4:	4c0d      	ldr	r4, [pc, #52]	; (800c1dc <__libc_init_array+0x3c>)
 800c1a6:	1b64      	subs	r4, r4, r5
 800c1a8:	10a4      	asrs	r4, r4, #2
 800c1aa:	2600      	movs	r6, #0
 800c1ac:	42a6      	cmp	r6, r4
 800c1ae:	d109      	bne.n	800c1c4 <__libc_init_array+0x24>
 800c1b0:	4d0b      	ldr	r5, [pc, #44]	; (800c1e0 <__libc_init_array+0x40>)
 800c1b2:	4c0c      	ldr	r4, [pc, #48]	; (800c1e4 <__libc_init_array+0x44>)
 800c1b4:	f000 f93c 	bl	800c430 <_init>
 800c1b8:	1b64      	subs	r4, r4, r5
 800c1ba:	10a4      	asrs	r4, r4, #2
 800c1bc:	2600      	movs	r6, #0
 800c1be:	42a6      	cmp	r6, r4
 800c1c0:	d105      	bne.n	800c1ce <__libc_init_array+0x2e>
 800c1c2:	bd70      	pop	{r4, r5, r6, pc}
 800c1c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1c8:	4798      	blx	r3
 800c1ca:	3601      	adds	r6, #1
 800c1cc:	e7ee      	b.n	800c1ac <__libc_init_array+0xc>
 800c1ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1d2:	4798      	blx	r3
 800c1d4:	3601      	adds	r6, #1
 800c1d6:	e7f2      	b.n	800c1be <__libc_init_array+0x1e>
 800c1d8:	0800c524 	.word	0x0800c524
 800c1dc:	0800c524 	.word	0x0800c524
 800c1e0:	0800c524 	.word	0x0800c524
 800c1e4:	0800c528 	.word	0x0800c528

0800c1e8 <malloc>:
 800c1e8:	4b02      	ldr	r3, [pc, #8]	; (800c1f4 <malloc+0xc>)
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	6818      	ldr	r0, [r3, #0]
 800c1ee:	f000 b88d 	b.w	800c30c <_malloc_r>
 800c1f2:	bf00      	nop
 800c1f4:	20000030 	.word	0x20000030

0800c1f8 <free>:
 800c1f8:	4b02      	ldr	r3, [pc, #8]	; (800c204 <free+0xc>)
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	6818      	ldr	r0, [r3, #0]
 800c1fe:	f000 b819 	b.w	800c234 <_free_r>
 800c202:	bf00      	nop
 800c204:	20000030 	.word	0x20000030

0800c208 <memcpy>:
 800c208:	440a      	add	r2, r1
 800c20a:	4291      	cmp	r1, r2
 800c20c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c210:	d100      	bne.n	800c214 <memcpy+0xc>
 800c212:	4770      	bx	lr
 800c214:	b510      	push	{r4, lr}
 800c216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c21a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c21e:	4291      	cmp	r1, r2
 800c220:	d1f9      	bne.n	800c216 <memcpy+0xe>
 800c222:	bd10      	pop	{r4, pc}

0800c224 <memset>:
 800c224:	4402      	add	r2, r0
 800c226:	4603      	mov	r3, r0
 800c228:	4293      	cmp	r3, r2
 800c22a:	d100      	bne.n	800c22e <memset+0xa>
 800c22c:	4770      	bx	lr
 800c22e:	f803 1b01 	strb.w	r1, [r3], #1
 800c232:	e7f9      	b.n	800c228 <memset+0x4>

0800c234 <_free_r>:
 800c234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c236:	2900      	cmp	r1, #0
 800c238:	d044      	beq.n	800c2c4 <_free_r+0x90>
 800c23a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c23e:	9001      	str	r0, [sp, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	f1a1 0404 	sub.w	r4, r1, #4
 800c246:	bfb8      	it	lt
 800c248:	18e4      	addlt	r4, r4, r3
 800c24a:	f000 f8e3 	bl	800c414 <__malloc_lock>
 800c24e:	4a1e      	ldr	r2, [pc, #120]	; (800c2c8 <_free_r+0x94>)
 800c250:	9801      	ldr	r0, [sp, #4]
 800c252:	6813      	ldr	r3, [r2, #0]
 800c254:	b933      	cbnz	r3, 800c264 <_free_r+0x30>
 800c256:	6063      	str	r3, [r4, #4]
 800c258:	6014      	str	r4, [r2, #0]
 800c25a:	b003      	add	sp, #12
 800c25c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c260:	f000 b8de 	b.w	800c420 <__malloc_unlock>
 800c264:	42a3      	cmp	r3, r4
 800c266:	d908      	bls.n	800c27a <_free_r+0x46>
 800c268:	6825      	ldr	r5, [r4, #0]
 800c26a:	1961      	adds	r1, r4, r5
 800c26c:	428b      	cmp	r3, r1
 800c26e:	bf01      	itttt	eq
 800c270:	6819      	ldreq	r1, [r3, #0]
 800c272:	685b      	ldreq	r3, [r3, #4]
 800c274:	1949      	addeq	r1, r1, r5
 800c276:	6021      	streq	r1, [r4, #0]
 800c278:	e7ed      	b.n	800c256 <_free_r+0x22>
 800c27a:	461a      	mov	r2, r3
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	b10b      	cbz	r3, 800c284 <_free_r+0x50>
 800c280:	42a3      	cmp	r3, r4
 800c282:	d9fa      	bls.n	800c27a <_free_r+0x46>
 800c284:	6811      	ldr	r1, [r2, #0]
 800c286:	1855      	adds	r5, r2, r1
 800c288:	42a5      	cmp	r5, r4
 800c28a:	d10b      	bne.n	800c2a4 <_free_r+0x70>
 800c28c:	6824      	ldr	r4, [r4, #0]
 800c28e:	4421      	add	r1, r4
 800c290:	1854      	adds	r4, r2, r1
 800c292:	42a3      	cmp	r3, r4
 800c294:	6011      	str	r1, [r2, #0]
 800c296:	d1e0      	bne.n	800c25a <_free_r+0x26>
 800c298:	681c      	ldr	r4, [r3, #0]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	6053      	str	r3, [r2, #4]
 800c29e:	4421      	add	r1, r4
 800c2a0:	6011      	str	r1, [r2, #0]
 800c2a2:	e7da      	b.n	800c25a <_free_r+0x26>
 800c2a4:	d902      	bls.n	800c2ac <_free_r+0x78>
 800c2a6:	230c      	movs	r3, #12
 800c2a8:	6003      	str	r3, [r0, #0]
 800c2aa:	e7d6      	b.n	800c25a <_free_r+0x26>
 800c2ac:	6825      	ldr	r5, [r4, #0]
 800c2ae:	1961      	adds	r1, r4, r5
 800c2b0:	428b      	cmp	r3, r1
 800c2b2:	bf04      	itt	eq
 800c2b4:	6819      	ldreq	r1, [r3, #0]
 800c2b6:	685b      	ldreq	r3, [r3, #4]
 800c2b8:	6063      	str	r3, [r4, #4]
 800c2ba:	bf04      	itt	eq
 800c2bc:	1949      	addeq	r1, r1, r5
 800c2be:	6021      	streq	r1, [r4, #0]
 800c2c0:	6054      	str	r4, [r2, #4]
 800c2c2:	e7ca      	b.n	800c25a <_free_r+0x26>
 800c2c4:	b003      	add	sp, #12
 800c2c6:	bd30      	pop	{r4, r5, pc}
 800c2c8:	20008e04 	.word	0x20008e04

0800c2cc <sbrk_aligned>:
 800c2cc:	b570      	push	{r4, r5, r6, lr}
 800c2ce:	4e0e      	ldr	r6, [pc, #56]	; (800c308 <sbrk_aligned+0x3c>)
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	6831      	ldr	r1, [r6, #0]
 800c2d4:	4605      	mov	r5, r0
 800c2d6:	b911      	cbnz	r1, 800c2de <sbrk_aligned+0x12>
 800c2d8:	f000 f88c 	bl	800c3f4 <_sbrk_r>
 800c2dc:	6030      	str	r0, [r6, #0]
 800c2de:	4621      	mov	r1, r4
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	f000 f887 	bl	800c3f4 <_sbrk_r>
 800c2e6:	1c43      	adds	r3, r0, #1
 800c2e8:	d00a      	beq.n	800c300 <sbrk_aligned+0x34>
 800c2ea:	1cc4      	adds	r4, r0, #3
 800c2ec:	f024 0403 	bic.w	r4, r4, #3
 800c2f0:	42a0      	cmp	r0, r4
 800c2f2:	d007      	beq.n	800c304 <sbrk_aligned+0x38>
 800c2f4:	1a21      	subs	r1, r4, r0
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f000 f87c 	bl	800c3f4 <_sbrk_r>
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	d101      	bne.n	800c304 <sbrk_aligned+0x38>
 800c300:	f04f 34ff 	mov.w	r4, #4294967295
 800c304:	4620      	mov	r0, r4
 800c306:	bd70      	pop	{r4, r5, r6, pc}
 800c308:	20008e08 	.word	0x20008e08

0800c30c <_malloc_r>:
 800c30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c310:	1ccd      	adds	r5, r1, #3
 800c312:	f025 0503 	bic.w	r5, r5, #3
 800c316:	3508      	adds	r5, #8
 800c318:	2d0c      	cmp	r5, #12
 800c31a:	bf38      	it	cc
 800c31c:	250c      	movcc	r5, #12
 800c31e:	2d00      	cmp	r5, #0
 800c320:	4607      	mov	r7, r0
 800c322:	db01      	blt.n	800c328 <_malloc_r+0x1c>
 800c324:	42a9      	cmp	r1, r5
 800c326:	d905      	bls.n	800c334 <_malloc_r+0x28>
 800c328:	230c      	movs	r3, #12
 800c32a:	603b      	str	r3, [r7, #0]
 800c32c:	2600      	movs	r6, #0
 800c32e:	4630      	mov	r0, r6
 800c330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c334:	4e2e      	ldr	r6, [pc, #184]	; (800c3f0 <_malloc_r+0xe4>)
 800c336:	f000 f86d 	bl	800c414 <__malloc_lock>
 800c33a:	6833      	ldr	r3, [r6, #0]
 800c33c:	461c      	mov	r4, r3
 800c33e:	bb34      	cbnz	r4, 800c38e <_malloc_r+0x82>
 800c340:	4629      	mov	r1, r5
 800c342:	4638      	mov	r0, r7
 800c344:	f7ff ffc2 	bl	800c2cc <sbrk_aligned>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	4604      	mov	r4, r0
 800c34c:	d14d      	bne.n	800c3ea <_malloc_r+0xde>
 800c34e:	6834      	ldr	r4, [r6, #0]
 800c350:	4626      	mov	r6, r4
 800c352:	2e00      	cmp	r6, #0
 800c354:	d140      	bne.n	800c3d8 <_malloc_r+0xcc>
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	4631      	mov	r1, r6
 800c35a:	4638      	mov	r0, r7
 800c35c:	eb04 0803 	add.w	r8, r4, r3
 800c360:	f000 f848 	bl	800c3f4 <_sbrk_r>
 800c364:	4580      	cmp	r8, r0
 800c366:	d13a      	bne.n	800c3de <_malloc_r+0xd2>
 800c368:	6821      	ldr	r1, [r4, #0]
 800c36a:	3503      	adds	r5, #3
 800c36c:	1a6d      	subs	r5, r5, r1
 800c36e:	f025 0503 	bic.w	r5, r5, #3
 800c372:	3508      	adds	r5, #8
 800c374:	2d0c      	cmp	r5, #12
 800c376:	bf38      	it	cc
 800c378:	250c      	movcc	r5, #12
 800c37a:	4629      	mov	r1, r5
 800c37c:	4638      	mov	r0, r7
 800c37e:	f7ff ffa5 	bl	800c2cc <sbrk_aligned>
 800c382:	3001      	adds	r0, #1
 800c384:	d02b      	beq.n	800c3de <_malloc_r+0xd2>
 800c386:	6823      	ldr	r3, [r4, #0]
 800c388:	442b      	add	r3, r5
 800c38a:	6023      	str	r3, [r4, #0]
 800c38c:	e00e      	b.n	800c3ac <_malloc_r+0xa0>
 800c38e:	6822      	ldr	r2, [r4, #0]
 800c390:	1b52      	subs	r2, r2, r5
 800c392:	d41e      	bmi.n	800c3d2 <_malloc_r+0xc6>
 800c394:	2a0b      	cmp	r2, #11
 800c396:	d916      	bls.n	800c3c6 <_malloc_r+0xba>
 800c398:	1961      	adds	r1, r4, r5
 800c39a:	42a3      	cmp	r3, r4
 800c39c:	6025      	str	r5, [r4, #0]
 800c39e:	bf18      	it	ne
 800c3a0:	6059      	strne	r1, [r3, #4]
 800c3a2:	6863      	ldr	r3, [r4, #4]
 800c3a4:	bf08      	it	eq
 800c3a6:	6031      	streq	r1, [r6, #0]
 800c3a8:	5162      	str	r2, [r4, r5]
 800c3aa:	604b      	str	r3, [r1, #4]
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	f104 060b 	add.w	r6, r4, #11
 800c3b2:	f000 f835 	bl	800c420 <__malloc_unlock>
 800c3b6:	f026 0607 	bic.w	r6, r6, #7
 800c3ba:	1d23      	adds	r3, r4, #4
 800c3bc:	1af2      	subs	r2, r6, r3
 800c3be:	d0b6      	beq.n	800c32e <_malloc_r+0x22>
 800c3c0:	1b9b      	subs	r3, r3, r6
 800c3c2:	50a3      	str	r3, [r4, r2]
 800c3c4:	e7b3      	b.n	800c32e <_malloc_r+0x22>
 800c3c6:	6862      	ldr	r2, [r4, #4]
 800c3c8:	42a3      	cmp	r3, r4
 800c3ca:	bf0c      	ite	eq
 800c3cc:	6032      	streq	r2, [r6, #0]
 800c3ce:	605a      	strne	r2, [r3, #4]
 800c3d0:	e7ec      	b.n	800c3ac <_malloc_r+0xa0>
 800c3d2:	4623      	mov	r3, r4
 800c3d4:	6864      	ldr	r4, [r4, #4]
 800c3d6:	e7b2      	b.n	800c33e <_malloc_r+0x32>
 800c3d8:	4634      	mov	r4, r6
 800c3da:	6876      	ldr	r6, [r6, #4]
 800c3dc:	e7b9      	b.n	800c352 <_malloc_r+0x46>
 800c3de:	230c      	movs	r3, #12
 800c3e0:	603b      	str	r3, [r7, #0]
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	f000 f81c 	bl	800c420 <__malloc_unlock>
 800c3e8:	e7a1      	b.n	800c32e <_malloc_r+0x22>
 800c3ea:	6025      	str	r5, [r4, #0]
 800c3ec:	e7de      	b.n	800c3ac <_malloc_r+0xa0>
 800c3ee:	bf00      	nop
 800c3f0:	20008e04 	.word	0x20008e04

0800c3f4 <_sbrk_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	4d06      	ldr	r5, [pc, #24]	; (800c410 <_sbrk_r+0x1c>)
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	4608      	mov	r0, r1
 800c3fe:	602b      	str	r3, [r5, #0]
 800c400:	f7f5 f8cc 	bl	800159c <_sbrk>
 800c404:	1c43      	adds	r3, r0, #1
 800c406:	d102      	bne.n	800c40e <_sbrk_r+0x1a>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	b103      	cbz	r3, 800c40e <_sbrk_r+0x1a>
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	20008e0c 	.word	0x20008e0c

0800c414 <__malloc_lock>:
 800c414:	4801      	ldr	r0, [pc, #4]	; (800c41c <__malloc_lock+0x8>)
 800c416:	f000 b809 	b.w	800c42c <__retarget_lock_acquire_recursive>
 800c41a:	bf00      	nop
 800c41c:	20008e10 	.word	0x20008e10

0800c420 <__malloc_unlock>:
 800c420:	4801      	ldr	r0, [pc, #4]	; (800c428 <__malloc_unlock+0x8>)
 800c422:	f000 b804 	b.w	800c42e <__retarget_lock_release_recursive>
 800c426:	bf00      	nop
 800c428:	20008e10 	.word	0x20008e10

0800c42c <__retarget_lock_acquire_recursive>:
 800c42c:	4770      	bx	lr

0800c42e <__retarget_lock_release_recursive>:
 800c42e:	4770      	bx	lr

0800c430 <_init>:
 800c430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c432:	bf00      	nop
 800c434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c436:	bc08      	pop	{r3}
 800c438:	469e      	mov	lr, r3
 800c43a:	4770      	bx	lr

0800c43c <_fini>:
 800c43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43e:	bf00      	nop
 800c440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c442:	bc08      	pop	{r3}
 800c444:	469e      	mov	lr, r3
 800c446:	4770      	bx	lr
